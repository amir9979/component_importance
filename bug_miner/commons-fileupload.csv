valid,type,issue,module,commit,parent,testcase,has_test_annotation,traces,bugged_components,description,extra_description,blamed_components,diff
True,Delta,-1,commons-fileupload,163a6061fbc077d4b6e4787d26857c2baba495d1,e685ae49df3ccb864493f51a14ddd884e86e7e03,org.apache.commons.fileupload.DiskFileItemSerializeTest.testInvalidRepositoryWithNullChar,False,[],,,,org.apache.commons.fileupload.disk.diskfileitem.readobject(objectinputstream),"u'diff --git a/src/test/java/org/apache/commons/fileupload/DiskFileItemSerializeTest.java b/src/test/java/org/apache/commons/fileupload/DiskFileItemSerializeTest.java\nindex 8a77fd6..e823f74 100644\n--- a/src/test/java/org/apache/commons/fileupload/DiskFileItemSerializeTest.java\n+++ b/src/test/java/org/apache/commons/fileupload/DiskFileItemSerializeTest.java\n@@ -24,6 +24,7 @@ import static org.junit.Assert.fail;\n \n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n+import java.io.File;\n import java.io.IOException;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n@@ -51,14 +52,10 @@ public class DiskFileItemSerializeTest {\n     private static final int threshold = 16;\n \n     /**\n-     * Test creation of a field for which the amount of data falls below the\n-     * configured threshold.\n+     * Helper method to test creation of a field when a repository is used.\n      */\n-    @Test\n-    public void testBelowThreshold() throws Exception {\n-        // Create the FileItem\n-        byte[] testFieldValueBytes = createContentBytes(threshold - 1);\n-        FileItem item = createFileItem(testFieldValueBytes);\n+    public void testInMemoryObject(byte[] testFieldValueBytes, File repository) {\n+        FileItem item = createFileItem(testFieldValueBytes, repository);\n \n         // Check state is as expected\n         assertTrue(""Initial: in memory"", item.isInMemory());\n@@ -75,6 +72,24 @@ public class DiskFileItemSerializeTest {\n         // Compare FileItem\'s (except byte[])\n         compareFileItems(item, newItem);\n     }\n+    \n+    /**\n+     * Helper method to test creation of a field.\n+     */\n+    private void testInMemoryObject(byte[] testFieldValueBytes) {\n+        testInMemoryObject(testFieldValueBytes, null);\n+    }\n+    \n+    /**\n+     * Test creation of a field for which the amount of data falls below the\n+     * configured threshold.\n+     */\n+    @Test\n+    public void testBelowThreshold() throws Exception {\n+        // Create the FileItem\n+        byte[] testFieldValueBytes = createContentBytes(threshold - 1);\n+        testInMemoryObject(testFieldValueBytes);\n+    }\n \n     /**\n      * Test creation of a field for which the amount of data equals the\n@@ -84,23 +99,7 @@ public class DiskFileItemSerializeTest {\n     public void testThreshold() throws Exception {\n         // Create the FileItem\n         byte[] testFieldValueBytes = createContentBytes(threshold);\n-        FileItem item = createFileItem(testFieldValueBytes);\n-\n-        // Check state is as expected\n-        assertTrue(""Initial: in memory"", item.isInMemory());\n-        assertEquals(""Initial: size"", item.getSize(), testFieldValueBytes.length);\n-        compareBytes(""Initial"", item.get(), testFieldValueBytes);\n-\n-\n-        // Serialize & Deserialize\n-        FileItem newItem = (FileItem)serializeDeserialize(item);\n-\n-        // Test deserialized content is as expected\n-        assertTrue(""Check in memory"", newItem.isInMemory());\n-        compareBytes(""Check"", testFieldValueBytes, newItem.get());\n-\n-        // Compare FileItem\'s (except byte[])\n-        compareFileItems(item, newItem);\n+        testInMemoryObject(testFieldValueBytes);\n     }\n \n     /**\n@@ -128,6 +127,41 @@ public class DiskFileItemSerializeTest {\n         // Compare FileItem\'s (except byte[])\n         compareFileItems(item, newItem);\n     }\n+    \n+    /**\n+     * Test serialization and deserialization when repository is not null.\n+     */\n+    @Test\n+    public void testValidRepository() throws Exception {\n+        // Create the FileItem\n+        byte[] testFieldValueBytes = createContentBytes(threshold);\n+        File repository = new File(System.getProperty(""java.io.tmpdir""));\n+        testInMemoryObject(testFieldValueBytes, repository);\n+    }\n+    \n+    /**\n+     * Test deserialization fails when repository is not valid.\n+     */\n+    @Test(expected=IOException.class)\n+    public void testInvalidRepository() throws Exception {\n+        // Create the FileItem\n+        byte[] testFieldValueBytes = createContentBytes(threshold);\n+        File repository = new File(System.getProperty(""java.io.tmpdir"") + ""file"");\n+        FileItem item = createFileItem(testFieldValueBytes, repository);\n+        deserialize(serialize(item));\n+    }\n+    \n+    /**\n+     * Test deserialization fails when repository contains a null character.\n+     */\n+    @Test(expected=IOException.class)\n+    public void testInvalidRepositoryWithNullChar() throws Exception {\n+        // Create the FileItem\n+        byte[] testFieldValueBytes = createContentBytes(threshold);\n+        File repository = new File(System.getProperty(""java.io.tmpdir"") + ""\\0"");\n+        FileItem item = createFileItem(testFieldValueBytes, repository);\n+        deserialize(serialize(item));\n+    }\n \n     /**\n      * Compare FileItem\'s (except the byte[] content)\n@@ -169,10 +203,10 @@ public class DiskFileItemSerializeTest {\n     }\n \n     /**\n-     * Create a FileItem with the specfied content bytes.\n+     * Create a FileItem with the specfied content bytes and repository.\n      */\n-    private FileItem createFileItem(byte[] contentBytes) {\n-        FileItemFactory factory = new DiskFileItemFactory(threshold, null);\n+    private FileItem createFileItem(byte[] contentBytes, File repository) {\n+        FileItemFactory factory = new DiskFileItemFactory(threshold, repository);\n         String textFieldName = ""textField"";\n \n         FileItem item = factory.createItem(\n@@ -192,33 +226,60 @@ public class DiskFileItemSerializeTest {\n         return item;\n \n     }\n+    \n+    /**\n+     * Create a FileItem with the specfied content bytes.\n+     */\n+    private FileItem createFileItem(byte[] contentBytes) {\n+        return createFileItem(contentBytes, null);\n+    }\n+    \n+    /**\n+     * Do serialization\n+     */\n+    private ByteArrayOutputStream serialize(Object target) throws Exception {\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(target);\n+        oos.flush();\n+        oos.close();\n+        return baos;\n+    }\n+    \n+    /**\n+     * Do deserialization\n+     */\n+    private Object deserialize(ByteArrayOutputStream baos) throws Exception {\n+        Object result = null;\n+        ByteArrayInputStream bais =\n+                new ByteArrayInputStream(baos.toByteArray());\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        result = ois.readObject();\n+        bais.close();\n \n+        return result;\n+    }\n+    \n     /**\n      * Do serialization and deserialization.\n      */\n     private Object serializeDeserialize(Object target) {\n         // Serialize the test object\n-        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ByteArrayOutputStream baos = null;\n         try {\n-            ObjectOutputStream oos = new ObjectOutputStream(baos);\n-            oos.writeObject(target);\n-            oos.flush();\n-            oos.close();\n+            baos = serialize(target);\n         } catch (Exception e) {\n             fail(""Exception during serialization: "" + e);\n         }\n-\n+        \n         // Deserialize the test object\n         Object result = null;\n         try {\n-            ByteArrayInputStream bais =\n-                new ByteArrayInputStream(baos.toByteArray());\n-            ObjectInputStream ois = new ObjectInputStream(bais);\n-            result = ois.readObject();\n-            bais.close();\n+            result = deserialize(baos);\n         } catch (Exception e) {\n             fail(""Exception during deserialization: "" + e);\n         }\n+        \n         return result;\n     }\n '"
True,Delta,-1,commons-fileupload,163a6061fbc077d4b6e4787d26857c2baba495d1,e685ae49df3ccb864493f51a14ddd884e86e7e03,org.apache.commons.fileupload.DiskFileItemSerializeTest.testInvalidRepositoryWithNullChar,False,[],,,,org.apache.commons.fileupload.disk.diskfileitem.readobject(objectinputstream),"u'diff --git a/src/test/java/org/apache/commons/fileupload/DiskFileItemSerializeTest.java b/src/test/java/org/apache/commons/fileupload/DiskFileItemSerializeTest.java\nindex 8a77fd6..e823f74 100644\n--- a/src/test/java/org/apache/commons/fileupload/DiskFileItemSerializeTest.java\n+++ b/src/test/java/org/apache/commons/fileupload/DiskFileItemSerializeTest.java\n@@ -24,6 +24,7 @@ import static org.junit.Assert.fail;\n \n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n+import java.io.File;\n import java.io.IOException;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n@@ -51,14 +52,10 @@ public class DiskFileItemSerializeTest {\n     private static final int threshold = 16;\n \n     /**\n-     * Test creation of a field for which the amount of data falls below the\n-     * configured threshold.\n+     * Helper method to test creation of a field when a repository is used.\n      */\n-    @Test\n-    public void testBelowThreshold() throws Exception {\n-        // Create the FileItem\n-        byte[] testFieldValueBytes = createContentBytes(threshold - 1);\n-        FileItem item = createFileItem(testFieldValueBytes);\n+    public void testInMemoryObject(byte[] testFieldValueBytes, File repository) {\n+        FileItem item = createFileItem(testFieldValueBytes, repository);\n \n         // Check state is as expected\n         assertTrue(""Initial: in memory"", item.isInMemory());\n@@ -75,6 +72,24 @@ public class DiskFileItemSerializeTest {\n         // Compare FileItem\'s (except byte[])\n         compareFileItems(item, newItem);\n     }\n+    \n+    /**\n+     * Helper method to test creation of a field.\n+     */\n+    private void testInMemoryObject(byte[] testFieldValueBytes) {\n+        testInMemoryObject(testFieldValueBytes, null);\n+    }\n+    \n+    /**\n+     * Test creation of a field for which the amount of data falls below the\n+     * configured threshold.\n+     */\n+    @Test\n+    public void testBelowThreshold() throws Exception {\n+        // Create the FileItem\n+        byte[] testFieldValueBytes = createContentBytes(threshold - 1);\n+        testInMemoryObject(testFieldValueBytes);\n+    }\n \n     /**\n      * Test creation of a field for which the amount of data equals the\n@@ -84,23 +99,7 @@ public class DiskFileItemSerializeTest {\n     public void testThreshold() throws Exception {\n         // Create the FileItem\n         byte[] testFieldValueBytes = createContentBytes(threshold);\n-        FileItem item = createFileItem(testFieldValueBytes);\n-\n-        // Check state is as expected\n-        assertTrue(""Initial: in memory"", item.isInMemory());\n-        assertEquals(""Initial: size"", item.getSize(), testFieldValueBytes.length);\n-        compareBytes(""Initial"", item.get(), testFieldValueBytes);\n-\n-\n-        // Serialize & Deserialize\n-        FileItem newItem = (FileItem)serializeDeserialize(item);\n-\n-        // Test deserialized content is as expected\n-        assertTrue(""Check in memory"", newItem.isInMemory());\n-        compareBytes(""Check"", testFieldValueBytes, newItem.get());\n-\n-        // Compare FileItem\'s (except byte[])\n-        compareFileItems(item, newItem);\n+        testInMemoryObject(testFieldValueBytes);\n     }\n \n     /**\n@@ -128,6 +127,41 @@ public class DiskFileItemSerializeTest {\n         // Compare FileItem\'s (except byte[])\n         compareFileItems(item, newItem);\n     }\n+    \n+    /**\n+     * Test serialization and deserialization when repository is not null.\n+     */\n+    @Test\n+    public void testValidRepository() throws Exception {\n+        // Create the FileItem\n+        byte[] testFieldValueBytes = createContentBytes(threshold);\n+        File repository = new File(System.getProperty(""java.io.tmpdir""));\n+        testInMemoryObject(testFieldValueBytes, repository);\n+    }\n+    \n+    /**\n+     * Test deserialization fails when repository is not valid.\n+     */\n+    @Test(expected=IOException.class)\n+    public void testInvalidRepository() throws Exception {\n+        // Create the FileItem\n+        byte[] testFieldValueBytes = createContentBytes(threshold);\n+        File repository = new File(System.getProperty(""java.io.tmpdir"") + ""file"");\n+        FileItem item = createFileItem(testFieldValueBytes, repository);\n+        deserialize(serialize(item));\n+    }\n+    \n+    /**\n+     * Test deserialization fails when repository contains a null character.\n+     */\n+    @Test(expected=IOException.class)\n+    public void testInvalidRepositoryWithNullChar() throws Exception {\n+        // Create the FileItem\n+        byte[] testFieldValueBytes = createContentBytes(threshold);\n+        File repository = new File(System.getProperty(""java.io.tmpdir"") + ""\\0"");\n+        FileItem item = createFileItem(testFieldValueBytes, repository);\n+        deserialize(serialize(item));\n+    }\n \n     /**\n      * Compare FileItem\'s (except the byte[] content)\n@@ -169,10 +203,10 @@ public class DiskFileItemSerializeTest {\n     }\n \n     /**\n-     * Create a FileItem with the specfied content bytes.\n+     * Create a FileItem with the specfied content bytes and repository.\n      */\n-    private FileItem createFileItem(byte[] contentBytes) {\n-        FileItemFactory factory = new DiskFileItemFactory(threshold, null);\n+    private FileItem createFileItem(byte[] contentBytes, File repository) {\n+        FileItemFactory factory = new DiskFileItemFactory(threshold, repository);\n         String textFieldName = ""textField"";\n \n         FileItem item = factory.createItem(\n@@ -192,33 +226,60 @@ public class DiskFileItemSerializeTest {\n         return item;\n \n     }\n+    \n+    /**\n+     * Create a FileItem with the specfied content bytes.\n+     */\n+    private FileItem createFileItem(byte[] contentBytes) {\n+        return createFileItem(contentBytes, null);\n+    }\n+    \n+    /**\n+     * Do serialization\n+     */\n+    private ByteArrayOutputStream serialize(Object target) throws Exception {\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(target);\n+        oos.flush();\n+        oos.close();\n+        return baos;\n+    }\n+    \n+    /**\n+     * Do deserialization\n+     */\n+    private Object deserialize(ByteArrayOutputStream baos) throws Exception {\n+        Object result = null;\n+        ByteArrayInputStream bais =\n+                new ByteArrayInputStream(baos.toByteArray());\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        result = ois.readObject();\n+        bais.close();\n \n+        return result;\n+    }\n+    \n     /**\n      * Do serialization and deserialization.\n      */\n     private Object serializeDeserialize(Object target) {\n         // Serialize the test object\n-        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ByteArrayOutputStream baos = null;\n         try {\n-            ObjectOutputStream oos = new ObjectOutputStream(baos);\n-            oos.writeObject(target);\n-            oos.flush();\n-            oos.close();\n+            baos = serialize(target);\n         } catch (Exception e) {\n             fail(""Exception during serialization: "" + e);\n         }\n-\n+        \n         // Deserialize the test object\n         Object result = null;\n         try {\n-            ByteArrayInputStream bais =\n-                new ByteArrayInputStream(baos.toByteArray());\n-            ObjectInputStream ois = new ObjectInputStream(bais);\n-            result = ois.readObject();\n-            bais.close();\n+            result = deserialize(baos);\n         } catch (Exception e) {\n             fail(""Exception during deserialization: "" + e);\n         }\n+        \n         return result;\n     }\n '"
True,Delta,-1,commons-fileupload,163a6061fbc077d4b6e4787d26857c2baba495d1,e685ae49df3ccb864493f51a14ddd884e86e7e03,org.apache.commons.fileupload.DiskFileItemSerializeTest.testInvalidRepository,False,[],,,,org.apache.commons.fileupload.disk.diskfileitem.readobject(objectinputstream),"u'diff --git a/src/test/java/org/apache/commons/fileupload/DiskFileItemSerializeTest.java b/src/test/java/org/apache/commons/fileupload/DiskFileItemSerializeTest.java\nindex 8a77fd6..e823f74 100644\n--- a/src/test/java/org/apache/commons/fileupload/DiskFileItemSerializeTest.java\n+++ b/src/test/java/org/apache/commons/fileupload/DiskFileItemSerializeTest.java\n@@ -24,6 +24,7 @@ import static org.junit.Assert.fail;\n \n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n+import java.io.File;\n import java.io.IOException;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n@@ -51,14 +52,10 @@ public class DiskFileItemSerializeTest {\n     private static final int threshold = 16;\n \n     /**\n-     * Test creation of a field for which the amount of data falls below the\n-     * configured threshold.\n+     * Helper method to test creation of a field when a repository is used.\n      */\n-    @Test\n-    public void testBelowThreshold() throws Exception {\n-        // Create the FileItem\n-        byte[] testFieldValueBytes = createContentBytes(threshold - 1);\n-        FileItem item = createFileItem(testFieldValueBytes);\n+    public void testInMemoryObject(byte[] testFieldValueBytes, File repository) {\n+        FileItem item = createFileItem(testFieldValueBytes, repository);\n \n         // Check state is as expected\n         assertTrue(""Initial: in memory"", item.isInMemory());\n@@ -75,6 +72,24 @@ public class DiskFileItemSerializeTest {\n         // Compare FileItem\'s (except byte[])\n         compareFileItems(item, newItem);\n     }\n+    \n+    /**\n+     * Helper method to test creation of a field.\n+     */\n+    private void testInMemoryObject(byte[] testFieldValueBytes) {\n+        testInMemoryObject(testFieldValueBytes, null);\n+    }\n+    \n+    /**\n+     * Test creation of a field for which the amount of data falls below the\n+     * configured threshold.\n+     */\n+    @Test\n+    public void testBelowThreshold() throws Exception {\n+        // Create the FileItem\n+        byte[] testFieldValueBytes = createContentBytes(threshold - 1);\n+        testInMemoryObject(testFieldValueBytes);\n+    }\n \n     /**\n      * Test creation of a field for which the amount of data equals the\n@@ -84,23 +99,7 @@ public class DiskFileItemSerializeTest {\n     public void testThreshold() throws Exception {\n         // Create the FileItem\n         byte[] testFieldValueBytes = createContentBytes(threshold);\n-        FileItem item = createFileItem(testFieldValueBytes);\n-\n-        // Check state is as expected\n-        assertTrue(""Initial: in memory"", item.isInMemory());\n-        assertEquals(""Initial: size"", item.getSize(), testFieldValueBytes.length);\n-        compareBytes(""Initial"", item.get(), testFieldValueBytes);\n-\n-\n-        // Serialize & Deserialize\n-        FileItem newItem = (FileItem)serializeDeserialize(item);\n-\n-        // Test deserialized content is as expected\n-        assertTrue(""Check in memory"", newItem.isInMemory());\n-        compareBytes(""Check"", testFieldValueBytes, newItem.get());\n-\n-        // Compare FileItem\'s (except byte[])\n-        compareFileItems(item, newItem);\n+        testInMemoryObject(testFieldValueBytes);\n     }\n \n     /**\n@@ -128,6 +127,41 @@ public class DiskFileItemSerializeTest {\n         // Compare FileItem\'s (except byte[])\n         compareFileItems(item, newItem);\n     }\n+    \n+    /**\n+     * Test serialization and deserialization when repository is not null.\n+     */\n+    @Test\n+    public void testValidRepository() throws Exception {\n+        // Create the FileItem\n+        byte[] testFieldValueBytes = createContentBytes(threshold);\n+        File repository = new File(System.getProperty(""java.io.tmpdir""));\n+        testInMemoryObject(testFieldValueBytes, repository);\n+    }\n+    \n+    /**\n+     * Test deserialization fails when repository is not valid.\n+     */\n+    @Test(expected=IOException.class)\n+    public void testInvalidRepository() throws Exception {\n+        // Create the FileItem\n+        byte[] testFieldValueBytes = createContentBytes(threshold);\n+        File repository = new File(System.getProperty(""java.io.tmpdir"") + ""file"");\n+        FileItem item = createFileItem(testFieldValueBytes, repository);\n+        deserialize(serialize(item));\n+    }\n+    \n+    /**\n+     * Test deserialization fails when repository contains a null character.\n+     */\n+    @Test(expected=IOException.class)\n+    public void testInvalidRepositoryWithNullChar() throws Exception {\n+        // Create the FileItem\n+        byte[] testFieldValueBytes = createContentBytes(threshold);\n+        File repository = new File(System.getProperty(""java.io.tmpdir"") + ""\\0"");\n+        FileItem item = createFileItem(testFieldValueBytes, repository);\n+        deserialize(serialize(item));\n+    }\n \n     /**\n      * Compare FileItem\'s (except the byte[] content)\n@@ -169,10 +203,10 @@ public class DiskFileItemSerializeTest {\n     }\n \n     /**\n-     * Create a FileItem with the specfied content bytes.\n+     * Create a FileItem with the specfied content bytes and repository.\n      */\n-    private FileItem createFileItem(byte[] contentBytes) {\n-        FileItemFactory factory = new DiskFileItemFactory(threshold, null);\n+    private FileItem createFileItem(byte[] contentBytes, File repository) {\n+        FileItemFactory factory = new DiskFileItemFactory(threshold, repository);\n         String textFieldName = ""textField"";\n \n         FileItem item = factory.createItem(\n@@ -192,33 +226,60 @@ public class DiskFileItemSerializeTest {\n         return item;\n \n     }\n+    \n+    /**\n+     * Create a FileItem with the specfied content bytes.\n+     */\n+    private FileItem createFileItem(byte[] contentBytes) {\n+        return createFileItem(contentBytes, null);\n+    }\n+    \n+    /**\n+     * Do serialization\n+     */\n+    private ByteArrayOutputStream serialize(Object target) throws Exception {\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(target);\n+        oos.flush();\n+        oos.close();\n+        return baos;\n+    }\n+    \n+    /**\n+     * Do deserialization\n+     */\n+    private Object deserialize(ByteArrayOutputStream baos) throws Exception {\n+        Object result = null;\n+        ByteArrayInputStream bais =\n+                new ByteArrayInputStream(baos.toByteArray());\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        result = ois.readObject();\n+        bais.close();\n \n+        return result;\n+    }\n+    \n     /**\n      * Do serialization and deserialization.\n      */\n     private Object serializeDeserialize(Object target) {\n         // Serialize the test object\n-        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ByteArrayOutputStream baos = null;\n         try {\n-            ObjectOutputStream oos = new ObjectOutputStream(baos);\n-            oos.writeObject(target);\n-            oos.flush();\n-            oos.close();\n+            baos = serialize(target);\n         } catch (Exception e) {\n             fail(""Exception during serialization: "" + e);\n         }\n-\n+        \n         // Deserialize the test object\n         Object result = null;\n         try {\n-            ByteArrayInputStream bais =\n-                new ByteArrayInputStream(baos.toByteArray());\n-            ObjectInputStream ois = new ObjectInputStream(bais);\n-            result = ois.readObject();\n-            bais.close();\n+            result = deserialize(baos);\n         } catch (Exception e) {\n             fail(""Exception during deserialization: "" + e);\n         }\n+        \n         return result;\n     }\n '"
True,Delta,-1,commons-fileupload,163a6061fbc077d4b6e4787d26857c2baba495d1,e685ae49df3ccb864493f51a14ddd884e86e7e03,org.apache.commons.fileupload.DiskFileItemSerializeTest.testInvalidRepository,False,[],,,,org.apache.commons.fileupload.disk.diskfileitem.readobject(objectinputstream),"u'diff --git a/src/test/java/org/apache/commons/fileupload/DiskFileItemSerializeTest.java b/src/test/java/org/apache/commons/fileupload/DiskFileItemSerializeTest.java\nindex 8a77fd6..e823f74 100644\n--- a/src/test/java/org/apache/commons/fileupload/DiskFileItemSerializeTest.java\n+++ b/src/test/java/org/apache/commons/fileupload/DiskFileItemSerializeTest.java\n@@ -24,6 +24,7 @@ import static org.junit.Assert.fail;\n \n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n+import java.io.File;\n import java.io.IOException;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n@@ -51,14 +52,10 @@ public class DiskFileItemSerializeTest {\n     private static final int threshold = 16;\n \n     /**\n-     * Test creation of a field for which the amount of data falls below the\n-     * configured threshold.\n+     * Helper method to test creation of a field when a repository is used.\n      */\n-    @Test\n-    public void testBelowThreshold() throws Exception {\n-        // Create the FileItem\n-        byte[] testFieldValueBytes = createContentBytes(threshold - 1);\n-        FileItem item = createFileItem(testFieldValueBytes);\n+    public void testInMemoryObject(byte[] testFieldValueBytes, File repository) {\n+        FileItem item = createFileItem(testFieldValueBytes, repository);\n \n         // Check state is as expected\n         assertTrue(""Initial: in memory"", item.isInMemory());\n@@ -75,6 +72,24 @@ public class DiskFileItemSerializeTest {\n         // Compare FileItem\'s (except byte[])\n         compareFileItems(item, newItem);\n     }\n+    \n+    /**\n+     * Helper method to test creation of a field.\n+     */\n+    private void testInMemoryObject(byte[] testFieldValueBytes) {\n+        testInMemoryObject(testFieldValueBytes, null);\n+    }\n+    \n+    /**\n+     * Test creation of a field for which the amount of data falls below the\n+     * configured threshold.\n+     */\n+    @Test\n+    public void testBelowThreshold() throws Exception {\n+        // Create the FileItem\n+        byte[] testFieldValueBytes = createContentBytes(threshold - 1);\n+        testInMemoryObject(testFieldValueBytes);\n+    }\n \n     /**\n      * Test creation of a field for which the amount of data equals the\n@@ -84,23 +99,7 @@ public class DiskFileItemSerializeTest {\n     public void testThreshold() throws Exception {\n         // Create the FileItem\n         byte[] testFieldValueBytes = createContentBytes(threshold);\n-        FileItem item = createFileItem(testFieldValueBytes);\n-\n-        // Check state is as expected\n-        assertTrue(""Initial: in memory"", item.isInMemory());\n-        assertEquals(""Initial: size"", item.getSize(), testFieldValueBytes.length);\n-        compareBytes(""Initial"", item.get(), testFieldValueBytes);\n-\n-\n-        // Serialize & Deserialize\n-        FileItem newItem = (FileItem)serializeDeserialize(item);\n-\n-        // Test deserialized content is as expected\n-        assertTrue(""Check in memory"", newItem.isInMemory());\n-        compareBytes(""Check"", testFieldValueBytes, newItem.get());\n-\n-        // Compare FileItem\'s (except byte[])\n-        compareFileItems(item, newItem);\n+        testInMemoryObject(testFieldValueBytes);\n     }\n \n     /**\n@@ -128,6 +127,41 @@ public class DiskFileItemSerializeTest {\n         // Compare FileItem\'s (except byte[])\n         compareFileItems(item, newItem);\n     }\n+    \n+    /**\n+     * Test serialization and deserialization when repository is not null.\n+     */\n+    @Test\n+    public void testValidRepository() throws Exception {\n+        // Create the FileItem\n+        byte[] testFieldValueBytes = createContentBytes(threshold);\n+        File repository = new File(System.getProperty(""java.io.tmpdir""));\n+        testInMemoryObject(testFieldValueBytes, repository);\n+    }\n+    \n+    /**\n+     * Test deserialization fails when repository is not valid.\n+     */\n+    @Test(expected=IOException.class)\n+    public void testInvalidRepository() throws Exception {\n+        // Create the FileItem\n+        byte[] testFieldValueBytes = createContentBytes(threshold);\n+        File repository = new File(System.getProperty(""java.io.tmpdir"") + ""file"");\n+        FileItem item = createFileItem(testFieldValueBytes, repository);\n+        deserialize(serialize(item));\n+    }\n+    \n+    /**\n+     * Test deserialization fails when repository contains a null character.\n+     */\n+    @Test(expected=IOException.class)\n+    public void testInvalidRepositoryWithNullChar() throws Exception {\n+        // Create the FileItem\n+        byte[] testFieldValueBytes = createContentBytes(threshold);\n+        File repository = new File(System.getProperty(""java.io.tmpdir"") + ""\\0"");\n+        FileItem item = createFileItem(testFieldValueBytes, repository);\n+        deserialize(serialize(item));\n+    }\n \n     /**\n      * Compare FileItem\'s (except the byte[] content)\n@@ -169,10 +203,10 @@ public class DiskFileItemSerializeTest {\n     }\n \n     /**\n-     * Create a FileItem with the specfied content bytes.\n+     * Create a FileItem with the specfied content bytes and repository.\n      */\n-    private FileItem createFileItem(byte[] contentBytes) {\n-        FileItemFactory factory = new DiskFileItemFactory(threshold, null);\n+    private FileItem createFileItem(byte[] contentBytes, File repository) {\n+        FileItemFactory factory = new DiskFileItemFactory(threshold, repository);\n         String textFieldName = ""textField"";\n \n         FileItem item = factory.createItem(\n@@ -192,33 +226,60 @@ public class DiskFileItemSerializeTest {\n         return item;\n \n     }\n+    \n+    /**\n+     * Create a FileItem with the specfied content bytes.\n+     */\n+    private FileItem createFileItem(byte[] contentBytes) {\n+        return createFileItem(contentBytes, null);\n+    }\n+    \n+    /**\n+     * Do serialization\n+     */\n+    private ByteArrayOutputStream serialize(Object target) throws Exception {\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(target);\n+        oos.flush();\n+        oos.close();\n+        return baos;\n+    }\n+    \n+    /**\n+     * Do deserialization\n+     */\n+    private Object deserialize(ByteArrayOutputStream baos) throws Exception {\n+        Object result = null;\n+        ByteArrayInputStream bais =\n+                new ByteArrayInputStream(baos.toByteArray());\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        result = ois.readObject();\n+        bais.close();\n \n+        return result;\n+    }\n+    \n     /**\n      * Do serialization and deserialization.\n      */\n     private Object serializeDeserialize(Object target) {\n         // Serialize the test object\n-        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ByteArrayOutputStream baos = null;\n         try {\n-            ObjectOutputStream oos = new ObjectOutputStream(baos);\n-            oos.writeObject(target);\n-            oos.flush();\n-            oos.close();\n+            baos = serialize(target);\n         } catch (Exception e) {\n             fail(""Exception during serialization: "" + e);\n         }\n-\n+        \n         // Deserialize the test object\n         Object result = null;\n         try {\n-            ByteArrayInputStream bais =\n-                new ByteArrayInputStream(baos.toByteArray());\n-            ObjectInputStream ois = new ObjectInputStream(bais);\n-            result = ois.readObject();\n-            bais.close();\n+            result = deserialize(baos);\n         } catch (Exception e) {\n             fail(""Exception during deserialization: "" + e);\n         }\n+        \n         return result;\n     }\n '"
True,Regression,-1,commons-fileupload,a8cbf7aedbcc8807471dca4af9599cd4e0eb6ec9,48335090e723be824a890da5e5fd75fae3774102,org.apache.commons.fileupload.util.mime.Base64DecoderTestCase.decodeWithInnerPad,False,[],,,,org.apache.commons.fileupload.util.mime.base64decoder.ignore(char),"u'diff --git a/src/test/java/org/apache/commons/fileupload/util/mime/Base64DecoderTestCase.java b/src/test/java/org/apache/commons/fileupload/util/mime/Base64DecoderTestCase.java\nindex fa4beb4..94e0b8c 100644\n--- a/src/test/java/org/apache/commons/fileupload/util/mime/Base64DecoderTestCase.java\n+++ b/src/test/java/org/apache/commons/fileupload/util/mime/Base64DecoderTestCase.java\n@@ -19,6 +19,7 @@ package org.apache.commons.fileupload.util.mime;\n import static org.junit.Assert.assertArrayEquals;\n \n import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n \n import org.junit.Test;\n \n@@ -55,15 +56,15 @@ public final class Base64DecoderTestCase {\n     }\n \n     /**\n-     * Test our decode with a pad character in the middle.\n+     * Test our decode with pad character in the middle.\n+     * Returns data up to pad character.\n      *\n-     * Contrary to Apache Commons-Codec implementation, doesn\'t halt decode and return what we\'ve got so far.\n      *\n      * @throws Exception if any error occurs while decoding the input string.\n      */\n     @Test\n     public void decodeWithInnerPad() throws Exception {\n-        assertEncoded(""Hello World\\0Hello World"", ""SGVsbG8gV29ybGQ=SGVsbG8gV29ybGQ="");\n+        assertEncoded(""Hello World"", ""SGVsbG8gV29ybGQ=SGVsbG8gV29ybGQ="");\n     }\n \n     private static void assertEncoded(String clearText, String encoded) throws Exception {\n@@ -78,16 +79,13 @@ public final class Base64DecoderTestCase {\n     }\n \n     /**\n-     * Throws ArrayIndexOutOfBoundsException on some non-BASE64 bytes.\n-     *\n-     * This is fixed in Apache Commons-Codec.\n+     * Throws IOException for non-BASE64 bytes.\n      *\n      * @throws Exception\n-     * @see <a href=""https://issues.apache.org/jira/browse/CODEC-68"">CODEC-68</a>\n      */\n-    @Test(expected = ArrayIndexOutOfBoundsException.class)\n+    @Test(expected = IOException.class)\n     public void nonBase64Bytes() throws Exception {\n-        final byte[] x = new byte[]{\'n\', \'A\', \'=\', \'=\', (byte) 0x9c};\n+        final byte[] x = new byte[]{\'n\', \'A\', (byte) 0x9c};\n         Base64Decoder.decode(x, new ByteArrayOutputStream());\n     }\n '"
True,Regression,-1,commons-fileupload,a8cbf7aedbcc8807471dca4af9599cd4e0eb6ec9,48335090e723be824a890da5e5fd75fae3774102,org.apache.commons.fileupload.util.mime.Base64DecoderTestCase.decodeWithInnerPad,False,[],,,,org.apache.commons.fileupload.util.mime.base64decoder.ignore(char),"u'diff --git a/src/test/java/org/apache/commons/fileupload/util/mime/Base64DecoderTestCase.java b/src/test/java/org/apache/commons/fileupload/util/mime/Base64DecoderTestCase.java\nindex fa4beb4..94e0b8c 100644\n--- a/src/test/java/org/apache/commons/fileupload/util/mime/Base64DecoderTestCase.java\n+++ b/src/test/java/org/apache/commons/fileupload/util/mime/Base64DecoderTestCase.java\n@@ -19,6 +19,7 @@ package org.apache.commons.fileupload.util.mime;\n import static org.junit.Assert.assertArrayEquals;\n \n import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n \n import org.junit.Test;\n \n@@ -55,15 +56,15 @@ public final class Base64DecoderTestCase {\n     }\n \n     /**\n-     * Test our decode with a pad character in the middle.\n+     * Test our decode with pad character in the middle.\n+     * Returns data up to pad character.\n      *\n-     * Contrary to Apache Commons-Codec implementation, doesn\'t halt decode and return what we\'ve got so far.\n      *\n      * @throws Exception if any error occurs while decoding the input string.\n      */\n     @Test\n     public void decodeWithInnerPad() throws Exception {\n-        assertEncoded(""Hello World\\0Hello World"", ""SGVsbG8gV29ybGQ=SGVsbG8gV29ybGQ="");\n+        assertEncoded(""Hello World"", ""SGVsbG8gV29ybGQ=SGVsbG8gV29ybGQ="");\n     }\n \n     private static void assertEncoded(String clearText, String encoded) throws Exception {\n@@ -78,16 +79,13 @@ public final class Base64DecoderTestCase {\n     }\n \n     /**\n-     * Throws ArrayIndexOutOfBoundsException on some non-BASE64 bytes.\n-     *\n-     * This is fixed in Apache Commons-Codec.\n+     * Throws IOException for non-BASE64 bytes.\n      *\n      * @throws Exception\n-     * @see <a href=""https://issues.apache.org/jira/browse/CODEC-68"">CODEC-68</a>\n      */\n-    @Test(expected = ArrayIndexOutOfBoundsException.class)\n+    @Test(expected = IOException.class)\n     public void nonBase64Bytes() throws Exception {\n-        final byte[] x = new byte[]{\'n\', \'A\', \'=\', \'=\', (byte) 0x9c};\n+        final byte[] x = new byte[]{\'n\', \'A\', (byte) 0x9c};\n         Base64Decoder.decode(x, new ByteArrayOutputStream());\n     }\n '"

valid,type,issue,module,commit,parent,testcase,has_test_annotation,traces,bugged_components,description,extra_description,blamed_components,diff
True,Regression,TIKA-16,tika,d7dabee5ce14240f3c5ba2f6147c963d03604dd3,74f807d5645dc46e45ec62f79ab6d1b51457d3bf,org.apache.tika.utils.MimeTypesUtilsTest#test,False,[],org.apache.tika.parser.ParserFactory@org.apache.tika.utils.Utils@org.apache.tika.config.LiusConfig,,,org.apache.tika.config.LiusConfig.parse(String)@org.apache.tika.utils.MimeTypesUtils.getMimeType(String),"u'diff --git a/src/test/java/org/apache/tika/TestParsers.java b/src/test/java/org/apache/tika/TestParsers.java\nindex 38aaad3cc..df525dd64 100644\n--- a/src/test/java/org/apache/tika/TestParsers.java\n+++ b/src/test/java/org/apache/tika/TestParsers.java\n@@ -22,13 +22,14 @@ import java.util.Collection;\n import java.util.StringTokenizer;\n \n import junit.framework.TestCase;\n+\n import org.apache.tika.config.Content;\n import org.apache.tika.config.LiusConfig;\n-import org.apache.tika.exception.LiusException;\n import org.apache.tika.log.LiusLogger;\n import org.apache.tika.parser.Parser;\n import org.apache.tika.parser.ParserFactory;\n import org.apache.tika.utils.Utils;\n+import org.jdom.JDOMException;\n \n /**\n  * Junit test class   \n@@ -37,12 +38,13 @@ import org.apache.tika.utils.Utils;\n public class TestParsers extends TestCase {\n \n     private LiusConfig tc;\n+    private File testFilesBaseDir; \n \n-    private File classDir;\n-\n-    private String config;\n-\n-    public void setUp() {\n+    public void setUp() throws JDOMException, IOException {\n+        /* FIXME the old mechanism does not work anymore when running the tests\n+         * with Maven - need a resource-based one, but this means more\n+         * changes to classes which rely on filenames.\n+         *  \n         String sep = File.separator;\n         StringTokenizer st = new StringTokenizer(System.getProperty(\n                 ""java.class.path""), File.pathSeparator);\n@@ -53,13 +55,19 @@ public class TestParsers extends TestCase {\n \n         String log4j = classDir.getParent() + sep + ""Config"" + sep + ""log4j""\n                 + sep + ""log4j.properties"";\n+         */ \n \n-        tc = LiusConfig.getInstance(config);\n+        // FIXME for now, fix filenames according to Maven testing layout\n+        final String liusConfigFilename = ""target/classes/config.xml"";\n+        final String log4jPropertiesFilename = ""target/classes/log4j/log4j.properties"";\n+        testFilesBaseDir = new File(""src/test/resources/test-documents"");\n+        \n+        tc = LiusConfig.getInstance(liusConfigFilename);\n \n-        LiusLogger.setLoggerConfigFile(log4j);\n+        LiusLogger.setLoggerConfigFile(log4jPropertiesFilename);\n \n     }\n-\n+    \n     /*\n      * public void testConfig(){ TikaConfig tc =\n      * TikaConfig.getInstance(""C:\\\\tika\\\\config\\\\tikaConfig2.xml""); ParserConfig\n@@ -67,149 +75,41 @@ public class TestParsers extends TestCase {\n      * pc.getName()); }\n      */\n \n-    public void testPDFExtraction() {\n-        Parser parser = null;\n-        File testFile = new File(classDir.getParent() + File.separator\n-                + ""testFiles"" + File.separator + ""testPDF.PDF"");\n-        try {\n-            parser = ParserFactory.getParser(testFile, tc);\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        } catch (LiusException e) {\n-            e.printStackTrace();\n-        }\n-\n+    public void testPDFExtraction() throws Exception {\n+        ParserFactory.getParser(getTestFile(""testPDF.pdf""), tc);\n     }\n \n-    public void testTXTExtraction() {\n-        Parser parser = null;\n-        File testFile = new File(classDir.getParent() + File.separator\n-                + ""testFiles"" + File.separator + ""testTXT.txt"");\n-        try {\n-            parser = ParserFactory.getParser(testFile, tc);\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        } catch (LiusException e) {\n-            e.printStackTrace();\n-        }\n-\n+    public void testTXTExtraction() throws Exception {\n+        ParserFactory.getParser(getTestFile(""testTXT.txt""), tc);\n     }\n \n-    public void testRTFExtraction() {\n-        Parser parser = null;\n-        File testFile = new File(classDir.getParent() + File.separator\n-                + ""testFiles"" + File.separator + ""testRTF.rtf"");\n-        try {\n-            parser = ParserFactory.getParser(testFile, tc);\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        } catch (LiusException e) {\n-            e.printStackTrace();\n-        }\n-\n+    public void testRTFExtraction() throws Exception {\n+        ParserFactory.getParser(getTestFile(""testRTF.rtf""), tc);\n     }\n \n-    public void testXMLExtraction() {\n-        Parser parser = null;\n-        File testFile = new File(classDir.getParent() + File.separator\n-                + ""testFiles"" + File.separator + ""testXML.xml"");\n-        try {\n-            parser = ParserFactory.getParser(testFile, tc);\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        } catch (LiusException e) {\n-            e.printStackTrace();\n-        }\n-\n+    public void testXMLExtraction() throws Exception {\n+        ParserFactory.getParser(getTestFile(""testXML.xml""), tc);\n     }\n \n-    public void testPPTExtraction() {\n-        Parser parser = null;\n-        File testFile = new File(classDir.getParent() + File.separator\n-                + ""testFiles"" + File.separator + ""testPPT.ppt"");\n-        try {\n-            parser = ParserFactory.getParser(testFile, tc);\n-            System.out.println(parser.getStrContent());\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        } catch (LiusException e) {\n-            e.printStackTrace();\n-        }\n-\n+    public void testPPTExtraction() throws Exception {\n+        ParserFactory.getParser(getTestFile(""testPPT.ppt""), tc);\n     }\n \n-    public void testWORDxtraction() {\n-        Parser parser = null;\n-        File testFile = new File(classDir.getParent() + File.separator\n-                + ""testFiles"" + File.separator + ""testWORD.doc"");\n-        try {\n-            parser = ParserFactory.getParser(testFile, tc);\n-            System.out.println(parser.getStrContent());\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        } catch (LiusException e) {\n-            e.printStackTrace();\n-        }\n-\n+    public void testWORDxtraction() throws Exception {\n+        ParserFactory.getParser(getTestFile(""testWORD.doc""), tc);\n     }\n \n-    public void testEXCELExtraction() {\n-        Parser parser = null;\n-        File testFile = new File(classDir.getParent() + File.separator\n-                + ""testFiles"" + File.separator + ""testEXCEL.xls"");\n-        try {\n-            parser = ParserFactory.getParser(testFile, tc);\n-            // System.out.println(parser.getStrContent());\n-            printContentsInfo(parser);\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        } catch (LiusException e) {\n-            e.printStackTrace();\n-        }\n-\n+    public void testEXCELExtraction() throws Exception {\n+        ParserFactory.getParser(getTestFile(""testEXCEL.xls""), tc);\n     }\n \n-    public void testOOExtraction() {\n-        Parser parser = null;\n-        File testFile = new File(classDir.getParent() + File.separator\n-                + ""testFiles"" + File.separator + ""testOO2.odt"");\n-        try {\n-            parser = ParserFactory.getParser(testFile, tc);\n-            // System.out.println(parser.getStrContent());\n-            printContentsInfo(parser);\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        } catch (LiusException e) {\n-            e.printStackTrace();\n-        }\n-        \n+    public void testOOExtraction() throws Exception {\n+        ParserFactory.getParser(getTestFile(""testOpenOffice2.odt""), tc);\n     }\n \n-    public void testHTMLExtraction() {\n-        Parser parser = null;\n-        File testFile = new File(classDir.getParent() + File.separator\n-                + ""testFiles"" + File.separator + ""testHTML.html"");\n-        try {\n-            parser = ParserFactory.getParser(testFile, tc);\n-            assertEquals(""Title : Test Indexation Html"", (parser.getContent(""title"")).getValue());\n-            // System.out.println(parser.getStrContent());\n-            printContentsInfo(parser);\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        } catch (LiusException e) {\n-            e.printStackTrace();\n-        }\n-\n-    }\n \n-    private void printContentsInfo(Parser parser) {\n-        String mimeType = parser.getMimeType();\n-        System.out.println(""Mime : "" + mimeType);\n-        String strContent = parser.getStrContent();\n-        Collection<Content> structuredContent = parser.getContents();\n-        Utils.print(structuredContent);\n-        System.out.println(""=============="");\n-        // Content title = parser.getContent(""title"");\n+    private File getTestFile(String filename) {\n+      return new File(testFilesBaseDir,filename); \n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/utils/MimeTypesUtilsTest.java b/src/test/java/org/apache/tika/utils/MimeTypesUtilsTest.java\nindex 81a7d3db3..15adcbe4b 100644\n--- a/src/test/java/org/apache/tika/utils/MimeTypesUtilsTest.java\n+++ b/src/test/java/org/apache/tika/utils/MimeTypesUtilsTest.java\n@@ -25,13 +25,22 @@ import junit.framework.TestCase;\n public class MimeTypesUtilsTest extends TestCase {\n \n     public void test() throws MalformedURLException {\n-        String s =                          ""x.pdf"";\n         URL u = new URL(""http://mydomain.com/x.pdf?x=y"");\n-        File f = new File(           ""/a/b/c/x.pdf"");\n+        File f = new File(""/a/b/c/x.pdf"");\n \n-        assertEquals(""application/pdf"", MimeTypesUtils.getMimeType(s));\n-        assertEquals(""application/pdf"", MimeTypesUtils.getMimeType(u));\n-        assertEquals(""application/pdf"", MimeTypesUtils.getMimeType(f));\n+        assertEquals(""application/pdf"",MimeTypesUtils.getMimeType(""x.pdf""));\n+        assertEquals(""application/pdf"",MimeTypesUtils.getMimeType(u));\n+        assertEquals(""application/pdf"",MimeTypesUtils.getMimeType(f));\n+        assertEquals(""text/plain"",MimeTypesUtils.getMimeType(""x.txt""));\n+        assertEquals(""text/html"",MimeTypesUtils.getMimeType(""x.htm""));\n+        assertEquals(""text/html"",MimeTypesUtils.getMimeType(""x.html""));\n+        assertEquals(""application/xhtml+xml"",MimeTypesUtils.getMimeType(""x.xhtml""));\n+        assertEquals(""application/xml"",MimeTypesUtils.getMimeType(""x.xml""));\n+        assertEquals(""application/msword"",MimeTypesUtils.getMimeType(""x.doc""));\n+        assertEquals(""application/vnd.ms-powerpoint"",MimeTypesUtils.getMimeType(""x.ppt""));\n+        assertEquals(""application/vnd.ms-excel"",MimeTypesUtils.getMimeType(""x.xls""));\n+        assertEquals(""application/zip"",MimeTypesUtils.getMimeType(""x.zip""));\n+        assertEquals(""application/vnd.oasis.opendocument.text"",MimeTypesUtils.getMimeType(""x.odt""));\n+        assertEquals(""application/octet-stream"",MimeTypesUtils.getMimeType(""x.xyz""));\n     }\n-\n }'"
True,Regression,TIKA-19,tika,d7dabee5ce14240f3c5ba2f6147c963d03604dd3,74f807d5645dc46e45ec62f79ab6d1b51457d3bf,org.apache.tika.utils.MimeTypesUtilsTest#test,False,[],org.apache.tika.parser.ParserFactory@org.apache.tika.utils.Utils@org.apache.tika.config.LiusConfig,,,org.apache.tika.config.LiusConfig.parse(String)@org.apache.tika.utils.MimeTypesUtils.getMimeType(String),"u'diff --git a/src/test/java/org/apache/tika/TestParsers.java b/src/test/java/org/apache/tika/TestParsers.java\nindex 38aaad3cc..df525dd64 100644\n--- a/src/test/java/org/apache/tika/TestParsers.java\n+++ b/src/test/java/org/apache/tika/TestParsers.java\n@@ -22,13 +22,14 @@ import java.util.Collection;\n import java.util.StringTokenizer;\n \n import junit.framework.TestCase;\n+\n import org.apache.tika.config.Content;\n import org.apache.tika.config.LiusConfig;\n-import org.apache.tika.exception.LiusException;\n import org.apache.tika.log.LiusLogger;\n import org.apache.tika.parser.Parser;\n import org.apache.tika.parser.ParserFactory;\n import org.apache.tika.utils.Utils;\n+import org.jdom.JDOMException;\n \n /**\n  * Junit test class   \n@@ -37,12 +38,13 @@ import org.apache.tika.utils.Utils;\n public class TestParsers extends TestCase {\n \n     private LiusConfig tc;\n+    private File testFilesBaseDir; \n \n-    private File classDir;\n-\n-    private String config;\n-\n-    public void setUp() {\n+    public void setUp() throws JDOMException, IOException {\n+        /* FIXME the old mechanism does not work anymore when running the tests\n+         * with Maven - need a resource-based one, but this means more\n+         * changes to classes which rely on filenames.\n+         *  \n         String sep = File.separator;\n         StringTokenizer st = new StringTokenizer(System.getProperty(\n                 ""java.class.path""), File.pathSeparator);\n@@ -53,13 +55,19 @@ public class TestParsers extends TestCase {\n \n         String log4j = classDir.getParent() + sep + ""Config"" + sep + ""log4j""\n                 + sep + ""log4j.properties"";\n+         */ \n \n-        tc = LiusConfig.getInstance(config);\n+        // FIXME for now, fix filenames according to Maven testing layout\n+        final String liusConfigFilename = ""target/classes/config.xml"";\n+        final String log4jPropertiesFilename = ""target/classes/log4j/log4j.properties"";\n+        testFilesBaseDir = new File(""src/test/resources/test-documents"");\n+        \n+        tc = LiusConfig.getInstance(liusConfigFilename);\n \n-        LiusLogger.setLoggerConfigFile(log4j);\n+        LiusLogger.setLoggerConfigFile(log4jPropertiesFilename);\n \n     }\n-\n+    \n     /*\n      * public void testConfig(){ TikaConfig tc =\n      * TikaConfig.getInstance(""C:\\\\tika\\\\config\\\\tikaConfig2.xml""); ParserConfig\n@@ -67,149 +75,41 @@ public class TestParsers extends TestCase {\n      * pc.getName()); }\n      */\n \n-    public void testPDFExtraction() {\n-        Parser parser = null;\n-        File testFile = new File(classDir.getParent() + File.separator\n-                + ""testFiles"" + File.separator + ""testPDF.PDF"");\n-        try {\n-            parser = ParserFactory.getParser(testFile, tc);\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        } catch (LiusException e) {\n-            e.printStackTrace();\n-        }\n-\n+    public void testPDFExtraction() throws Exception {\n+        ParserFactory.getParser(getTestFile(""testPDF.pdf""), tc);\n     }\n \n-    public void testTXTExtraction() {\n-        Parser parser = null;\n-        File testFile = new File(classDir.getParent() + File.separator\n-                + ""testFiles"" + File.separator + ""testTXT.txt"");\n-        try {\n-            parser = ParserFactory.getParser(testFile, tc);\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        } catch (LiusException e) {\n-            e.printStackTrace();\n-        }\n-\n+    public void testTXTExtraction() throws Exception {\n+        ParserFactory.getParser(getTestFile(""testTXT.txt""), tc);\n     }\n \n-    public void testRTFExtraction() {\n-        Parser parser = null;\n-        File testFile = new File(classDir.getParent() + File.separator\n-                + ""testFiles"" + File.separator + ""testRTF.rtf"");\n-        try {\n-            parser = ParserFactory.getParser(testFile, tc);\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        } catch (LiusException e) {\n-            e.printStackTrace();\n-        }\n-\n+    public void testRTFExtraction() throws Exception {\n+        ParserFactory.getParser(getTestFile(""testRTF.rtf""), tc);\n     }\n \n-    public void testXMLExtraction() {\n-        Parser parser = null;\n-        File testFile = new File(classDir.getParent() + File.separator\n-                + ""testFiles"" + File.separator + ""testXML.xml"");\n-        try {\n-            parser = ParserFactory.getParser(testFile, tc);\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        } catch (LiusException e) {\n-            e.printStackTrace();\n-        }\n-\n+    public void testXMLExtraction() throws Exception {\n+        ParserFactory.getParser(getTestFile(""testXML.xml""), tc);\n     }\n \n-    public void testPPTExtraction() {\n-        Parser parser = null;\n-        File testFile = new File(classDir.getParent() + File.separator\n-                + ""testFiles"" + File.separator + ""testPPT.ppt"");\n-        try {\n-            parser = ParserFactory.getParser(testFile, tc);\n-            System.out.println(parser.getStrContent());\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        } catch (LiusException e) {\n-            e.printStackTrace();\n-        }\n-\n+    public void testPPTExtraction() throws Exception {\n+        ParserFactory.getParser(getTestFile(""testPPT.ppt""), tc);\n     }\n \n-    public void testWORDxtraction() {\n-        Parser parser = null;\n-        File testFile = new File(classDir.getParent() + File.separator\n-                + ""testFiles"" + File.separator + ""testWORD.doc"");\n-        try {\n-            parser = ParserFactory.getParser(testFile, tc);\n-            System.out.println(parser.getStrContent());\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        } catch (LiusException e) {\n-            e.printStackTrace();\n-        }\n-\n+    public void testWORDxtraction() throws Exception {\n+        ParserFactory.getParser(getTestFile(""testWORD.doc""), tc);\n     }\n \n-    public void testEXCELExtraction() {\n-        Parser parser = null;\n-        File testFile = new File(classDir.getParent() + File.separator\n-                + ""testFiles"" + File.separator + ""testEXCEL.xls"");\n-        try {\n-            parser = ParserFactory.getParser(testFile, tc);\n-            // System.out.println(parser.getStrContent());\n-            printContentsInfo(parser);\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        } catch (LiusException e) {\n-            e.printStackTrace();\n-        }\n-\n+    public void testEXCELExtraction() throws Exception {\n+        ParserFactory.getParser(getTestFile(""testEXCEL.xls""), tc);\n     }\n \n-    public void testOOExtraction() {\n-        Parser parser = null;\n-        File testFile = new File(classDir.getParent() + File.separator\n-                + ""testFiles"" + File.separator + ""testOO2.odt"");\n-        try {\n-            parser = ParserFactory.getParser(testFile, tc);\n-            // System.out.println(parser.getStrContent());\n-            printContentsInfo(parser);\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        } catch (LiusException e) {\n-            e.printStackTrace();\n-        }\n-        \n+    public void testOOExtraction() throws Exception {\n+        ParserFactory.getParser(getTestFile(""testOpenOffice2.odt""), tc);\n     }\n \n-    public void testHTMLExtraction() {\n-        Parser parser = null;\n-        File testFile = new File(classDir.getParent() + File.separator\n-                + ""testFiles"" + File.separator + ""testHTML.html"");\n-        try {\n-            parser = ParserFactory.getParser(testFile, tc);\n-            assertEquals(""Title : Test Indexation Html"", (parser.getContent(""title"")).getValue());\n-            // System.out.println(parser.getStrContent());\n-            printContentsInfo(parser);\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        } catch (LiusException e) {\n-            e.printStackTrace();\n-        }\n-\n-    }\n \n-    private void printContentsInfo(Parser parser) {\n-        String mimeType = parser.getMimeType();\n-        System.out.println(""Mime : "" + mimeType);\n-        String strContent = parser.getStrContent();\n-        Collection<Content> structuredContent = parser.getContents();\n-        Utils.print(structuredContent);\n-        System.out.println(""=============="");\n-        // Content title = parser.getContent(""title"");\n+    private File getTestFile(String filename) {\n+      return new File(testFilesBaseDir,filename); \n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/utils/MimeTypesUtilsTest.java b/src/test/java/org/apache/tika/utils/MimeTypesUtilsTest.java\nindex 81a7d3db3..15adcbe4b 100644\n--- a/src/test/java/org/apache/tika/utils/MimeTypesUtilsTest.java\n+++ b/src/test/java/org/apache/tika/utils/MimeTypesUtilsTest.java\n@@ -25,13 +25,22 @@ import junit.framework.TestCase;\n public class MimeTypesUtilsTest extends TestCase {\n \n     public void test() throws MalformedURLException {\n-        String s =                          ""x.pdf"";\n         URL u = new URL(""http://mydomain.com/x.pdf?x=y"");\n-        File f = new File(           ""/a/b/c/x.pdf"");\n+        File f = new File(""/a/b/c/x.pdf"");\n \n-        assertEquals(""application/pdf"", MimeTypesUtils.getMimeType(s));\n-        assertEquals(""application/pdf"", MimeTypesUtils.getMimeType(u));\n-        assertEquals(""application/pdf"", MimeTypesUtils.getMimeType(f));\n+        assertEquals(""application/pdf"",MimeTypesUtils.getMimeType(""x.pdf""));\n+        assertEquals(""application/pdf"",MimeTypesUtils.getMimeType(u));\n+        assertEquals(""application/pdf"",MimeTypesUtils.getMimeType(f));\n+        assertEquals(""text/plain"",MimeTypesUtils.getMimeType(""x.txt""));\n+        assertEquals(""text/html"",MimeTypesUtils.getMimeType(""x.htm""));\n+        assertEquals(""text/html"",MimeTypesUtils.getMimeType(""x.html""));\n+        assertEquals(""application/xhtml+xml"",MimeTypesUtils.getMimeType(""x.xhtml""));\n+        assertEquals(""application/xml"",MimeTypesUtils.getMimeType(""x.xml""));\n+        assertEquals(""application/msword"",MimeTypesUtils.getMimeType(""x.doc""));\n+        assertEquals(""application/vnd.ms-powerpoint"",MimeTypesUtils.getMimeType(""x.ppt""));\n+        assertEquals(""application/vnd.ms-excel"",MimeTypesUtils.getMimeType(""x.xls""));\n+        assertEquals(""application/zip"",MimeTypesUtils.getMimeType(""x.zip""));\n+        assertEquals(""application/vnd.oasis.opendocument.text"",MimeTypesUtils.getMimeType(""x.odt""));\n+        assertEquals(""application/octet-stream"",MimeTypesUtils.getMimeType(""x.xyz""));\n     }\n-\n }'"
True,Delta,TIKA-107,tika,fa6bb7e3c92145d29cd97820718ece69fd6ffd62,0dd035b9be57a71ba23a29120f1e2153a3178b5b,org.apache.tika.mime.MimeTypeTest#testConstrctor,False,[],org.apache.tika.mime.MimeType@org.apache.tika.mime.MimeTypes@org.apache.tika.mime.Patterns,,,org.apache.tika.mime.MimeType.isDescendantOf(MimeType)@org.apache.tika.mime.MimeTypes.readMagicHeader(InputStream)@org.apache.tika.mime.MimeType.setSuperType(MimeType)@org.apache.tika.mime.MimeType.setDescription(String)@org.apache.tika.mime.MimeType.isValid(String)@org.apache.tika.mime.MimeType.compareTo(MimeType),"u'diff --git a/src/test/java/org/apache/tika/mime/MimeTypeTest.java b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\nindex 7eab68fe5..f94f7a4a5 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n@@ -20,6 +20,50 @@ import junit.framework.TestCase;\n \n public class MimeTypeTest extends TestCase {\n \n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test MimeType constructor */\n+    public void testConstrctor() {\n+\n+        // Missing registry\n+        try {\n+            new MimeType(null, ""text/plain"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Missing name\n+        try {\n+            new MimeType(types, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (no slash)\n+        try {\n+            new MimeType(types, ""application"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (not lower case)\n+        try {\n+            new MimeType(types, ""TEXT/PLAIN"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n     public void testIsValidName() {\n         assertTrue(MimeType.isValid(""application/octet-stream""));\n         assertTrue(MimeType.isValid(""text/plain""));\n@@ -35,6 +79,32 @@ public class MimeTypeTest extends TestCase {\n         assertFalse(MimeType.isValid(""application/\\u00f6ctet-stream""));\n         assertFalse(MimeType.isValid(""text/plain;""));\n         assertFalse(MimeType.isValid(""text/plain; charset=UTF-8""));\n+        try {\n+            MimeType.isValid(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setDescription() */\n+    public void testSetDescription() {\n+        try {\n+            text.setDescription(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setSuperType() */\n+    public void testSetSuperType() throws MimeTypeException {\n+        try {\n+            text.setSuperType(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/MimeTypesTest.java b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\nindex ef95d40cc..1270a1bf6 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n@@ -16,6 +16,8 @@\n  */\n package org.apache.tika.mime;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n import junit.framework.TestCase;\n \n public class MimeTypesTest extends TestCase {\n@@ -90,6 +92,13 @@ public class MimeTypesTest extends TestCase {\n \n         assertTrue(html.isDescendantOf(text));\n         assertFalse(text.isDescendantOf(html));\n+\n+        try {\n+            binary.isDescendantOf(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n     public void testCompareTo() {\n@@ -104,6 +113,33 @@ public class MimeTypesTest extends TestCase {\n         assertTrue(html.compareTo(binary) > 0);\n         assertTrue(html.compareTo(text) > 0);\n         assertTrue(html.compareTo(html) == 0);\n+\n+        try {\n+            binary.compareTo(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(byte[]) */\n+    public void testGetMimeType_byteArray() {\n+        try {\n+            types.getMimeType((byte[])null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(InputStream) */\n+    public void testGetMimeType_InputStream() throws IOException {\n+        try {\n+            types.getMimeType((InputStream)null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/PatternsTest.java b/src/test/java/org/apache/tika/mime/PatternsTest.java\nnew file mode 100644\nindex 000000000..1255632ca\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/mime/PatternsTest.java\n@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.mime;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test case for {@link Patterns}.\n+ *\n+ * @version $Id$\n+ */\n+public class PatternsTest extends TestCase {\n+\n+    private Patterns patterns;\n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        patterns = new Patterns();\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test add() */\n+    public void testAdd() throws MimeTypeException {\n+        try {\n+            patterns.add(null, text);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add("""", null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add(null, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test matches() */\n+    public void testMatches() {\n+        try {\n+            patterns.matches(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+}'"
True,Regression,TIKA-107,tika,fa6bb7e3c92145d29cd97820718ece69fd6ffd62,0dd035b9be57a71ba23a29120f1e2153a3178b5b,org.apache.tika.mime.MimeTypeTest#testIsValidName,False,[],org.apache.tika.mime.MimeType@org.apache.tika.mime.MimeTypes@org.apache.tika.mime.Patterns,,,org.apache.tika.mime.MimeType.isDescendantOf(MimeType)@org.apache.tika.mime.MimeTypes.readMagicHeader(InputStream)@org.apache.tika.mime.MimeType.setSuperType(MimeType)@org.apache.tika.mime.MimeType.setDescription(String)@org.apache.tika.mime.MimeType.isValid(String)@org.apache.tika.mime.MimeType.compareTo(MimeType),"u'diff --git a/src/test/java/org/apache/tika/mime/MimeTypeTest.java b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\nindex 7eab68fe5..f94f7a4a5 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n@@ -20,6 +20,50 @@ import junit.framework.TestCase;\n \n public class MimeTypeTest extends TestCase {\n \n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test MimeType constructor */\n+    public void testConstrctor() {\n+\n+        // Missing registry\n+        try {\n+            new MimeType(null, ""text/plain"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Missing name\n+        try {\n+            new MimeType(types, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (no slash)\n+        try {\n+            new MimeType(types, ""application"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (not lower case)\n+        try {\n+            new MimeType(types, ""TEXT/PLAIN"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n     public void testIsValidName() {\n         assertTrue(MimeType.isValid(""application/octet-stream""));\n         assertTrue(MimeType.isValid(""text/plain""));\n@@ -35,6 +79,32 @@ public class MimeTypeTest extends TestCase {\n         assertFalse(MimeType.isValid(""application/\\u00f6ctet-stream""));\n         assertFalse(MimeType.isValid(""text/plain;""));\n         assertFalse(MimeType.isValid(""text/plain; charset=UTF-8""));\n+        try {\n+            MimeType.isValid(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setDescription() */\n+    public void testSetDescription() {\n+        try {\n+            text.setDescription(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setSuperType() */\n+    public void testSetSuperType() throws MimeTypeException {\n+        try {\n+            text.setSuperType(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/MimeTypesTest.java b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\nindex ef95d40cc..1270a1bf6 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n@@ -16,6 +16,8 @@\n  */\n package org.apache.tika.mime;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n import junit.framework.TestCase;\n \n public class MimeTypesTest extends TestCase {\n@@ -90,6 +92,13 @@ public class MimeTypesTest extends TestCase {\n \n         assertTrue(html.isDescendantOf(text));\n         assertFalse(text.isDescendantOf(html));\n+\n+        try {\n+            binary.isDescendantOf(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n     public void testCompareTo() {\n@@ -104,6 +113,33 @@ public class MimeTypesTest extends TestCase {\n         assertTrue(html.compareTo(binary) > 0);\n         assertTrue(html.compareTo(text) > 0);\n         assertTrue(html.compareTo(html) == 0);\n+\n+        try {\n+            binary.compareTo(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(byte[]) */\n+    public void testGetMimeType_byteArray() {\n+        try {\n+            types.getMimeType((byte[])null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(InputStream) */\n+    public void testGetMimeType_InputStream() throws IOException {\n+        try {\n+            types.getMimeType((InputStream)null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/PatternsTest.java b/src/test/java/org/apache/tika/mime/PatternsTest.java\nnew file mode 100644\nindex 000000000..1255632ca\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/mime/PatternsTest.java\n@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.mime;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test case for {@link Patterns}.\n+ *\n+ * @version $Id$\n+ */\n+public class PatternsTest extends TestCase {\n+\n+    private Patterns patterns;\n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        patterns = new Patterns();\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test add() */\n+    public void testAdd() throws MimeTypeException {\n+        try {\n+            patterns.add(null, text);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add("""", null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add(null, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test matches() */\n+    public void testMatches() {\n+        try {\n+            patterns.matches(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+}'"
True,Delta,TIKA-107,tika,fa6bb7e3c92145d29cd97820718ece69fd6ffd62,0dd035b9be57a71ba23a29120f1e2153a3178b5b,org.apache.tika.mime.MimeTypeTest#testSetDescription,False,[],org.apache.tika.mime.MimeType@org.apache.tika.mime.MimeTypes@org.apache.tika.mime.Patterns,,,org.apache.tika.mime.MimeType.isDescendantOf(MimeType)@org.apache.tika.mime.MimeTypes.readMagicHeader(InputStream)@org.apache.tika.mime.MimeType.setSuperType(MimeType)@org.apache.tika.mime.MimeType.setDescription(String)@org.apache.tika.mime.MimeType.isValid(String)@org.apache.tika.mime.MimeType.compareTo(MimeType),"u'diff --git a/src/test/java/org/apache/tika/mime/MimeTypeTest.java b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\nindex 7eab68fe5..f94f7a4a5 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n@@ -20,6 +20,50 @@ import junit.framework.TestCase;\n \n public class MimeTypeTest extends TestCase {\n \n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test MimeType constructor */\n+    public void testConstrctor() {\n+\n+        // Missing registry\n+        try {\n+            new MimeType(null, ""text/plain"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Missing name\n+        try {\n+            new MimeType(types, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (no slash)\n+        try {\n+            new MimeType(types, ""application"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (not lower case)\n+        try {\n+            new MimeType(types, ""TEXT/PLAIN"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n     public void testIsValidName() {\n         assertTrue(MimeType.isValid(""application/octet-stream""));\n         assertTrue(MimeType.isValid(""text/plain""));\n@@ -35,6 +79,32 @@ public class MimeTypeTest extends TestCase {\n         assertFalse(MimeType.isValid(""application/\\u00f6ctet-stream""));\n         assertFalse(MimeType.isValid(""text/plain;""));\n         assertFalse(MimeType.isValid(""text/plain; charset=UTF-8""));\n+        try {\n+            MimeType.isValid(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setDescription() */\n+    public void testSetDescription() {\n+        try {\n+            text.setDescription(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setSuperType() */\n+    public void testSetSuperType() throws MimeTypeException {\n+        try {\n+            text.setSuperType(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/MimeTypesTest.java b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\nindex ef95d40cc..1270a1bf6 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n@@ -16,6 +16,8 @@\n  */\n package org.apache.tika.mime;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n import junit.framework.TestCase;\n \n public class MimeTypesTest extends TestCase {\n@@ -90,6 +92,13 @@ public class MimeTypesTest extends TestCase {\n \n         assertTrue(html.isDescendantOf(text));\n         assertFalse(text.isDescendantOf(html));\n+\n+        try {\n+            binary.isDescendantOf(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n     public void testCompareTo() {\n@@ -104,6 +113,33 @@ public class MimeTypesTest extends TestCase {\n         assertTrue(html.compareTo(binary) > 0);\n         assertTrue(html.compareTo(text) > 0);\n         assertTrue(html.compareTo(html) == 0);\n+\n+        try {\n+            binary.compareTo(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(byte[]) */\n+    public void testGetMimeType_byteArray() {\n+        try {\n+            types.getMimeType((byte[])null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(InputStream) */\n+    public void testGetMimeType_InputStream() throws IOException {\n+        try {\n+            types.getMimeType((InputStream)null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/PatternsTest.java b/src/test/java/org/apache/tika/mime/PatternsTest.java\nnew file mode 100644\nindex 000000000..1255632ca\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/mime/PatternsTest.java\n@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.mime;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test case for {@link Patterns}.\n+ *\n+ * @version $Id$\n+ */\n+public class PatternsTest extends TestCase {\n+\n+    private Patterns patterns;\n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        patterns = new Patterns();\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test add() */\n+    public void testAdd() throws MimeTypeException {\n+        try {\n+            patterns.add(null, text);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add("""", null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add(null, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test matches() */\n+    public void testMatches() {\n+        try {\n+            patterns.matches(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+}'"
True,Delta,TIKA-107,tika,fa6bb7e3c92145d29cd97820718ece69fd6ffd62,0dd035b9be57a71ba23a29120f1e2153a3178b5b,org.apache.tika.mime.MimeTypeTest#testSetSuperType,False,[],org.apache.tika.mime.MimeType@org.apache.tika.mime.MimeTypes@org.apache.tika.mime.Patterns,,,org.apache.tika.mime.MimeType.isDescendantOf(MimeType)@org.apache.tika.mime.MimeTypes.readMagicHeader(InputStream)@org.apache.tika.mime.MimeType.setSuperType(MimeType)@org.apache.tika.mime.MimeType.setDescription(String)@org.apache.tika.mime.MimeType.isValid(String)@org.apache.tika.mime.MimeType.compareTo(MimeType),"u'diff --git a/src/test/java/org/apache/tika/mime/MimeTypeTest.java b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\nindex 7eab68fe5..f94f7a4a5 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n@@ -20,6 +20,50 @@ import junit.framework.TestCase;\n \n public class MimeTypeTest extends TestCase {\n \n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test MimeType constructor */\n+    public void testConstrctor() {\n+\n+        // Missing registry\n+        try {\n+            new MimeType(null, ""text/plain"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Missing name\n+        try {\n+            new MimeType(types, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (no slash)\n+        try {\n+            new MimeType(types, ""application"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (not lower case)\n+        try {\n+            new MimeType(types, ""TEXT/PLAIN"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n     public void testIsValidName() {\n         assertTrue(MimeType.isValid(""application/octet-stream""));\n         assertTrue(MimeType.isValid(""text/plain""));\n@@ -35,6 +79,32 @@ public class MimeTypeTest extends TestCase {\n         assertFalse(MimeType.isValid(""application/\\u00f6ctet-stream""));\n         assertFalse(MimeType.isValid(""text/plain;""));\n         assertFalse(MimeType.isValid(""text/plain; charset=UTF-8""));\n+        try {\n+            MimeType.isValid(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setDescription() */\n+    public void testSetDescription() {\n+        try {\n+            text.setDescription(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setSuperType() */\n+    public void testSetSuperType() throws MimeTypeException {\n+        try {\n+            text.setSuperType(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/MimeTypesTest.java b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\nindex ef95d40cc..1270a1bf6 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n@@ -16,6 +16,8 @@\n  */\n package org.apache.tika.mime;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n import junit.framework.TestCase;\n \n public class MimeTypesTest extends TestCase {\n@@ -90,6 +92,13 @@ public class MimeTypesTest extends TestCase {\n \n         assertTrue(html.isDescendantOf(text));\n         assertFalse(text.isDescendantOf(html));\n+\n+        try {\n+            binary.isDescendantOf(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n     public void testCompareTo() {\n@@ -104,6 +113,33 @@ public class MimeTypesTest extends TestCase {\n         assertTrue(html.compareTo(binary) > 0);\n         assertTrue(html.compareTo(text) > 0);\n         assertTrue(html.compareTo(html) == 0);\n+\n+        try {\n+            binary.compareTo(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(byte[]) */\n+    public void testGetMimeType_byteArray() {\n+        try {\n+            types.getMimeType((byte[])null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(InputStream) */\n+    public void testGetMimeType_InputStream() throws IOException {\n+        try {\n+            types.getMimeType((InputStream)null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/PatternsTest.java b/src/test/java/org/apache/tika/mime/PatternsTest.java\nnew file mode 100644\nindex 000000000..1255632ca\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/mime/PatternsTest.java\n@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.mime;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test case for {@link Patterns}.\n+ *\n+ * @version $Id$\n+ */\n+public class PatternsTest extends TestCase {\n+\n+    private Patterns patterns;\n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        patterns = new Patterns();\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test add() */\n+    public void testAdd() throws MimeTypeException {\n+        try {\n+            patterns.add(null, text);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add("""", null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add(null, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test matches() */\n+    public void testMatches() {\n+        try {\n+            patterns.matches(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+}'"
True,Regression,TIKA-107,tika,fa6bb7e3c92145d29cd97820718ece69fd6ffd62,0dd035b9be57a71ba23a29120f1e2153a3178b5b,org.apache.tika.mime.MimeTypesTest#testIsDescendantOf,False,[],org.apache.tika.mime.MimeType@org.apache.tika.mime.MimeTypes@org.apache.tika.mime.Patterns,,,org.apache.tika.mime.MimeType.isDescendantOf(MimeType)@org.apache.tika.mime.MimeTypes.readMagicHeader(InputStream)@org.apache.tika.mime.MimeType.setSuperType(MimeType)@org.apache.tika.mime.MimeType.setDescription(String)@org.apache.tika.mime.MimeType.isValid(String)@org.apache.tika.mime.MimeType.compareTo(MimeType),"u'diff --git a/src/test/java/org/apache/tika/mime/MimeTypeTest.java b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\nindex 7eab68fe5..f94f7a4a5 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n@@ -20,6 +20,50 @@ import junit.framework.TestCase;\n \n public class MimeTypeTest extends TestCase {\n \n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test MimeType constructor */\n+    public void testConstrctor() {\n+\n+        // Missing registry\n+        try {\n+            new MimeType(null, ""text/plain"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Missing name\n+        try {\n+            new MimeType(types, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (no slash)\n+        try {\n+            new MimeType(types, ""application"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (not lower case)\n+        try {\n+            new MimeType(types, ""TEXT/PLAIN"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n     public void testIsValidName() {\n         assertTrue(MimeType.isValid(""application/octet-stream""));\n         assertTrue(MimeType.isValid(""text/plain""));\n@@ -35,6 +79,32 @@ public class MimeTypeTest extends TestCase {\n         assertFalse(MimeType.isValid(""application/\\u00f6ctet-stream""));\n         assertFalse(MimeType.isValid(""text/plain;""));\n         assertFalse(MimeType.isValid(""text/plain; charset=UTF-8""));\n+        try {\n+            MimeType.isValid(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setDescription() */\n+    public void testSetDescription() {\n+        try {\n+            text.setDescription(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setSuperType() */\n+    public void testSetSuperType() throws MimeTypeException {\n+        try {\n+            text.setSuperType(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/MimeTypesTest.java b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\nindex ef95d40cc..1270a1bf6 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n@@ -16,6 +16,8 @@\n  */\n package org.apache.tika.mime;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n import junit.framework.TestCase;\n \n public class MimeTypesTest extends TestCase {\n@@ -90,6 +92,13 @@ public class MimeTypesTest extends TestCase {\n \n         assertTrue(html.isDescendantOf(text));\n         assertFalse(text.isDescendantOf(html));\n+\n+        try {\n+            binary.isDescendantOf(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n     public void testCompareTo() {\n@@ -104,6 +113,33 @@ public class MimeTypesTest extends TestCase {\n         assertTrue(html.compareTo(binary) > 0);\n         assertTrue(html.compareTo(text) > 0);\n         assertTrue(html.compareTo(html) == 0);\n+\n+        try {\n+            binary.compareTo(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(byte[]) */\n+    public void testGetMimeType_byteArray() {\n+        try {\n+            types.getMimeType((byte[])null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(InputStream) */\n+    public void testGetMimeType_InputStream() throws IOException {\n+        try {\n+            types.getMimeType((InputStream)null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/PatternsTest.java b/src/test/java/org/apache/tika/mime/PatternsTest.java\nnew file mode 100644\nindex 000000000..1255632ca\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/mime/PatternsTest.java\n@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.mime;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test case for {@link Patterns}.\n+ *\n+ * @version $Id$\n+ */\n+public class PatternsTest extends TestCase {\n+\n+    private Patterns patterns;\n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        patterns = new Patterns();\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test add() */\n+    public void testAdd() throws MimeTypeException {\n+        try {\n+            patterns.add(null, text);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add("""", null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add(null, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test matches() */\n+    public void testMatches() {\n+        try {\n+            patterns.matches(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+}'"
True,Regression,TIKA-107,tika,fa6bb7e3c92145d29cd97820718ece69fd6ffd62,0dd035b9be57a71ba23a29120f1e2153a3178b5b,org.apache.tika.mime.MimeTypesTest#testCompareTo,False,[],org.apache.tika.mime.MimeType@org.apache.tika.mime.MimeTypes@org.apache.tika.mime.Patterns,,,org.apache.tika.mime.MimeType.isDescendantOf(MimeType)@org.apache.tika.mime.MimeTypes.readMagicHeader(InputStream)@org.apache.tika.mime.MimeType.setSuperType(MimeType)@org.apache.tika.mime.MimeType.setDescription(String)@org.apache.tika.mime.MimeType.isValid(String)@org.apache.tika.mime.MimeType.compareTo(MimeType),"u'diff --git a/src/test/java/org/apache/tika/mime/MimeTypeTest.java b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\nindex 7eab68fe5..f94f7a4a5 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n@@ -20,6 +20,50 @@ import junit.framework.TestCase;\n \n public class MimeTypeTest extends TestCase {\n \n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test MimeType constructor */\n+    public void testConstrctor() {\n+\n+        // Missing registry\n+        try {\n+            new MimeType(null, ""text/plain"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Missing name\n+        try {\n+            new MimeType(types, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (no slash)\n+        try {\n+            new MimeType(types, ""application"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (not lower case)\n+        try {\n+            new MimeType(types, ""TEXT/PLAIN"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n     public void testIsValidName() {\n         assertTrue(MimeType.isValid(""application/octet-stream""));\n         assertTrue(MimeType.isValid(""text/plain""));\n@@ -35,6 +79,32 @@ public class MimeTypeTest extends TestCase {\n         assertFalse(MimeType.isValid(""application/\\u00f6ctet-stream""));\n         assertFalse(MimeType.isValid(""text/plain;""));\n         assertFalse(MimeType.isValid(""text/plain; charset=UTF-8""));\n+        try {\n+            MimeType.isValid(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setDescription() */\n+    public void testSetDescription() {\n+        try {\n+            text.setDescription(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setSuperType() */\n+    public void testSetSuperType() throws MimeTypeException {\n+        try {\n+            text.setSuperType(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/MimeTypesTest.java b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\nindex ef95d40cc..1270a1bf6 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n@@ -16,6 +16,8 @@\n  */\n package org.apache.tika.mime;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n import junit.framework.TestCase;\n \n public class MimeTypesTest extends TestCase {\n@@ -90,6 +92,13 @@ public class MimeTypesTest extends TestCase {\n \n         assertTrue(html.isDescendantOf(text));\n         assertFalse(text.isDescendantOf(html));\n+\n+        try {\n+            binary.isDescendantOf(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n     public void testCompareTo() {\n@@ -104,6 +113,33 @@ public class MimeTypesTest extends TestCase {\n         assertTrue(html.compareTo(binary) > 0);\n         assertTrue(html.compareTo(text) > 0);\n         assertTrue(html.compareTo(html) == 0);\n+\n+        try {\n+            binary.compareTo(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(byte[]) */\n+    public void testGetMimeType_byteArray() {\n+        try {\n+            types.getMimeType((byte[])null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(InputStream) */\n+    public void testGetMimeType_InputStream() throws IOException {\n+        try {\n+            types.getMimeType((InputStream)null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/PatternsTest.java b/src/test/java/org/apache/tika/mime/PatternsTest.java\nnew file mode 100644\nindex 000000000..1255632ca\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/mime/PatternsTest.java\n@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.mime;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test case for {@link Patterns}.\n+ *\n+ * @version $Id$\n+ */\n+public class PatternsTest extends TestCase {\n+\n+    private Patterns patterns;\n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        patterns = new Patterns();\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test add() */\n+    public void testAdd() throws MimeTypeException {\n+        try {\n+            patterns.add(null, text);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add("""", null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add(null, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test matches() */\n+    public void testMatches() {\n+        try {\n+            patterns.matches(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+}'"
True,Delta,TIKA-107,tika,fa6bb7e3c92145d29cd97820718ece69fd6ffd62,0dd035b9be57a71ba23a29120f1e2153a3178b5b,org.apache.tika.mime.MimeTypesTest#testGetMimeType_byteArray,False,[],org.apache.tika.mime.MimeType@org.apache.tika.mime.MimeTypes@org.apache.tika.mime.Patterns,,,org.apache.tika.mime.MimeType.isDescendantOf(MimeType)@org.apache.tika.mime.MimeTypes.readMagicHeader(InputStream)@org.apache.tika.mime.MimeType.setSuperType(MimeType)@org.apache.tika.mime.MimeType.setDescription(String)@org.apache.tika.mime.MimeType.isValid(String)@org.apache.tika.mime.MimeType.compareTo(MimeType),"u'diff --git a/src/test/java/org/apache/tika/mime/MimeTypeTest.java b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\nindex 7eab68fe5..f94f7a4a5 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n@@ -20,6 +20,50 @@ import junit.framework.TestCase;\n \n public class MimeTypeTest extends TestCase {\n \n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test MimeType constructor */\n+    public void testConstrctor() {\n+\n+        // Missing registry\n+        try {\n+            new MimeType(null, ""text/plain"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Missing name\n+        try {\n+            new MimeType(types, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (no slash)\n+        try {\n+            new MimeType(types, ""application"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (not lower case)\n+        try {\n+            new MimeType(types, ""TEXT/PLAIN"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n     public void testIsValidName() {\n         assertTrue(MimeType.isValid(""application/octet-stream""));\n         assertTrue(MimeType.isValid(""text/plain""));\n@@ -35,6 +79,32 @@ public class MimeTypeTest extends TestCase {\n         assertFalse(MimeType.isValid(""application/\\u00f6ctet-stream""));\n         assertFalse(MimeType.isValid(""text/plain;""));\n         assertFalse(MimeType.isValid(""text/plain; charset=UTF-8""));\n+        try {\n+            MimeType.isValid(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setDescription() */\n+    public void testSetDescription() {\n+        try {\n+            text.setDescription(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setSuperType() */\n+    public void testSetSuperType() throws MimeTypeException {\n+        try {\n+            text.setSuperType(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/MimeTypesTest.java b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\nindex ef95d40cc..1270a1bf6 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n@@ -16,6 +16,8 @@\n  */\n package org.apache.tika.mime;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n import junit.framework.TestCase;\n \n public class MimeTypesTest extends TestCase {\n@@ -90,6 +92,13 @@ public class MimeTypesTest extends TestCase {\n \n         assertTrue(html.isDescendantOf(text));\n         assertFalse(text.isDescendantOf(html));\n+\n+        try {\n+            binary.isDescendantOf(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n     public void testCompareTo() {\n@@ -104,6 +113,33 @@ public class MimeTypesTest extends TestCase {\n         assertTrue(html.compareTo(binary) > 0);\n         assertTrue(html.compareTo(text) > 0);\n         assertTrue(html.compareTo(html) == 0);\n+\n+        try {\n+            binary.compareTo(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(byte[]) */\n+    public void testGetMimeType_byteArray() {\n+        try {\n+            types.getMimeType((byte[])null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(InputStream) */\n+    public void testGetMimeType_InputStream() throws IOException {\n+        try {\n+            types.getMimeType((InputStream)null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/PatternsTest.java b/src/test/java/org/apache/tika/mime/PatternsTest.java\nnew file mode 100644\nindex 000000000..1255632ca\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/mime/PatternsTest.java\n@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.mime;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test case for {@link Patterns}.\n+ *\n+ * @version $Id$\n+ */\n+public class PatternsTest extends TestCase {\n+\n+    private Patterns patterns;\n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        patterns = new Patterns();\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test add() */\n+    public void testAdd() throws MimeTypeException {\n+        try {\n+            patterns.add(null, text);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add("""", null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add(null, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test matches() */\n+    public void testMatches() {\n+        try {\n+            patterns.matches(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+}'"
True,Delta,TIKA-107,tika,fa6bb7e3c92145d29cd97820718ece69fd6ffd62,0dd035b9be57a71ba23a29120f1e2153a3178b5b,org.apache.tika.mime.MimeTypesTest#testGetMimeType_InputStream,False,[],org.apache.tika.mime.MimeType@org.apache.tika.mime.MimeTypes@org.apache.tika.mime.Patterns,,,org.apache.tika.mime.MimeType.isDescendantOf(MimeType)@org.apache.tika.mime.MimeTypes.readMagicHeader(InputStream)@org.apache.tika.mime.MimeType.setSuperType(MimeType)@org.apache.tika.mime.MimeType.setDescription(String)@org.apache.tika.mime.MimeType.isValid(String)@org.apache.tika.mime.MimeType.compareTo(MimeType),"u'diff --git a/src/test/java/org/apache/tika/mime/MimeTypeTest.java b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\nindex 7eab68fe5..f94f7a4a5 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n@@ -20,6 +20,50 @@ import junit.framework.TestCase;\n \n public class MimeTypeTest extends TestCase {\n \n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test MimeType constructor */\n+    public void testConstrctor() {\n+\n+        // Missing registry\n+        try {\n+            new MimeType(null, ""text/plain"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Missing name\n+        try {\n+            new MimeType(types, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (no slash)\n+        try {\n+            new MimeType(types, ""application"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (not lower case)\n+        try {\n+            new MimeType(types, ""TEXT/PLAIN"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n     public void testIsValidName() {\n         assertTrue(MimeType.isValid(""application/octet-stream""));\n         assertTrue(MimeType.isValid(""text/plain""));\n@@ -35,6 +79,32 @@ public class MimeTypeTest extends TestCase {\n         assertFalse(MimeType.isValid(""application/\\u00f6ctet-stream""));\n         assertFalse(MimeType.isValid(""text/plain;""));\n         assertFalse(MimeType.isValid(""text/plain; charset=UTF-8""));\n+        try {\n+            MimeType.isValid(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setDescription() */\n+    public void testSetDescription() {\n+        try {\n+            text.setDescription(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setSuperType() */\n+    public void testSetSuperType() throws MimeTypeException {\n+        try {\n+            text.setSuperType(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/MimeTypesTest.java b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\nindex ef95d40cc..1270a1bf6 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n@@ -16,6 +16,8 @@\n  */\n package org.apache.tika.mime;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n import junit.framework.TestCase;\n \n public class MimeTypesTest extends TestCase {\n@@ -90,6 +92,13 @@ public class MimeTypesTest extends TestCase {\n \n         assertTrue(html.isDescendantOf(text));\n         assertFalse(text.isDescendantOf(html));\n+\n+        try {\n+            binary.isDescendantOf(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n     public void testCompareTo() {\n@@ -104,6 +113,33 @@ public class MimeTypesTest extends TestCase {\n         assertTrue(html.compareTo(binary) > 0);\n         assertTrue(html.compareTo(text) > 0);\n         assertTrue(html.compareTo(html) == 0);\n+\n+        try {\n+            binary.compareTo(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(byte[]) */\n+    public void testGetMimeType_byteArray() {\n+        try {\n+            types.getMimeType((byte[])null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(InputStream) */\n+    public void testGetMimeType_InputStream() throws IOException {\n+        try {\n+            types.getMimeType((InputStream)null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/PatternsTest.java b/src/test/java/org/apache/tika/mime/PatternsTest.java\nnew file mode 100644\nindex 000000000..1255632ca\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/mime/PatternsTest.java\n@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.mime;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test case for {@link Patterns}.\n+ *\n+ * @version $Id$\n+ */\n+public class PatternsTest extends TestCase {\n+\n+    private Patterns patterns;\n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        patterns = new Patterns();\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test add() */\n+    public void testAdd() throws MimeTypeException {\n+        try {\n+            patterns.add(null, text);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add("""", null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add(null, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test matches() */\n+    public void testMatches() {\n+        try {\n+            patterns.matches(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+}'"
True,Delta,TIKA-107,tika,fa6bb7e3c92145d29cd97820718ece69fd6ffd62,0dd035b9be57a71ba23a29120f1e2153a3178b5b,org.apache.tika.mime.PatternsTest#testAdd,False,[],org.apache.tika.mime.MimeType@org.apache.tika.mime.MimeTypes@org.apache.tika.mime.Patterns,,,org.apache.tika.mime.MimeType.isDescendantOf(MimeType)@org.apache.tika.mime.MimeTypes.readMagicHeader(InputStream)@org.apache.tika.mime.MimeType.setSuperType(MimeType)@org.apache.tika.mime.MimeType.setDescription(String)@org.apache.tika.mime.MimeType.isValid(String)@org.apache.tika.mime.MimeType.compareTo(MimeType),"u'diff --git a/src/test/java/org/apache/tika/mime/MimeTypeTest.java b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\nindex 7eab68fe5..f94f7a4a5 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n@@ -20,6 +20,50 @@ import junit.framework.TestCase;\n \n public class MimeTypeTest extends TestCase {\n \n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test MimeType constructor */\n+    public void testConstrctor() {\n+\n+        // Missing registry\n+        try {\n+            new MimeType(null, ""text/plain"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Missing name\n+        try {\n+            new MimeType(types, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (no slash)\n+        try {\n+            new MimeType(types, ""application"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (not lower case)\n+        try {\n+            new MimeType(types, ""TEXT/PLAIN"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n     public void testIsValidName() {\n         assertTrue(MimeType.isValid(""application/octet-stream""));\n         assertTrue(MimeType.isValid(""text/plain""));\n@@ -35,6 +79,32 @@ public class MimeTypeTest extends TestCase {\n         assertFalse(MimeType.isValid(""application/\\u00f6ctet-stream""));\n         assertFalse(MimeType.isValid(""text/plain;""));\n         assertFalse(MimeType.isValid(""text/plain; charset=UTF-8""));\n+        try {\n+            MimeType.isValid(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setDescription() */\n+    public void testSetDescription() {\n+        try {\n+            text.setDescription(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setSuperType() */\n+    public void testSetSuperType() throws MimeTypeException {\n+        try {\n+            text.setSuperType(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/MimeTypesTest.java b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\nindex ef95d40cc..1270a1bf6 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n@@ -16,6 +16,8 @@\n  */\n package org.apache.tika.mime;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n import junit.framework.TestCase;\n \n public class MimeTypesTest extends TestCase {\n@@ -90,6 +92,13 @@ public class MimeTypesTest extends TestCase {\n \n         assertTrue(html.isDescendantOf(text));\n         assertFalse(text.isDescendantOf(html));\n+\n+        try {\n+            binary.isDescendantOf(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n     public void testCompareTo() {\n@@ -104,6 +113,33 @@ public class MimeTypesTest extends TestCase {\n         assertTrue(html.compareTo(binary) > 0);\n         assertTrue(html.compareTo(text) > 0);\n         assertTrue(html.compareTo(html) == 0);\n+\n+        try {\n+            binary.compareTo(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(byte[]) */\n+    public void testGetMimeType_byteArray() {\n+        try {\n+            types.getMimeType((byte[])null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(InputStream) */\n+    public void testGetMimeType_InputStream() throws IOException {\n+        try {\n+            types.getMimeType((InputStream)null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/PatternsTest.java b/src/test/java/org/apache/tika/mime/PatternsTest.java\nnew file mode 100644\nindex 000000000..1255632ca\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/mime/PatternsTest.java\n@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.mime;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test case for {@link Patterns}.\n+ *\n+ * @version $Id$\n+ */\n+public class PatternsTest extends TestCase {\n+\n+    private Patterns patterns;\n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        patterns = new Patterns();\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test add() */\n+    public void testAdd() throws MimeTypeException {\n+        try {\n+            patterns.add(null, text);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add("""", null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add(null, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test matches() */\n+    public void testMatches() {\n+        try {\n+            patterns.matches(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+}'"
True,Delta,TIKA-107,tika,fa6bb7e3c92145d29cd97820718ece69fd6ffd62,0dd035b9be57a71ba23a29120f1e2153a3178b5b,org.apache.tika.mime.PatternsTest#testMatches,False,[],org.apache.tika.mime.MimeType@org.apache.tika.mime.MimeTypes@org.apache.tika.mime.Patterns,,,org.apache.tika.mime.MimeType.isDescendantOf(MimeType)@org.apache.tika.mime.MimeTypes.readMagicHeader(InputStream)@org.apache.tika.mime.MimeType.setSuperType(MimeType)@org.apache.tika.mime.MimeType.setDescription(String)@org.apache.tika.mime.MimeType.isValid(String)@org.apache.tika.mime.MimeType.compareTo(MimeType),"u'diff --git a/src/test/java/org/apache/tika/mime/MimeTypeTest.java b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\nindex 7eab68fe5..f94f7a4a5 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n@@ -20,6 +20,50 @@ import junit.framework.TestCase;\n \n public class MimeTypeTest extends TestCase {\n \n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test MimeType constructor */\n+    public void testConstrctor() {\n+\n+        // Missing registry\n+        try {\n+            new MimeType(null, ""text/plain"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Missing name\n+        try {\n+            new MimeType(types, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (no slash)\n+        try {\n+            new MimeType(types, ""application"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (not lower case)\n+        try {\n+            new MimeType(types, ""TEXT/PLAIN"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n     public void testIsValidName() {\n         assertTrue(MimeType.isValid(""application/octet-stream""));\n         assertTrue(MimeType.isValid(""text/plain""));\n@@ -35,6 +79,32 @@ public class MimeTypeTest extends TestCase {\n         assertFalse(MimeType.isValid(""application/\\u00f6ctet-stream""));\n         assertFalse(MimeType.isValid(""text/plain;""));\n         assertFalse(MimeType.isValid(""text/plain; charset=UTF-8""));\n+        try {\n+            MimeType.isValid(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setDescription() */\n+    public void testSetDescription() {\n+        try {\n+            text.setDescription(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setSuperType() */\n+    public void testSetSuperType() throws MimeTypeException {\n+        try {\n+            text.setSuperType(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/MimeTypesTest.java b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\nindex ef95d40cc..1270a1bf6 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n@@ -16,6 +16,8 @@\n  */\n package org.apache.tika.mime;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n import junit.framework.TestCase;\n \n public class MimeTypesTest extends TestCase {\n@@ -90,6 +92,13 @@ public class MimeTypesTest extends TestCase {\n \n         assertTrue(html.isDescendantOf(text));\n         assertFalse(text.isDescendantOf(html));\n+\n+        try {\n+            binary.isDescendantOf(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n     public void testCompareTo() {\n@@ -104,6 +113,33 @@ public class MimeTypesTest extends TestCase {\n         assertTrue(html.compareTo(binary) > 0);\n         assertTrue(html.compareTo(text) > 0);\n         assertTrue(html.compareTo(html) == 0);\n+\n+        try {\n+            binary.compareTo(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(byte[]) */\n+    public void testGetMimeType_byteArray() {\n+        try {\n+            types.getMimeType((byte[])null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(InputStream) */\n+    public void testGetMimeType_InputStream() throws IOException {\n+        try {\n+            types.getMimeType((InputStream)null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/PatternsTest.java b/src/test/java/org/apache/tika/mime/PatternsTest.java\nnew file mode 100644\nindex 000000000..1255632ca\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/mime/PatternsTest.java\n@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.mime;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test case for {@link Patterns}.\n+ *\n+ * @version $Id$\n+ */\n+public class PatternsTest extends TestCase {\n+\n+    private Patterns patterns;\n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        patterns = new Patterns();\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test add() */\n+    public void testAdd() throws MimeTypeException {\n+        try {\n+            patterns.add(null, text);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add("""", null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add(null, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test matches() */\n+    public void testMatches() {\n+        try {\n+            patterns.matches(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+}'"
True,Delta,TIKA-121,tika-parsers,acf76a64d81eb9c901d92fe718c0f0ffb4d14ced,15c83430df273aae65170d25ed95f4df62858de2,org.apache.tika.mime.MediaTypeTest#testParseWithParams,False,[],,,,org.apache.tika.mime.MediaType.parse(String),"u'diff --git a/tika-parsers/src/test/java/org/apache/tika/mime/MediaTypeTest.java b/tika-parsers/src/test/java/org/apache/tika/mime/MediaTypeTest.java\nindex 657fdf1ca..f6194e0bf 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/mime/MediaTypeTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/mime/MediaTypeTest.java\n@@ -106,6 +106,55 @@ public class MediaTypeTest extends TestCase {\n                 + ""; c=\\""\\\\(\\\\)\\\\<\\\\>\\\\@\\\\,\\\\;\\\\:\\\\\\\\\\\\\\""\\\\/\\\\[\\\\]\\\\?\\\\=\\"""",\n                 new MediaType(""text"", ""plain"", parameters).toString());\n     }\n+    \n+    /**\n+     * @since TIKA-121\n+     */\n+    public void testParseWithParams() {\n+        String mimeStringWithParams = ""text/html;charset=UTF-8;foo=bar;foo2=bar2"";\n+\n+        MediaType type = MediaType.parse(mimeStringWithParams);\n+        assertNotNull(type);\n+        assertNotNull(type.getParameters());\n+        assertNotNull(type.getParameters().keySet());\n+        assertEquals(3, type.getParameters().keySet().size());\n+        boolean gotCharset = false, gotFoo = false, gotFoo2 = false;\n+        for (String param : type.getParameters().keySet()) {\n+            if (param.equals(""charset"")) {\n+                gotCharset = true;\n+            } else if (param.equals(""foo"")) {\n+                gotFoo = true;\n+            } else if (param.equals(""foo2"")) {\n+                gotFoo2 = true;\n+            }\n+        }\n+        assertTrue(gotCharset && gotFoo && gotFoo2);\n+    }\n+\n+    /**\n+     * @since TIKA-121\n+     */\n+    public void testParseNoParams() {\n+        String mimeStringNoParams = ""text/html"";\n+\n+        MediaType type = MediaType.parse(mimeStringNoParams);\n+        assertNotNull(type);\n+        assertNotNull(type.getParameters());\n+        assertNotNull(type.getParameters().keySet());\n+        assertEquals(0, type.getParameters().keySet().size());\n+    }\n+\n+    /**\n+     * @since TIKA-121\n+     */\n+    public void testParseNoParamsWithSemi() {\n+        String mimeStringNoParamsWithSemi = ""text/html;"";\n+        MediaType type = MediaType.parse(mimeStringNoParamsWithSemi);\n+        assertNotNull(type);\n+        assertNotNull(type.getParameters());\n+        assertNotNull(type.getParameters().keySet());\n+        assertEquals(0, type.getParameters().keySet().size());\n+    }\n \n     \n }'"
True,Delta,TIKA-209,tika-core,62697affaf3fb93c5f667f76fe54deb78003ef4e,29af90d132752b20e252f2aa275129e343082771,org.apache.tika.language.TestLanguageIdentifier#testIdentify,False,[],org.apache.tika.language.LanguageIdentifier,,,org.apache.tika.language.LanguageIdentifier.LanguageIdentifier(),"u'diff --git a/tika-core/src/test/java/org/apache/tika/language/TestLanguageIdentifier.java b/tika-core/src/test/java/org/apache/tika/language/TestLanguageIdentifier.java\nindex fb370aa91..c90d4483f 100644\n--- a/tika-core/src/test/java/org/apache/tika/language/TestLanguageIdentifier.java\n+++ b/tika-core/src/test/java/org/apache/tika/language/TestLanguageIdentifier.java\n@@ -180,8 +180,7 @@ public class TestLanguageIdentifier extends TestCase {\n     }\n   }\n \n-    // Disable until the resource files are properly located\n-    public void disabledTtestIdentify() {\n+    public void testIdentify() {\n         try {\n             long total = 0;\n             LanguageIdentifier idfr = new LanguageIdentifier();'"
True,Regression,TIKA-311,tika-parsers,99c2dd5ea17081585bf559962e33366c4b2428d1,d5090690acc7a353944f78c895cd7030cc34dce8,org.apache.tika.parser.html.HtmlParserTest#testParseAscii,False,[],org.apache.tika.parser.html.HtmlParser,,,org.apache.tika.parser.html.HtmlParser.getBodyHandler(XHTMLContentHandler),"u'diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/html/HtmlParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/html/HtmlParserTest.java\nindex 3b6a4baf8..2259727bc 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/parser/html/HtmlParserTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/parser/html/HtmlParserTest.java\n@@ -39,6 +39,7 @@ public class HtmlParserTest extends TestCase {\n     public void testParseAscii() throws Exception {\n         String path = ""/test-documents/testHTML.html"";\n         final StringWriter href = new StringWriter();\n+        final StringWriter name = new StringWriter();\n         ContentHandler body = new BodyContentHandler();\n         Metadata metadata = new Metadata();\n         InputStream stream = HtmlParserTest.class.getResourceAsStream(path);\n@@ -49,7 +50,11 @@ public class HtmlParserTest extends TestCase {\n                         String u, String l, String n, Attributes a)\n                         throws SAXException {\n                     if (""a"".equals(l)) {\n-                        href.append(a.getValue(""href""));\n+                        if (a.getValue(""href"") != null) {\n+                            href.append(a.getValue(""href""));\n+                        } else if (a.getValue(""name"") != null) {\n+                            name.append(a.getValue(""name""));\n+                        }\n                     }\n                 }\n             };\n@@ -66,6 +71,7 @@ public class HtmlParserTest extends TestCase {\n         assertEquals(""5"", metadata.get(""refresh""));\n \n         assertEquals(""http://www.apache.org/"", href.toString());\n+        assertEquals(""test-anchor"", name.toString());\n \n         String content = body.toString();\n         assertTrue('"
True,Delta,TIKA-391,tika-core,6f48f57a6a0f21e6589a1d512a25574425dcc4cb,21b54bf8ee46073ebc605265bde4ebb771cb9eea,org.apache.tika.mime.MimeDetectionTest#testMimeMagicStability,False,[],org.apache.tika.mime.MimeTypesReader@org.apache.tika.detect.MagicDetector@org.apache.tika.mime.Magic,,,org.apache.tika.mime.MimeTypesReader.readMatches(Element)@org.apache.tika.mime.MimeTypesReader.readMatch(Element)@org.apache.tika.mime.Magic.compareTo(Magic),"u'diff --git a/tika-core/src/test/java/org/apache/tika/mime/MimeDetectionTest.java b/tika-core/src/test/java/org/apache/tika/mime/MimeDetectionTest.java\nindex 26ae03a90..dd5093ce2 100644\n--- a/tika-core/src/test/java/org/apache/tika/mime/MimeDetectionTest.java\n+++ b/tika-core/src/test/java/org/apache/tika/mime/MimeDetectionTest.java\n@@ -138,5 +138,16 @@ public class MimeDetectionTest extends TestCase {\n             in.close();\n         }        \n     }\n+    \n+    /**\n+     * Tests that when we repeatedly test the detection of a document\n+     *  that can be detected with Mime Magic, that we consistently\n+     *  detect it correctly. See TIKA-391 for more details.\n+     */\n+    public void testMimeMagicStability() throws IOException {\n+       for(int i=0; i<100; i++) {\n+          testFile(""application/vnd.ms-excel"", ""test.xls"");\n+       }\n+    }\n \n }\ndiff --git a/tika-core/src/test/java/org/apache/tika/mime/MimeTypesReaderTest.java b/tika-core/src/test/java/org/apache/tika/mime/MimeTypesReaderTest.java\nnew file mode 100644\nindex 000000000..4c497cd20\n--- /dev/null\n+++ b/tika-core/src/test/java/org/apache/tika/mime/MimeTypesReaderTest.java\n@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.mime;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.SortedSet;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.tika.config.TikaConfig;\n+import org.apache.tika.metadata.Metadata;\n+\n+/**\n+ * These tests try to ensure that the MimeTypesReader\n+ *  has correctly processed the mime-types.xml file.\n+ * To do this, it tests that various aspects of the\n+ *  mime-types.xml file have ended up correctly as\n+ *  globs, matches, magics etc.\n+ *  \n+ * If you make updates to mime-types.xml, then the\n+ *  checks in this test may no longer hold true.\n+ * As such, if tests here start failing after your\n+ *  changes, please review the test details, and\n+ *  update it to match the new state of the file! \n+ */\n+public class MimeTypesReaderTest extends TestCase {\n+\n+    private MimeTypes mimeTypes;\n+    private SortedSet<Magic> magics;\n+    private SortedSet<MimeType> xmls;\n+\n+    @Override\n+    @SuppressWarnings(""unchecked"")\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        this.mimeTypes = TikaConfig.getDefaultConfig().getMimeRepository();\n+        \n+        Field magicsField = mimeTypes.getClass().getDeclaredField(""magics"");\n+        magicsField.setAccessible(true);\n+        magics = (SortedSet<Magic>)magicsField.get(mimeTypes);\n+        \n+        Field xmlsField = mimeTypes.getClass().getDeclaredField(""xmls"");\n+        xmlsField.setAccessible(true);\n+        xmls = (SortedSet<MimeType>)xmlsField.get(mimeTypes);\n+    }\n+    \n+    public void testHtmlMatches() throws Exception {\n+       int minMatches = 10;\n+       \n+       // Check on the type\n+       MimeType html = mimeTypes.forName(""text/html"");\n+       assertTrue(html.hasMagic());\n+       assertTrue(\n+             ""There should be at least ""+minMatches+"" HTML matches, found "" + html.getMagics().length,\n+             html.getMagics().length >= minMatches\n+       );\n+       \n+       \n+       // Check on the overall magics\n+       List<Magic> htmlMagics = new ArrayList<Magic>();\n+       for(Magic magic : magics) {\n+          if(magic.getType().toString().equals(""text/html"")) {\n+             htmlMagics.add(magic);\n+          }\n+       }\n+       \n+       assertTrue(\n+             ""There should be at least ""+minMatches+"" HTML matches, found "" + htmlMagics.size(),\n+             htmlMagics.size() >= minMatches\n+       );\n+    }\n+    \n+    public void testExcelMatches() throws Exception {\n+       int minMatches = 4;\n+       \n+       // Check on the type\n+       MimeType excel = mimeTypes.forName(""application/vnd.ms-excel"");\n+       assertTrue(excel.hasMagic());\n+       assertTrue(\n+             ""There should be at least ""+minMatches+"" Excel matches, found "" + excel.getMagics().length,\n+             excel.getMagics().length >= minMatches\n+       );\n+       \n+       \n+       // Check on the overall magics\n+       List<Magic> excelMagics = new ArrayList<Magic>();\n+       for(Magic magic : magics) {\n+          if(magic.getType().toString().equals(""application/vnd.ms-excel"")) {\n+             excelMagics.add(magic);\n+             System.out.println(magic);\n+          }\n+       }\n+       \n+       assertTrue(\n+             ""There should be at least ""+minMatches+"" Excel matches, found "" + excelMagics.size(),\n+             excelMagics.size() >= minMatches\n+       );\n+    }\n+}'"
True,Delta,TIKA-632,tika-parsers,c80eee31e10872648a1d23fefc8e13bb3b0e65a4,3b9fbf9f468dd4db2018cfc4e784859c630cd994,org.apache.tika.parser.microsoft.OutlookParserTest#testOutlookHTMLfromRTF,False,[],org.apache.tika.parser.rtf.TextExtractor@org.apache.tika.parser.microsoft.OutlookExtractor,,,org.apache.tika.parser.rtf.TextExtractor.pushBytes()@org.apache.tika.parser.rtf.TextExtractor.processControlWord()@org.apache.tika.parser.rtf.TextExtractor.addOutputChar(char)@org.apache.tika.parser.rtf.TextExtractor.processGroupEnd(),"u'diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/OutlookParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/OutlookParserTest.java\nindex 65f54e2ae..7a3edba6c 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/OutlookParserTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/OutlookParserTest.java\n@@ -173,10 +173,7 @@ public class OutlookParserTest extends TestCase {\n         //assertEquals(2, content.split(""<\\\\/body>"").length); // TODO Fix\n     }\n     \n-    /**\n-     * Disabled pending a fix for TIKA-632\n-     */\n-    public void DISABLEDtestOutlookHTMLfromRTF() throws Exception {\n+    public void testOutlookHTMLfromRTF() throws Exception {\n         Parser parser = new AutoDetectParser();\n         Metadata metadata = new Metadata();\n        \n@@ -200,10 +197,9 @@ public class OutlookParserTest extends TestCase {\n         // As the HTML version should have been processed, ensure\n         //  we got some of the links\n         String content = sw.toString().replaceAll(""<p>\\\\s+"",""<p>"");\n-//System.err.println(content);\n         assertTrue(content.contains(""<dd>New Outlook User</dd>""));\n         assertTrue(content.contains(""designed <i>to help you""));\n-        assertTrue(content.contains(""<p>Cached Exchange Mode""));\n+        assertTrue(content.contains(""<p><a href=\\""http://r.office.microsoft.com/r/rlidOutlookWelcomeMail10?clid=1033\\"">Cached Exchange Mode</a>""));\n         \n         // Link - check text around it, and the link itself\n         assertTrue(content.contains(""sign up for a free subscription""));\ndiff --git a/tika-parsers/src/test/java/org/apache/tika/parser/rtf/RTFParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/rtf/RTFParserTest.java\nindex 16fd7a17c..7255fc7fc 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/parser/rtf/RTFParserTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/parser/rtf/RTFParserTest.java\n@@ -288,6 +288,11 @@ public class RTFParserTest extends TikaTest {\n         assertContains(""<i>italic then </i><b><i>bold then</i></b><b> not italic</b>"", content);\n     }\n \n+    public void testHyperlink() throws Exception {\n+        String content = getXML(""testRTFHyperlink.rtf"").xml;\n+        assertContains(""our most <a href=\\""http://r.office.microsoft.com/r/rlidwelcomeFAQ?clid=1033\\"">frequently asked questions</a>"", content);\n+    }\n+\n     private Result getResult(String filename) throws Exception {\n         File file = getResourceAsFile(""/test-documents/"" + filename);\n        '"
True,Delta,TIKA-695,tika-parsers,4b51beae8e08e82458792a63dd867319cb40e1e4,022f18cecf52a0d653d5cba800ae1d6d3c2c294b,org.apache.tika.parser.microsoft.ooxml.OOXMLParserTest#testExcelCustomProperties,False,[],org.apache.tika.parser.microsoft.ooxml.MetadataExtractor,,,org.apache.tika.parser.microsoft.ooxml.MetadataExtractor.extract(Metadata),"u'diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java\nindex 478a8ab8c..1d4f37a57 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java\n@@ -667,4 +667,36 @@ public class OOXMLParserTest extends TikaTest {\n         assertContains(""Here is some red word Art"", content);\n     }\n \n+    /**\n+     * Ensures that custom OOXML properties are extracted\n+     */\n+    public void testExcelCustomProperties() throws Exception {\n+       InputStream input = OOXMLParserTest.class.getResourceAsStream(\n+             ""/test-documents/testEXCEL_custom_props.xlsx"");\n+       Metadata metadata = new Metadata();\n+       \n+       try {\n+          ContentHandler handler = new BodyContentHandler(-1);\n+          ParseContext context = new ParseContext();\n+          context.set(Locale.class, Locale.US);\n+          new OOXMLParser().parse(input, handler, metadata, context);\n+       } finally {\n+          input.close();\n+       }\n+       \n+       assertEquals(\n+             ""application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"", \n+             metadata.get(Metadata.CONTENT_TYPE));\n+       assertEquals(null,                   metadata.get(Metadata.AUTHOR));\n+       assertEquals(null,                   metadata.get(Metadata.LAST_AUTHOR));\n+       assertEquals(""2006-09-12T15:06:44Z"", metadata.get(Metadata.DATE));\n+       assertEquals(""2006-09-12T15:06:44Z"", metadata.get(Metadata.CREATION_DATE));\n+       assertEquals(""2011-08-22T14:24:38Z"", metadata.get(Metadata.LAST_MODIFIED));\n+       assertEquals(""Microsoft Excel"",      metadata.get(Metadata.APPLICATION_NAME));\n+       assertEquals(""true"",                 metadata.get(""custom:myCustomBoolean""));\n+       assertEquals(""3"",                    metadata.get(""custom:myCustomNumber""));\n+       assertEquals(""MyStringValue"",        metadata.get(""custom:MyCustomString""));\n+       assertEquals(""2010-12-30T22:00:00Z"", metadata.get(""custom:MyCustomDate""));\n+       assertEquals(""2010-12-29T22:00:00Z"", metadata.get(""custom:myCustomSecondDate""));\n+    }\n }'"
True,Delta,TIKA-698,tika-core,9c9763a5ac67683553f155a33338bdf98e1a6937,9d5cf328f700e655a38cdf547fc86a273b854b78,org.apache.tika.sax.SafeContentHandlerTest#testInvalidSurrogates,False,[],org.apache.tika.sax.SafeContentHandler,,,org.apache.tika.sax.SafeContentHandler.isInvalid(char),"u'diff --git a/tika-core/src/test/java/org/apache/tika/sax/SafeContentHandlerTest.java b/tika-core/src/test/java/org/apache/tika/sax/SafeContentHandlerTest.java\nindex 2b913adb0..2ce375907 100644\n--- a/tika-core/src/test/java/org/apache/tika/sax/SafeContentHandlerTest.java\n+++ b/tika-core/src/test/java/org/apache/tika/sax/SafeContentHandlerTest.java\n@@ -65,4 +65,9 @@ public class SafeContentHandlerTest extends TestCase {\n         assertEquals(""ab a c bc"", output.toString());\n     }\n \n+    public void testInvalidSurrogates() throws SAXException {\n+        safe.ignorableWhitespace(""\\udb00\\ubfff"".toCharArray(), 0, 2);\n+        assertEquals("" \\ubfff"", output.toString());\n+    }\n+\n }'"
True,Regression,TIKA-717,tika-parsers,fdb902bcea910756c9f498b0db9bf3a1870cb2f2,2f7241d842c56bc1a32e20a9f766f9a54eb80949,org.apache.tika.TestParsers#testComment,False,[],org.apache.tika.parser.rtf.TextExtractor,,,org.apache.tika.parser.rtf.TextExtractor.processControlWord(),"u'diff --git a/tika-parsers/src/test/java/org/apache/tika/TestParsers.java b/tika-parsers/src/test/java/org/apache/tika/TestParsers.java\nindex 657c1985c..c2a7adcbc 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/TestParsers.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/TestParsers.java\n@@ -19,8 +19,6 @@ package org.apache.tika;\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.InputStream;\n-import java.util.ArrayList;\n-import java.util.List;\n \n import org.apache.tika.config.TikaConfig;\n import org.apache.tika.metadata.Metadata;\n@@ -175,16 +173,15 @@ public class TestParsers extends TikaTest {\n     }\n \n     public void testComment() throws Exception {\n-        // TIKA-717: re-enable ppt, rtf once we fix it\n+        // TIKA-717: re-enable ppt once we fix it\n         //final String[] extensions = new String[] {""ppt"", ""pptx"", ""doc"", ""docx"", ""pdf"", ""rtf""};\n-        final String[] extensions = new String[] {""pptx"", ""doc"", ""docx"", ""pdf""};\n-        final List<String> failures = new ArrayList<String>();\n+        final String[] extensions = new String[] {""pptx"", ""doc"", ""docx"", ""pdf"", ""rtf""};\n         for(String extension : extensions) {\n             verifyComment(extension, ""testComment"");\n-            if (extension.equals(""pdf"")) {\n-                // TIKA-717: re-enable once we fix this:\n-                //verifyComment(extension, ""testComment2"");\n-            }\n+            // TIKA-717: re-enable once we fix this:\n+            //if (extension.equals(""pdf"")) {\n+            //verifyComment(extension, ""testComment2"");\n+            //}\n         }\n     }\n }'"
True,Delta,TIKA-720,tika-parsers,eb73a4be05f53e33679146810c28e74224f8b359,2bbf5ca691a5b0a1fe9debe9922c2f5af2849609,org.apache.tika.parser.txt.TXTParserTest#testEBCDIC_CP500,False,[],org.apache.tika.parser.txt.CharsetRecog_sbcs@org.apache.tika.parser.txt.CharsetDetector,,,org.apache.tika.parser.txt.CharsetDetector.createRecognizers(),"u'diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/txt/TXTParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/txt/TXTParserTest.java\nindex 689884e50..8dbefa5b6 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/parser/txt/TXTParserTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/parser/txt/TXTParserTest.java\n@@ -191,4 +191,17 @@ public class TXTParserTest extends TestCase {\n         assertEquals(""IBM866"", metadata.get(Metadata.CONTENT_ENCODING));\n     }\n \n+    public void testEBCDIC_CP500() throws Exception {\n+        Metadata metadata = new Metadata();\n+        StringWriter writer = new StringWriter();\n+        parser.parse(\n+                TXTParserTest.class.getResourceAsStream(""/test-documents/english.cp500.txt""),\n+                new WriteOutContentHandler(writer),\n+                metadata,\n+                new ParseContext());\n+\n+        assertEquals(""text/plain"", metadata.get(Metadata.CONTENT_TYPE));\n+        assertEquals(""IBM500"", metadata.get(Metadata.CONTENT_ENCODING));\n+    }\n+\n }'"
True,Delta,TIKA-748,tika-parsers,c256022ce85a05be039e81f152fe895cb4f38b3a,a5cc41a492f7b74d3a4612da9c6e8cac1efe1732,org.apache.tika.parser.rtf.RTFParserTest#testIgnoredControlWord,False,[],org.apache.tika.parser.rtf.TextExtractor,,,org.apache.tika.parser.rtf.TextExtractor.processGroupStart()@org.apache.tika.parser.rtf.TextExtractor.extract(InputStream)@org.apache.tika.parser.rtf.TextExtractor.processControlSymbol(char),"u'diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/rtf/RTFParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/rtf/RTFParserTest.java\nindex 7255fc7fc..0faa01d5a 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/parser/rtf/RTFParserTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/parser/rtf/RTFParserTest.java\n@@ -293,6 +293,10 @@ public class RTFParserTest extends TikaTest {\n         assertContains(""our most <a href=\\""http://r.office.microsoft.com/r/rlidwelcomeFAQ?clid=1033\\"">frequently asked questions</a>"", content);\n     }\n \n+    public void testIgnoredControlWord() throws Exception {\n+        assertContains(""<p>The quick brown fox jumps over the lazy dog</p>"", getXML(""testRTFIgnoredControlWord.rtf"").xml);\n+    }\n+\n     private Result getResult(String filename) throws Exception {\n         File file = getResourceAsFile(""/test-documents/"" + filename);\n        '"
True,Delta,TIKA-777,tika-parsers,2c3dbde39c16161dafc4b5cc03db4e259bf7fb7f,a157a6f025c4b5eda63881124919b4271f85ba0b,org.apache.tika.parser.rtf.RTFParserTest#testFontAfterBufferedText,False,[],org.apache.tika.parser.rtf.TextExtractor,,,org.apache.tika.parser.rtf.TextExtractor.processControlWord(long),"u'diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/rtf/RTFParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/rtf/RTFParserTest.java\nindex e2d1d3bfd..47e831cad 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/parser/rtf/RTFParserTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/parser/rtf/RTFParserTest.java\n@@ -274,6 +274,11 @@ public class RTFParserTest extends TikaTest {\n         assertContains(""<p>The quick brown fox jumps over the lazy dog</p>"", getXML(""testRTFIgnoredControlWord.rtf"").xml);\n     }\n \n+    public void testFontAfterBufferedText() throws Exception {\n+        assertContains(""\\u0423\\u0432\\u0430\\u0436\\u0430\\u0435\\u043c\\u044b\\u0439 \\u043a\\u043b\\u0438\\u0435\\u043d\\u0442!"",\n+                       getXML(""testFontAfterBufferedText.rtf"").xml);\n+    }\n+\n     private Result getResult(String filename) throws Exception {\n         File file = getResourceAsFile(""/test-documents/"" + filename);\n        '"
True,Regression,TIKA-778,tika-parsers,6ef64ddbeff4b23ee25e3d3f51f8a07c49d37c2b,00801cbcc44f7c2e8e8fbc00d8d1b21c687331d3,org.apache.tika.parser.pdf.PDFParserTest#testAnnotations,False,[],org.apache.tika.parser.pdf.PDF2XHTML,,,org.apache.tika.parser.pdf.PDF2XHTML.endPage(PDPage)@org.apache.tika.parser.pdf.PDF2XHTML.startPage(PDPage),"u'diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/pdf/PDFParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/pdf/PDFParserTest.java\nindex 4d13d1a20..f3631762e 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/parser/pdf/PDFParserTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/parser/pdf/PDFParserTest.java\n@@ -250,6 +250,26 @@ public class PDFParserTest extends TikaTest {\n         content = content.replaceAll(""[\\\\s\\u00a0]+"","" "");\n         assertContains(""Here is some text"", content);\n         assertEquals(-1, content.indexOf(""Here is a comment""));\n+\n+        // TIKA-738: make sure no extra </p> tags\n+        String xml = getXML(""testAnnotations.pdf"").xml;\n+        assertEquals(substringCount(""<p>"", xml),\n+                     substringCount(""</p>"", xml));\n+    }\n+\n+    private static int substringCount(String needle, String haystack) {\n+        int upto = -1;\n+        int count = 0;\n+        while(true) {\n+            final int next = haystack.indexOf(needle, upto);\n+            if (next == -1) {\n+                break;\n+            }\n+            count++;\n+            upto = next+1;\n+        }\n+\n+        return count;\n     }\n \n     public void testPageNumber() throws Exception {'"
True,Regression,TIKA-781,tika-parsers,ad78ecd3a85fcfc61b22cb045b3881cc9c170b13,350d1be2ace9a1dbb917288abac97e65552aa591,org.apache.tika.parser.rtf.RTFParserTest#testHyperlink,False,[],org.apache.tika.parser.rtf.TextExtractor,,,org.apache.tika.parser.rtf.TextExtractor.processControlWord(),"u'diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/rtf/RTFParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/rtf/RTFParserTest.java\nindex 47e831cad..9ed24e234 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/parser/rtf/RTFParserTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/parser/rtf/RTFParserTest.java\n@@ -268,6 +268,7 @@ public class RTFParserTest extends TikaTest {\n     public void testHyperlink() throws Exception {\n         String content = getXML(""testRTFHyperlink.rtf"").xml;\n         assertContains(""our most <a href=\\""http://r.office.microsoft.com/r/rlidwelcomeFAQ?clid=1033\\"">frequently asked questions</a>"", content);\n+        assertEquals(-1, content.indexOf(""<p>\\t\\t</p>""));\n     }\n \n     public void testIgnoredControlWord() throws Exception {'"
True,Regression,TIKA-793,tika-parsers,3bdf69a7d2e119aa722a097d81a99fd63d76be78,554605b284b0c4ac32b8cdda512700d780915a8d,org.apache.tika.parser.mp3.Mp3ParserTest#testMp3ParsingID3v2,False,[],org.apache.tika.parser.mp3.ID3v2Frame@org.apache.tika.parser.mp3.ID3v22Handler@org.apache.tika.parser.mp3.ID3v23Handler,,,org.apache.tika.parser.mp3.ID3v23Handler.ID3v23Handler(ID3v2Frame)@org.apache.tika.parser.mp3.ID3v24Handler.ID3v24Handler(ID3v2Frame),"u'diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/mp3/Mp3ParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/mp3/Mp3ParserTest.java\nindex 56949692d..41484f2b8 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/parser/mp3/Mp3ParserTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/parser/mp3/Mp3ParserTest.java\n@@ -109,7 +109,7 @@ public class Mp3ParserTest extends TestCase {\n         assertEquals(null, metadata.get(XMPDM.COMPOSER));\n         assertEquals(""2008"", metadata.get(XMPDM.RELEASE_DATE));\n         assertEquals(""Rock"", metadata.get(XMPDM.GENRE));\n-        assertEquals(""XXXID3v1 Comment\\nTest Comment"", metadata.get(XMPDM.LOG_COMMENT.getName()));\n+        assertEquals(""XXX - ID3v1 Comment\\nTest Comment"", metadata.get(XMPDM.LOG_COMMENT.getName()));\n         assertEquals(""1"", metadata.get(XMPDM.TRACK_NUMBER));\n         \n         assertEquals(""44100"", metadata.get(XMPDM.AUDIO_SAMPLE_RATE));\n@@ -208,8 +208,10 @@ public class Mp3ParserTest extends TestCase {\n        assertEquals(""Test Artist \\u2468\\u2460"", metadata.get(XMPDM.ARTIST));\n        assertEquals(""Test Album \\u2460\\u2468"", metadata.get(XMPDM.ALBUM));\n \n-       // TODO Fix comments\n-//       assertEquals(""Comment Desc - This is a comment"", metadata.get(XMPDM.LOG_COMMENT));\n+       assertEquals(\n+             ""Eng - Comment Desc\\nThis is a \\u1357\\u2468\\u2460 Comment"", \n+             metadata.get(XMPDM.LOG_COMMENT)\n+       );\n        \n        assertEquals(""MPEG 3 Layer III Version 1"", metadata.get(""version""));\n        assertEquals(""44100"", metadata.get(""samplerate""));'"
True,Regression,TIKA-793,tika-parsers,3bdf69a7d2e119aa722a097d81a99fd63d76be78,554605b284b0c4ac32b8cdda512700d780915a8d,org.apache.tika.parser.mp3.Mp3ParserTest#testMp3ParsingID3i18n,False,[],org.apache.tika.parser.mp3.ID3v2Frame@org.apache.tika.parser.mp3.ID3v22Handler@org.apache.tika.parser.mp3.ID3v23Handler,,,org.apache.tika.parser.mp3.ID3v23Handler.ID3v23Handler(ID3v2Frame)@org.apache.tika.parser.mp3.ID3v24Handler.ID3v24Handler(ID3v2Frame),"u'diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/mp3/Mp3ParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/mp3/Mp3ParserTest.java\nindex 56949692d..41484f2b8 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/parser/mp3/Mp3ParserTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/parser/mp3/Mp3ParserTest.java\n@@ -109,7 +109,7 @@ public class Mp3ParserTest extends TestCase {\n         assertEquals(null, metadata.get(XMPDM.COMPOSER));\n         assertEquals(""2008"", metadata.get(XMPDM.RELEASE_DATE));\n         assertEquals(""Rock"", metadata.get(XMPDM.GENRE));\n-        assertEquals(""XXXID3v1 Comment\\nTest Comment"", metadata.get(XMPDM.LOG_COMMENT.getName()));\n+        assertEquals(""XXX - ID3v1 Comment\\nTest Comment"", metadata.get(XMPDM.LOG_COMMENT.getName()));\n         assertEquals(""1"", metadata.get(XMPDM.TRACK_NUMBER));\n         \n         assertEquals(""44100"", metadata.get(XMPDM.AUDIO_SAMPLE_RATE));\n@@ -208,8 +208,10 @@ public class Mp3ParserTest extends TestCase {\n        assertEquals(""Test Artist \\u2468\\u2460"", metadata.get(XMPDM.ARTIST));\n        assertEquals(""Test Album \\u2460\\u2468"", metadata.get(XMPDM.ALBUM));\n \n-       // TODO Fix comments\n-//       assertEquals(""Comment Desc - This is a comment"", metadata.get(XMPDM.LOG_COMMENT));\n+       assertEquals(\n+             ""Eng - Comment Desc\\nThis is a \\u1357\\u2468\\u2460 Comment"", \n+             metadata.get(XMPDM.LOG_COMMENT)\n+       );\n        \n        assertEquals(""MPEG 3 Layer III Version 1"", metadata.get(""version""));\n        assertEquals(""44100"", metadata.get(""samplerate""));'"
True,Delta,TIKA-811,tika-parsers,8630e56468e1d25920030251d9d97a862cc719f3,5615ba6f3c478aa576420ce89b5b6119838df497,org.apache.tika.parser.jpeg.JpegParserTest#testJPEGGeo2,False,[],org.apache.tika.parser.image.ImageMetadataExtractor@org.apache.tika.parser.image.TiffParser,,,org.apache.tika.parser.image.ImageMetadataExtractor.parseJpeg(File),"u'diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/jpeg/JpegParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/jpeg/JpegParserTest.java\nindex 411c35822..dc57b1f4b 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/parser/jpeg/JpegParserTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/parser/jpeg/JpegParserTest.java\n@@ -17,6 +17,7 @@\n package org.apache.tika.parser.jpeg;\n \n import java.io.InputStream;\n+import java.text.DecimalFormat;\n import java.util.Arrays;\n import java.util.List;\n \n@@ -31,6 +32,8 @@ import org.xml.sax.helpers.DefaultHandler;\n \n public class JpegParserTest extends TestCase {\n     private final Parser parser = new JpegParser();\n+    \n+    private DecimalFormat geoDecimalFormatter = new DecimalFormat(""#.#####"");\n \n     public void testJPEG() throws Exception {\n         Metadata metadata = new Metadata();\n@@ -90,8 +93,8 @@ public class JpegParserTest extends TestCase {\n         parser.parse(stream, new DefaultHandler(), metadata, new ParseContext());\n         \n         // Geo tags\n-        assertEquals(""12.54321"", metadata.get(Metadata.LATITUDE));\n-        assertEquals(""-54.1234"", metadata.get(Metadata.LONGITUDE));\n+        assertEquals(""12.54321"", geoDecimalFormatter.format(new Double(metadata.get(Metadata.LATITUDE))));\n+        assertEquals(""-54.1234"", geoDecimalFormatter.format(new Double(metadata.get(Metadata.LONGITUDE))));\n         \n         // Core EXIF/TIFF tags\n         assertEquals(""100"", metadata.get(Metadata.IMAGE_WIDTH));\n@@ -128,7 +131,7 @@ public class JpegParserTest extends TestCase {\n      *  different way, see TIKA-915 for details\n      * Disabled for now, pending a fix to the underlying library\n      */\n-    public void DISABLEDtestJPEGGeo2() throws Exception {\n+    public void testJPEGGeo2() throws Exception {\n        Metadata metadata = new Metadata();\n        metadata.set(Metadata.CONTENT_TYPE, ""image/jpeg"");\n        InputStream stream =\n@@ -136,8 +139,8 @@ public class JpegParserTest extends TestCase {\n        parser.parse(stream, new DefaultHandler(), metadata, new ParseContext());\n \n        // Geo tags should be there with 5dp, and not rounded\n-       assertEquals(""51.57576"", metadata.get(Metadata.LATITUDE));\n-       assertEquals(""-1.56788"", metadata.get(Metadata.LONGITUDE));\n+       assertEquals(""51.57576"", geoDecimalFormatter.format(new Double(metadata.get(Metadata.LATITUDE))));\n+       assertEquals(""-1.56789"", geoDecimalFormatter.format(new Double(metadata.get(Metadata.LONGITUDE))));\n     }\n     \n     public void testJPEGTitleAndDescription() throws Exception {'"
True,Delta,TIKA-822,tika-core,48b28a6d31c3afb741ffa5ace4c0c4738101b539,e3a183120a7638ccd2093f62a47730e9636ec047,org.apache.tika.mime.MediaTypeTest#testParseWithParamsAndQuotedCharset,False,[],org.apache.tika.mime.MediaType,,,org.apache.tika.mime.MediaType.parseParameters(String),"u'diff --git a/tika-core/src/test/java/org/apache/tika/mime/MediaTypeTest.java b/tika-core/src/test/java/org/apache/tika/mime/MediaTypeTest.java\nindex f6194e0bf..3d7161793 100644\n--- a/tika-core/src/test/java/org/apache/tika/mime/MediaTypeTest.java\n+++ b/tika-core/src/test/java/org/apache/tika/mime/MediaTypeTest.java\n@@ -21,6 +21,8 @@ import java.util.Map;\n \n import junit.framework.TestCase;\n \n+import static java.util.Collections.singletonMap;\n+\n public class MediaTypeTest extends TestCase {\n \n     public void testBasics() {\n@@ -131,6 +133,28 @@ public class MediaTypeTest extends TestCase {\n         assertTrue(gotCharset && gotFoo && gotFoo2);\n     }\n \n+    /**\n+     * Per http://tools.ietf.org/html/rfc2045#section-5.1, charset can be in quotes\n+     */\n+    public void testParseWithParamsAndQuotedCharset() {\n+        // Typical case, with a quoted charset\n+        String mimeStringWithParams = ""text/html;charset=\\""UTF-8\\"""";\n+\n+        MediaType type = MediaType.parse(mimeStringWithParams);\n+        assertNotNull(type);\n+        assertEquals(singletonMap(""charset"", ""UTF-8""), type.getParameters());\n+        \n+        // Complex case, with various different quoted and un-quoted forms\n+        mimeStringWithParams = ""text/html;charset=\\\'UTF-8\\\';test=\\""true\\"";unquoted=here"";\n+\n+        type = MediaType.parse(mimeStringWithParams);\n+        assertNotNull(type);\n+        assertEquals(3, type.getParameters().size());\n+        assertEquals(""UTF-8"", type.getParameters().get(""charset""));\n+        assertEquals(""true"", type.getParameters().get(""test""));\n+        assertEquals(""here"", type.getParameters().get(""unquoted""));\n+    }\n+\n     /**\n      * @since TIKA-121\n      */'"
True,Regression,TIKA-866,tika-core,a547dde812cce268518796e116f63ef0a3f4c8f3,929f7535e99bac0a604206212253a60a1fdd816f,org.apache.tika.config.TikaConfigTest#testValidParser,False,[],org.apache.tika.config.TikaConfig@org.apache.tika.detect.EmptyDetector@org.apache.tika.mime.MediaTypeRegistry,,,org.apache.tika.config.TikaConfig.TikaConfig(),"u'diff --git a/tika-core/src/test/java/org/apache/tika/config/TikaConfigTest.java b/tika-core/src/test/java/org/apache/tika/config/TikaConfigTest.java\nindex 199e5a84a..bff4fcc21 100644\n--- a/tika-core/src/test/java/org/apache/tika/config/TikaConfigTest.java\n+++ b/tika-core/src/test/java/org/apache/tika/config/TikaConfigTest.java\n@@ -16,32 +16,46 @@\n  */\n package org.apache.tika.config;\n \n-import java.io.InputStream;\n+import java.net.URL;\n \n import junit.framework.TestCase;\n \n import org.apache.tika.exception.TikaException;\n+import org.apache.tika.parser.AutoDetectParser;\n import org.apache.tika.parser.DefaultParser;\n \n public class TikaConfigTest extends TestCase {\n \n     /**\n-     * Make sure that a configuration file can\'t reference to composite\n-     * parser classes like {@link DefaultParser} in the &lt;parser&gt;\n-     * configuration elements.\n+     * Make sure that a configuration file can\'t reference the\n+     * {@link AutoDetectParser} class a &lt;parser&gt; configuration element.\n      *\n      * @see <a href=""https://issues.apache.org/jira/browse/TIKA-866"">TIKA-866</a>\n      */\n     public void testInvalidParser() throws Exception {\n-        InputStream xml = TikaConfigTest.class.getResourceAsStream(\n-                ""TIKA-866-invalid.xml"");\n+        URL url = TikaConfigTest.class.getResource(""TIKA-866-invalid.xml"");\n+        System.setProperty(""tika.config"", url.toExternalForm());\n         try {\n-            new TikaConfig(xml);\n-            fail(""Composite parser class was allowed in <parser>"");\n+            new TikaConfig();\n+            fail(""AutoDetectParser allowed in a <parser> element"");\n         } catch (TikaException expected) {\n-            // OK\n-        } finally {\n-            xml.close();\n+        }\n+    }\n+\n+    /**\n+     * Make sure that a configuration file can reference also a composite\n+     * parser class like {@link DefaultParser} in a &lt;parser&gt;\n+     * configuration element.\n+     *\n+     * @see <a href=""https://issues.apache.org/jira/browse/TIKA-866"">TIKA-866</a>\n+     */\n+    public void testCompositeParser() throws Exception {\n+        URL url = TikaConfigTest.class.getResource(""TIKA-866-composite.xml"");\n+        System.setProperty(""tika.config"", url.toExternalForm());\n+        try {\n+            new TikaConfig();\n+        } catch (TikaException e) {\n+            fail(""Unexpected TikaException: "" + e);\n         }\n     }\n \n@@ -52,13 +66,12 @@ public class TikaConfigTest extends TestCase {\n      * @see <a href=""https://issues.apache.org/jira/browse/TIKA-866"">TIKA-866</a>\n      */\n     public void testValidParser() throws Exception {\n-        InputStream xml = TikaConfigTest.class.getResourceAsStream(\n-                ""TIKA-866-valid.xml"");\n+        URL url = TikaConfigTest.class.getResource(""TIKA-866-valid.xml"");\n+        System.setProperty(""tika.config"", url.toExternalForm());\n         try {\n-            new TikaConfig(xml);\n-            // OK\n-        } finally {\n-            xml.close();\n+            new TikaConfig();\n+        } catch (TikaException e) {\n+            fail(""Unexpected TikaException: "" + e);\n         }\n     }\n '"
True,Delta,TIKA-915,tika-parsers,8630e56468e1d25920030251d9d97a862cc719f3,5615ba6f3c478aa576420ce89b5b6119838df497,org.apache.tika.parser.jpeg.JpegParserTest#testJPEGGeo2,False,[],org.apache.tika.parser.image.ImageMetadataExtractor@org.apache.tika.parser.image.TiffParser,,,org.apache.tika.parser.image.ImageMetadataExtractor.parseJpeg(File),"u'diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/jpeg/JpegParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/jpeg/JpegParserTest.java\nindex 411c35822..dc57b1f4b 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/parser/jpeg/JpegParserTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/parser/jpeg/JpegParserTest.java\n@@ -17,6 +17,7 @@\n package org.apache.tika.parser.jpeg;\n \n import java.io.InputStream;\n+import java.text.DecimalFormat;\n import java.util.Arrays;\n import java.util.List;\n \n@@ -31,6 +32,8 @@ import org.xml.sax.helpers.DefaultHandler;\n \n public class JpegParserTest extends TestCase {\n     private final Parser parser = new JpegParser();\n+    \n+    private DecimalFormat geoDecimalFormatter = new DecimalFormat(""#.#####"");\n \n     public void testJPEG() throws Exception {\n         Metadata metadata = new Metadata();\n@@ -90,8 +93,8 @@ public class JpegParserTest extends TestCase {\n         parser.parse(stream, new DefaultHandler(), metadata, new ParseContext());\n         \n         // Geo tags\n-        assertEquals(""12.54321"", metadata.get(Metadata.LATITUDE));\n-        assertEquals(""-54.1234"", metadata.get(Metadata.LONGITUDE));\n+        assertEquals(""12.54321"", geoDecimalFormatter.format(new Double(metadata.get(Metadata.LATITUDE))));\n+        assertEquals(""-54.1234"", geoDecimalFormatter.format(new Double(metadata.get(Metadata.LONGITUDE))));\n         \n         // Core EXIF/TIFF tags\n         assertEquals(""100"", metadata.get(Metadata.IMAGE_WIDTH));\n@@ -128,7 +131,7 @@ public class JpegParserTest extends TestCase {\n      *  different way, see TIKA-915 for details\n      * Disabled for now, pending a fix to the underlying library\n      */\n-    public void DISABLEDtestJPEGGeo2() throws Exception {\n+    public void testJPEGGeo2() throws Exception {\n        Metadata metadata = new Metadata();\n        metadata.set(Metadata.CONTENT_TYPE, ""image/jpeg"");\n        InputStream stream =\n@@ -136,8 +139,8 @@ public class JpegParserTest extends TestCase {\n        parser.parse(stream, new DefaultHandler(), metadata, new ParseContext());\n \n        // Geo tags should be there with 5dp, and not rounded\n-       assertEquals(""51.57576"", metadata.get(Metadata.LATITUDE));\n-       assertEquals(""-1.56788"", metadata.get(Metadata.LONGITUDE));\n+       assertEquals(""51.57576"", geoDecimalFormatter.format(new Double(metadata.get(Metadata.LATITUDE))));\n+       assertEquals(""-1.56789"", geoDecimalFormatter.format(new Double(metadata.get(Metadata.LONGITUDE))));\n     }\n     \n     public void testJPEGTitleAndDescription() throws Exception {'"
True,Regression,TIKA-948,tika-app,f28f04af7e60ffc04550030c0c99e8c7dd931442,270853e9988c41d797b8102ab22236dca0a43cc2,org.apache.tika.cli.TikaCLITest#testExtract,False,[],,,,org.apache.tika.parser.microsoft.AbstractPOIFSExtractor.getDetector()@org.apache.tika.parser.microsoft.AbstractPOIFSExtractor.AbstractPOIFSExtractor(ParseContext),"u'diff --git a/tika-app/src/test/java/org/apache/tika/cli/TikaCLITest.java b/tika-app/src/test/java/org/apache/tika/cli/TikaCLITest.java\nindex ec1c1b2a3..291d6d79d 100644\n--- a/tika-app/src/test/java/org/apache/tika/cli/TikaCLITest.java\n+++ b/tika-app/src/test/java/org/apache/tika/cli/TikaCLITest.java\n@@ -186,7 +186,7 @@ public class TikaCLITest extends TestCase{\n             TikaCLI.main(params);\n             \n             // ChemDraw file, currently doesn\'t have the correct extension\n-            File expected1 = new File(tempFile, ""MBD002B040A.ole"");\n+            File expected1 = new File(tempFile, ""MBD002B040A.bin"");\n             // OLE10Native\n             File expected2 = new File(tempFile, ""file5"");\n             // Image of one of the embedded resources'"
True,Regression,TIKA-948,tika-parsers,218352a1ce7de0881416eff741d832a1abc51f07,1543cb0f3d1b4877825a923faa1f0f3ae990c4f9,org.apache.tika.parser.microsoft.POIContainerExtractionTest#testEmbeddedOfficeFiles,False,[],org.apache.tika.parser.microsoft.AbstractPOIFSExtractor@org.apache.tika.parser.microsoft.POIFSContainerDetector@org.apache.tika.parser.microsoft.OfficeParser,,,org.apache.tika.parser.microsoft.AbstractPOIFSExtractor.AbstractPOIFSExtractor(ParseContext),"u'diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/POIContainerExtractionTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/POIContainerExtractionTest.java\nindex 19819b353..ab4af8b87 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/POIContainerExtractionTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/POIContainerExtractionTest.java\n@@ -230,6 +230,20 @@ public class POIContainerExtractionTest extends AbstractPOIContainerExtractionTe\n        // TODO\n        \n        \n+       // Word, with a non-office file (PDF)\n+       handler = process(""testWORD_embedded_pdf.doc"", extractor, true);\n+       assertEquals(2, handler.filenames.size());\n+       assertEquals(2, handler.mediaTypes.size());\n+       \n+       assertEquals(""image1.emf"", handler.filenames.get(0));\n+       //assertEquals(""_1402837031.pdf"", handler.filenames.get(1)); // TODO Fix, TIKA-48\n+       assertEquals(""_1402837031.ole"", handler.filenames.get(1)); // TODO Fix, TIKA-48\n+\n+       assertEquals(TYPE_EMF, handler.mediaTypes.get(0)); // Icon of embedded pdf\n+       assertEquals(TYPE_PDF, handler.mediaTypes.get(1)); // The embedded PDF itself\n+       \n+       \n+       \n        // Outlook with a text file and a word document\n        handler = process(""testMSG_att_doc.msg"", extractor, true);\n        assertEquals(2, handler.filenames.size());'"
True,Delta,TIKA-965,tika-parsers,dfcf3d4c7cee2dac641ea5b331965ad03ce37364,49e18e004dcf260c5b55b2092fb90558351008c0,org.apache.tika.parser.AutoDetectParserTest#testTextNonASCIIUTF8,False,[],,,,org.apache.tika.detect.TextStatistics.isMostlyAscii(),"u'diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/AutoDetectParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/AutoDetectParserTest.java\nindex ee980caa9..cccccc50c 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/parser/AutoDetectParserTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/parser/AutoDetectParserTest.java\n@@ -47,6 +47,7 @@ public class AutoDetectParserTest extends TestCase {\n     private static final String NUMBERS    = ""application/vnd.apple.numbers"";\n     private static final String RTF        = ""application/rtf"";\n     private static final String PLAINTEXT  = ""text/plain; charset=ISO-8859-1"";\n+    private static final String UTF8TEXT   = ""text/plain; charset=UTF-8"";\n     private static final String WORD       = ""application/msword"";\n     private static final String XML        = ""application/xml"";\n     private static final String RSS        = ""application/rss+xml"";\n@@ -195,6 +196,10 @@ public class AutoDetectParserTest extends TestCase {\n     public void testText() throws Exception {\n         assertAutoDetect(""testTXT.txt"", PLAINTEXT, ""indexation de Txt"");\n     }\n+    \n+    public void testTextNonASCIIUTF8() throws Exception {\n+        assertAutoDetect(""testTXTNonASCIIUTF8.txt"", UTF8TEXT, ""The quick brown fox jumps over the lazy dog"");\n+    }\n \n     public void testWord() throws Exception {\n         assertAutoDetect(""testWORD.doc"", WORD, ""Sample Word Document"");'"
True,Delta,TIKA-981,tika-parsers,4cdcefd5a87ed11e84ee4a016b989102bc84cdf1,0f1934c10941ad6ad9648b4ca04c528288767675,org.apache.tika.parser.pdf.PDFParserTest#testPopupAnnotation,False,[],org.apache.tika.parser.pdf.PDF2XHTML,,,org.apache.tika.parser.pdf.PDF2XHTML.endPage(PDPage),"u'diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/pdf/PDFParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/pdf/PDFParserTest.java\nindex 169a3244f..8bff9a106 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/parser/pdf/PDFParserTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/parser/pdf/PDFParserTest.java\n@@ -297,6 +297,23 @@ public class PDFParserTest extends TikaTest {\n                      substringCount(""</p>"", xml));\n     }\n \n+    // TIKA-981\n+    public void testPopupAnnotation() throws Exception {\n+        Parser parser = new AutoDetectParser(); // Should auto-detect!\n+        ContentHandler handler = new BodyContentHandler();\n+        Metadata metadata = new Metadata();\n+        ParseContext context = new ParseContext();\n+        InputStream stream = getResourceAsStream(""/test-documents/testPopupAnnotation.pdf"");\n+        try {\n+            parser.parse(stream, handler, metadata, context);\n+        } finally {\n+            stream.close();\n+        }\n+        String content = handler.toString();\n+        assertContains(""this is the note"", content);\n+        assertContains(""igalsh"", content);\n+    }\n+\n     public void testEmbeddedPDFs() throws Exception {\n         String xml = getXML(""testPDFPackage.pdf"").xml;\n         assertContains(""PDF1"", xml);'"
True,Regression,TIKA-1032,tika-parsers,9ec715349810ab8e2d149028679ba6baebeae14b,e10c23b3ad00dd9d8fb059fdbfc40273b8e2469c,org.apache.tika.parser.microsoft.ooxml.OOXMLParserTest#testEmbeddedZipInPPTX,False,[],org.apache.tika.parser.microsoft.ooxml.AbstractOOXMLExtractor@org.apache.tika.parser.microsoft.ooxml.XSLFPowerPointExtractorDecorator,,,org.apache.tika.parser.microsoft.ooxml.AbstractOOXMLExtractor.handleEmbeddedParts(ContentHandler)@org.apache.tika.parser.microsoft.ooxml.XSLFPowerPointExtractorDecorator.buildXHTML(XHTMLContentHandler),"u'diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java\nindex 16c99bfac..978ba6360 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java\n@@ -855,9 +855,9 @@ public class OOXMLParserTest extends TikaTest {\n             input.close();\n         }\n         String xml = sw.toString();\n-        int h = xml.indexOf(""<div class=\\""embedded\\"" id=\\""rId3\\""/>"");\n+        int h = xml.indexOf(""<div class=\\""embedded\\"" id=\\""slide1_rId3\\""/>"");\n         int i = xml.indexOf(""Send me a note"");\n-        int j = xml.indexOf(""<div class=\\""embedded\\"" id=\\""rId4\\""/>"");\n+        int j = xml.indexOf(""<div class=\\""embedded\\"" id=\\""slide2_rId4\\""/>"");\n         int k = xml.indexOf(""<p>No title</p>"");\n         assertTrue(h != -1);\n         assertTrue(i != -1);\n@@ -882,4 +882,11 @@ public class OOXMLParserTest extends TikaTest {\n         assertContains(""This text is inside of a text box in the header of the document."", xml);\n         assertContains(""This text is inside of a text box in the footer of the document."", xml);\n     }\n-}\n+\n+    // TIKA-1032:\n+    public void testEmbeddedPPTXTwoSlides() throws Exception {\n+        String xml = getXML(""testPPT_embedded_two_slides.pptx"").xml;\n+        assertContains(""<div class=\\""embedded\\"" id=\\""slide1_rId7\\""/>"" , xml);\n+        assertContains(""<div class=\\""embedded\\"" id=\\""slide2_rId7\\""/>"" , xml);\n+    }\n+  }'"
True,Delta,TIKA-1032,tika-parsers,9ec715349810ab8e2d149028679ba6baebeae14b,e10c23b3ad00dd9d8fb059fdbfc40273b8e2469c,org.apache.tika.parser.microsoft.ooxml.OOXMLParserTest#testEmbeddedPPTXTwoSlides,False,[],org.apache.tika.parser.microsoft.ooxml.AbstractOOXMLExtractor@org.apache.tika.parser.microsoft.ooxml.XSLFPowerPointExtractorDecorator,,,org.apache.tika.parser.microsoft.ooxml.AbstractOOXMLExtractor.handleEmbeddedParts(ContentHandler)@org.apache.tika.parser.microsoft.ooxml.XSLFPowerPointExtractorDecorator.buildXHTML(XHTMLContentHandler),"u'diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java\nindex 16c99bfac..978ba6360 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java\n@@ -855,9 +855,9 @@ public class OOXMLParserTest extends TikaTest {\n             input.close();\n         }\n         String xml = sw.toString();\n-        int h = xml.indexOf(""<div class=\\""embedded\\"" id=\\""rId3\\""/>"");\n+        int h = xml.indexOf(""<div class=\\""embedded\\"" id=\\""slide1_rId3\\""/>"");\n         int i = xml.indexOf(""Send me a note"");\n-        int j = xml.indexOf(""<div class=\\""embedded\\"" id=\\""rId4\\""/>"");\n+        int j = xml.indexOf(""<div class=\\""embedded\\"" id=\\""slide2_rId4\\""/>"");\n         int k = xml.indexOf(""<p>No title</p>"");\n         assertTrue(h != -1);\n         assertTrue(i != -1);\n@@ -882,4 +882,11 @@ public class OOXMLParserTest extends TikaTest {\n         assertContains(""This text is inside of a text box in the header of the document."", xml);\n         assertContains(""This text is inside of a text box in the footer of the document."", xml);\n     }\n-}\n+\n+    // TIKA-1032:\n+    public void testEmbeddedPPTXTwoSlides() throws Exception {\n+        String xml = getXML(""testPPT_embedded_two_slides.pptx"").xml;\n+        assertContains(""<div class=\\""embedded\\"" id=\\""slide1_rId7\\""/>"" , xml);\n+        assertContains(""<div class=\\""embedded\\"" id=\\""slide2_rId7\\""/>"" , xml);\n+    }\n+  }'"
True,Regression,TIKA-1035,tika-parsers,01c02e671a82fc89fca8748175a741a5c5605962,ad9512ded721077a4e412a35d7fc74df99bc0614,org.apache.tika.parser.pdf.PDFParserTest#testBookmarks,False,[],org.apache.tika.parser.pdf.PDF2XHTML,,,org.apache.tika.parser.pdf.PDF2XHTML.extractBookmarkText()@org.apache.tika.parser.pdf.PDF2XHTML.endDocument(PDDocument),"u'diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/pdf/PDFParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/pdf/PDFParserTest.java\nindex f0ea023db..a20aa544c 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/parser/pdf/PDFParserTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/parser/pdf/PDFParserTest.java\n@@ -449,6 +449,10 @@ public class PDFParserTest extends TikaTest {\n     // TIKA-1035\n     public void testBookmarks() throws Exception {\n         String xml = getXML(""testPDF_bookmarks.pdf"").xml;\n-        assertContains(""Denmark bookmark is here"", xml);\n+        int i = xml.indexOf(""Denmark bookmark is here"");\n+        int j = xml.indexOf(""</body>"");\n+        assertTrue(i != -1);\n+        assertTrue(j != -1);\n+        assertTrue(i < j);\n     }\n }'"
True,Delta,TIKA-1035,tika-parsers,771e368ba531ef5063b89811d98a3c756920f870,51a7c9ccacde4f0a40d3f3a0a0c7b2d270d22684,org.apache.tika.parser.pdf.PDFParserTest#testBookmarks,False,[],org.apache.tika.parser.pdf.PDF2XHTML,,,org.apache.tika.parser.pdf.PDF2XHTML.writeLineSeparator(),"u'diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/pdf/PDFParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/pdf/PDFParserTest.java\nindex 7de217fec..f0ea023db 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/parser/pdf/PDFParserTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/parser/pdf/PDFParserTest.java\n@@ -17,12 +17,6 @@\n package org.apache.tika.parser.pdf;\n \n import java.io.InputStream;\n-import java.io.StringWriter;\n-\n-import javax.xml.transform.OutputKeys;\n-import javax.xml.transform.sax.SAXTransformerFactory;\n-import javax.xml.transform.sax.TransformerHandler;\n-import javax.xml.transform.stream.StreamResult;\n \n import org.apache.tika.TikaTest;\n import org.apache.tika.metadata.Metadata;\n@@ -451,4 +445,10 @@ public class PDFParserTest extends TikaTest {\n         // Column text is now interleaved:\n         assertContains(""Left column line 1 Right column line 1 Left colu mn line 2 Right column line 2"", content);\n     }\n+\n+    // TIKA-1035\n+    public void testBookmarks() throws Exception {\n+        String xml = getXML(""testPDF_bookmarks.pdf"").xml;\n+        assertContains(""Denmark bookmark is here"", xml);\n+    }\n }'"
True,Delta,TIKA-1048,tika-parsers,71166dea776a676601d35bef3922717aa2d56301,7e3cc3ae5c1bb30b47f562eb3527529424fa28f0,org.apache.tika.parser.xml.DcXMLParserTest#testNoSpaces,False,[],org.apache.tika.parser.xml.XMLParser,,,org.apache.tika.sax.TextContentHandler.TextContentHandler(ContentHandler),"u'diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/ParsingReaderTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/ParsingReaderTest.java\nindex 9f161f341..0b74f0434 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/parser/ParsingReaderTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/parser/ParsingReaderTest.java\n@@ -53,11 +53,13 @@ public class ParsingReaderTest extends TestCase {\n         String data = ""<p>test <span>content</span></p>"";\n         InputStream stream = new ByteArrayInputStream(data.getBytes(""UTF-8""));\n         Reader reader = new ParsingReader(stream, ""test.xml"");\n+        assertEquals(\' \', (char) reader.read());\n         assertEquals(\'t\', (char) reader.read());\n         assertEquals(\'e\', (char) reader.read());\n         assertEquals(\'s\', (char) reader.read());\n         assertEquals(\'t\', (char) reader.read());\n         assertEquals(\' \', (char) reader.read());\n+        assertEquals(\' \', (char) reader.read());\n         assertEquals(\'c\', (char) reader.read());\n         assertEquals(\'o\', (char) reader.read());\n         assertEquals(\'n\', (char) reader.read());\ndiff --git a/tika-parsers/src/test/java/org/apache/tika/parser/xml/DcXMLParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/xml/DcXMLParserTest.java\nindex 087966e12..88f8de8ec 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/parser/xml/DcXMLParserTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/parser/xml/DcXMLParserTest.java\n@@ -18,15 +18,14 @@ package org.apache.tika.parser.xml;\n \n import java.io.InputStream;\n \n-import junit.framework.TestCase;\n-\n+import org.apache.tika.TikaTest;\n import org.apache.tika.metadata.Metadata;\n import org.apache.tika.metadata.TikaCoreProperties;\n import org.apache.tika.sax.BodyContentHandler;\n import org.xml.sax.ContentHandler;\n import org.xml.sax.helpers.DefaultHandler;\n \n-public class DcXMLParserTest extends TestCase {\n+public class DcXMLParserTest extends TikaTest {\n \n     public void testXMLParserAsciiChars() throws Exception {\n         InputStream input = DcXMLParserTest.class.getResourceAsStream(\n@@ -92,4 +91,9 @@ public class DcXMLParserTest extends TestCase {\n         }\n     }\n \n+    // TIKA-1048\n+    public void testNoSpaces() throws Exception {\n+      String text = getXML(""testXML2.xml"").xml;\n+      assertFalse(text.contains(""testSubject""));\n+    }\n }'"
True,Regression,TIKA-1048,tika-parsers,71166dea776a676601d35bef3922717aa2d56301,7e3cc3ae5c1bb30b47f562eb3527529424fa28f0,org.apache.tika.parser.ParsingReaderTest#testXML,False,[],org.apache.tika.parser.xml.XMLParser,,,org.apache.tika.sax.TextContentHandler.TextContentHandler(ContentHandler),"u'diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/ParsingReaderTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/ParsingReaderTest.java\nindex 9f161f341..0b74f0434 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/parser/ParsingReaderTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/parser/ParsingReaderTest.java\n@@ -53,11 +53,13 @@ public class ParsingReaderTest extends TestCase {\n         String data = ""<p>test <span>content</span></p>"";\n         InputStream stream = new ByteArrayInputStream(data.getBytes(""UTF-8""));\n         Reader reader = new ParsingReader(stream, ""test.xml"");\n+        assertEquals(\' \', (char) reader.read());\n         assertEquals(\'t\', (char) reader.read());\n         assertEquals(\'e\', (char) reader.read());\n         assertEquals(\'s\', (char) reader.read());\n         assertEquals(\'t\', (char) reader.read());\n         assertEquals(\' \', (char) reader.read());\n+        assertEquals(\' \', (char) reader.read());\n         assertEquals(\'c\', (char) reader.read());\n         assertEquals(\'o\', (char) reader.read());\n         assertEquals(\'n\', (char) reader.read());\ndiff --git a/tika-parsers/src/test/java/org/apache/tika/parser/xml/DcXMLParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/xml/DcXMLParserTest.java\nindex 087966e12..88f8de8ec 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/parser/xml/DcXMLParserTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/parser/xml/DcXMLParserTest.java\n@@ -18,15 +18,14 @@ package org.apache.tika.parser.xml;\n \n import java.io.InputStream;\n \n-import junit.framework.TestCase;\n-\n+import org.apache.tika.TikaTest;\n import org.apache.tika.metadata.Metadata;\n import org.apache.tika.metadata.TikaCoreProperties;\n import org.apache.tika.sax.BodyContentHandler;\n import org.xml.sax.ContentHandler;\n import org.xml.sax.helpers.DefaultHandler;\n \n-public class DcXMLParserTest extends TestCase {\n+public class DcXMLParserTest extends TikaTest {\n \n     public void testXMLParserAsciiChars() throws Exception {\n         InputStream input = DcXMLParserTest.class.getResourceAsStream(\n@@ -92,4 +91,9 @@ public class DcXMLParserTest extends TestCase {\n         }\n     }\n \n+    // TIKA-1048\n+    public void testNoSpaces() throws Exception {\n+      String text = getXML(""testXML2.xml"").xml;\n+      assertFalse(text.contains(""testSubject""));\n+    }\n }'"
True,Delta,TIKA-1145,tika-core,c7d7f66f8c9e389d8654a6a57f0e14040f2e9d51,066f587584998f82e738496cd2906de8ffecb9b4,org.apache.tika.config.TikaConfigTest#testClassLoaderUsedEverywhere,False,[],org.apache.tika.config.TikaConfig@org.apache.tika.mime.MimeTypes@org.apache.tika.mime.MimeTypesFactory,,,org.apache.tika.config.TikaConfig.typesFromDomElement(Element)@org.apache.tika.config.TikaConfig.TikaConfig()@org.apache.tika.config.TikaConfig.TikaConfig(ClassLoader)@org.apache.tika.mime.MimeTypes.getDefaultMimeTypes()@org.apache.tika.config.TikaConfig.getDefaultMimeTypes(),"u'diff --git a/tika-core/src/test/java/org/apache/tika/config/TikaConfigTest.java b/tika-core/src/test/java/org/apache/tika/config/TikaConfigTest.java\nindex 5b9a18cf4..5610a1076 100644\n--- a/tika-core/src/test/java/org/apache/tika/config/TikaConfigTest.java\n+++ b/tika-core/src/test/java/org/apache/tika/config/TikaConfigTest.java\n@@ -17,9 +17,12 @@\n package org.apache.tika.config;\n \n import java.net.URL;\n+import java.util.List;\n+import java.util.Map;\n \n import junit.framework.TestCase;\n \n+import org.apache.tika.ResourceLoggingClassLoader;\n import org.apache.tika.exception.TikaException;\n import org.apache.tika.parser.AutoDetectParser;\n import org.apache.tika.parser.DefaultParser;\n@@ -81,4 +84,42 @@ public class TikaConfigTest extends TestCase {\n         }\n     }\n \n+    /**\n+     * TIKA-1145 If the TikaConfig has a ClassLoader set on it,\n+     * that should be used when loading the mimetypes and when\n+     * discovering services\n+     */\n+    public void testClassLoaderUsedEverywhere() throws Exception {\n+        ResourceLoggingClassLoader customLoader = \n+                new ResourceLoggingClassLoader(getClass().getClassLoader());\n+        TikaConfig config;\n+        \n+        // Without a classloader set, normal one will be used\n+        config = new TikaConfig();\n+        config.getMediaTypeRegistry();\n+        config.getParser();\n+        assertEquals(0, customLoader.getLoadedResources().size());\n+        \n+        // With a classloader set, resources will come through it\n+        config = new TikaConfig(customLoader);\n+        config.getMediaTypeRegistry();\n+        config.getParser();\n+        \n+        Map<String,List<URL>> resources = customLoader.getLoadedResources();\n+        int resourcesCount = resources.size();\n+        assertTrue(\n+                ""Not enough things used the classloader, found only "" + resourcesCount,\n+                resourcesCount > 3\n+        );\n+        \n+        // Ensure everything that should do, did use it\n+        // - Parsers\n+        assertNotNull(resources.get(""META-INF/services/org.apache.tika.parser.Parser""));\n+        // - Detectors\n+        assertNotNull(resources.get(""META-INF/services/org.apache.tika.detect.Detector""));\n+        // - Built-In Mimetypes\n+        assertNotNull(resources.get(""org/apache/tika/mime/tika-mimetypes.xml""));\n+        // - Custom Mimetypes\n+        assertNotNull(resources.get(""org/apache/tika/mime/custom-mimetypes.xml""));\n+    }\n }\n\\ No newline at end of file\ndiff --git a/tika-core/src/test/java/org/apache/tika/mime/MimeTypesReaderTest.java b/tika-core/src/test/java/org/apache/tika/mime/MimeTypesReaderTest.java\nindex d1a741112..3933b4bce 100644\n--- a/tika-core/src/test/java/org/apache/tika/mime/MimeTypesReaderTest.java\n+++ b/tika-core/src/test/java/org/apache/tika/mime/MimeTypesReaderTest.java\n@@ -186,5 +186,4 @@ public class MimeTypesReaderTest extends TestCase {\n         assertEquals("".ppt"",ext);\n         assertEquals("".ppt"",mt.getExtensions().get(0));\n     }\n-\n }'"
True,Delta,TIKA-1292,tika-core,f689fa7ee25c0c9c4bd4d68aa51941eb558f7026,390222663ee5b3231faa59039cc71acfc24af665,org.apache.tika.mime.MimeDetectionTest#testMimeMagicClashSamePriority,True,[],org.apache.tika.mime.MimeTypes,,,org.apache.tika.mime.MimeTypes.MimeTypes(),"u'diff --git a/tika-core/src/test/java/org/apache/tika/mime/MimeDetectionTest.java b/tika-core/src/test/java/org/apache/tika/mime/MimeDetectionTest.java\nindex 27ac8c93f..1fe8636cc 100644\n--- a/tika-core/src/test/java/org/apache/tika/mime/MimeDetectionTest.java\n+++ b/tika-core/src/test/java/org/apache/tika/mime/MimeDetectionTest.java\n@@ -217,8 +217,8 @@ public class MimeDetectionTest {\n      *  right one based on the glob, or the first one we\n      *  come across if not. See TIKA-1292 for more details.\n      */\n-//  @Test    \n-    public void DISABLEDtestMimeMagicClashSamePriority() throws IOException {\n+    @Test    \n+    public void testMimeMagicClashSamePriority() throws IOException {\n         byte[] helloWorld = ""Hello, World!"".getBytes(""UTF-8"");\n         MediaType helloType = MediaType.parse(""hello/world-file"");\n         MediaType helloXType = MediaType.parse(""hello/x-world-hello"");\n@@ -233,9 +233,9 @@ public class MimeDetectionTest {\n         metadata.set(Metadata.RESOURCE_NAME_KEY, ""test.x-hello-world"");\n         assertEquals(helloXType, mimeTypes.detect(new ByteArrayInputStream(helloWorld), metadata));\n         \n-        // Without, goes for the first defined\n+        // Without, goes for the one that sorts last\n         metadata = new Metadata();\n         metadata.set(Metadata.RESOURCE_NAME_KEY, ""testingTESTINGtesting"");\n-        assertEquals(helloType, mimeTypes.detect(new ByteArrayInputStream(helloWorld), metadata));\n+        assertEquals(helloXType, mimeTypes.detect(new ByteArrayInputStream(helloWorld), metadata));\n     }\n }\ndiff --git a/tika-core/src/test/java/org/apache/tika/mime/MimeTypesReaderTest.java b/tika-core/src/test/java/org/apache/tika/mime/MimeTypesReaderTest.java\nindex 7c2f82921..9533839f1 100644\n--- a/tika-core/src/test/java/org/apache/tika/mime/MimeTypesReaderTest.java\n+++ b/tika-core/src/test/java/org/apache/tika/mime/MimeTypesReaderTest.java\n@@ -148,12 +148,14 @@ public class MimeTypesReaderTest {\n      */\n     @Test\n     public void testCustomMimeTypes() {\n-       // Check that it knows about our two special ones\n+       // Check that it knows about our three special ones\n        String helloWorld = ""hello/world"";\n        String helloWorldFile = ""hello/world-file"";\n+       String helloXWorld = ""hello/x-world-hello"";\n        try {\n           assertNotNull(this.mimeTypes.forName(helloWorld));\n           assertNotNull(this.mimeTypes.forName(helloWorldFile));\n+          assertNotNull(this.mimeTypes.forName(helloXWorld));\n        } catch (Exception e) {\n           fail(e.getMessage());\n        }\n@@ -162,15 +164,23 @@ public class MimeTypesReaderTest {\n        try {\n           MimeType hw = this.mimeTypes.forName(helloWorld);\n           MimeType hwf = this.mimeTypes.forName(helloWorldFile);\n+          MimeType hxw = this.mimeTypes.forName(helloXWorld);\n           \n-          // The parent has no comments, globs etc\n+          // The parent has no comments, globs, magic etc\n           assertEquals("""", hw.getDescription());\n           assertEquals("""", hw.getExtension());\n           assertEquals(0, hw.getExtensions().size());\n+          assertEquals(0, hw.getMagics().size());\n           \n           // The file one does\n           assertEquals(""A \\""Hello World\\"" file"", hwf.getDescription());\n           assertEquals("".hello.world"", hwf.getExtension());\n+          assertEquals(1, hwf.getMagics().size());\n+          \n+          // The alternate one has most\n+          assertEquals("""", hxw.getDescription());\n+          assertEquals("".x-hello-world"", hxw.getExtension());\n+          assertEquals(1, hxw.getMagics().size());\n           \n           // Check that we can correct detect with the file one:\n           // By name\n@@ -178,11 +188,15 @@ public class MimeTypesReaderTest {\n           m.add(Metadata.RESOURCE_NAME_KEY, ""test.hello.world"");\n           assertEquals(hwf.toString(), this.mimeTypes.detect(null, m).toString());\n           \n-          // By contents\n+          m = new Metadata();\n+          m.add(Metadata.RESOURCE_NAME_KEY, ""test.x-hello-world"");\n+          assertEquals(hxw.toString(), this.mimeTypes.detect(null, m).toString());\n+          \n+          // By contents - picks the x one as that sorts later\n           m = new Metadata();\n           ByteArrayInputStream s = new ByteArrayInputStream(\n                 ""Hello, World!"".getBytes(""ASCII""));\n-          assertEquals(hwf.toString(), this.mimeTypes.detect(s, m).toString());\n+          assertEquals(hxw.toString(), this.mimeTypes.detect(s, m).toString());\n        } catch (Exception e) {\n           fail(e.getMessage());\n        }'"

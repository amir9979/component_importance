valid,type,issue,module,commit,parent,testcase,has_test_annotation,traces,bugged_components,description,extra_description,blamed_components,diff
True,Regression,366,tika-core,8d76fd9c2106b55bb08a47a6c71df30e55d54687,7ece6ff5d3d16a8a4e3180abdff07a817a844a65,org.apache.tika.mime.MimeDetectionTest.testDetection,False,[],,,,org.apache.tika.mime.mimetypes.getminlength(),"u'diff --git a/tika-core/src/test/java/org/apache/tika/mime/MimeDetectionTest.java b/tika-core/src/test/java/org/apache/tika/mime/MimeDetectionTest.java\nindex a12a07bbb..f9db96374 100644\n--- a/tika-core/src/test/java/org/apache/tika/mime/MimeDetectionTest.java\n+++ b/tika-core/src/test/java/org/apache/tika/mime/MimeDetectionTest.java\n@@ -57,6 +57,8 @@ public class MimeDetectionTest extends TestCase {\n                 ""test-difficult-rdf2.xml"");\n         // add evil test from TIKA-327\n         testFile(""text/html"", ""evilhtml.html"");\n+        // add another evil html test from TIKA-357\n+        testFile(""text/html"", ""testlargerbuffer.html"");\n     }\n     \n     public void testAutosetSupertype() throws MimeTypeException {'"
True,Regression,366,tika-core,8d76fd9c2106b55bb08a47a6c71df30e55d54687,7ece6ff5d3d16a8a4e3180abdff07a817a844a65,org.apache.tika.mime.MimeDetectionTest.testDetection,False,[],,,,org.apache.tika.mime.mimetypes.getminlength(),"u'diff --git a/tika-core/src/test/java/org/apache/tika/mime/MimeDetectionTest.java b/tika-core/src/test/java/org/apache/tika/mime/MimeDetectionTest.java\nindex a12a07bbb..f9db96374 100644\n--- a/tika-core/src/test/java/org/apache/tika/mime/MimeDetectionTest.java\n+++ b/tika-core/src/test/java/org/apache/tika/mime/MimeDetectionTest.java\n@@ -57,6 +57,8 @@ public class MimeDetectionTest extends TestCase {\n                 ""test-difficult-rdf2.xml"");\n         // add evil test from TIKA-327\n         testFile(""text/html"", ""evilhtml.html"");\n+        // add another evil html test from TIKA-357\n+        testFile(""text/html"", ""testlargerbuffer.html"");\n     }\n     \n     public void testAutosetSupertype() throws MimeTypeException {'"
True,Regression,311,tika-parsers,99c2dd5ea17081585bf559962e33366c4b2428d1,d5090690acc7a353944f78c895cd7030cc34dce8,org.apache.tika.parser.html.HtmlParserTest.testParseAscii,False,[],,,,org.apache.tika.parser.html.htmlparser.getbodyhandler(xhtmlcontenthandler),"u'diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/html/HtmlParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/html/HtmlParserTest.java\nindex 3b6a4baf8..2259727bc 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/parser/html/HtmlParserTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/parser/html/HtmlParserTest.java\n@@ -39,6 +39,7 @@ public class HtmlParserTest extends TestCase {\n     public void testParseAscii() throws Exception {\n         String path = ""/test-documents/testHTML.html"";\n         final StringWriter href = new StringWriter();\n+        final StringWriter name = new StringWriter();\n         ContentHandler body = new BodyContentHandler();\n         Metadata metadata = new Metadata();\n         InputStream stream = HtmlParserTest.class.getResourceAsStream(path);\n@@ -49,7 +50,11 @@ public class HtmlParserTest extends TestCase {\n                         String u, String l, String n, Attributes a)\n                         throws SAXException {\n                     if (""a"".equals(l)) {\n-                        href.append(a.getValue(""href""));\n+                        if (a.getValue(""href"") != null) {\n+                            href.append(a.getValue(""href""));\n+                        } else if (a.getValue(""name"") != null) {\n+                            name.append(a.getValue(""name""));\n+                        }\n                     }\n                 }\n             };\n@@ -66,6 +71,7 @@ public class HtmlParserTest extends TestCase {\n         assertEquals(""5"", metadata.get(""refresh""));\n \n         assertEquals(""http://www.apache.org/"", href.toString());\n+        assertEquals(""test-anchor"", name.toString());\n \n         String content = body.toString();\n         assertTrue('"
True,Regression,311,tika-parsers,99c2dd5ea17081585bf559962e33366c4b2428d1,d5090690acc7a353944f78c895cd7030cc34dce8,org.apache.tika.parser.html.HtmlParserTest.testParseAscii,False,[],,,,org.apache.tika.parser.html.htmlparser.getbodyhandler(xhtmlcontenthandler),"u'diff --git a/tika-parsers/src/test/java/org/apache/tika/parser/html/HtmlParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/html/HtmlParserTest.java\nindex 3b6a4baf8..2259727bc 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/parser/html/HtmlParserTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/parser/html/HtmlParserTest.java\n@@ -39,6 +39,7 @@ public class HtmlParserTest extends TestCase {\n     public void testParseAscii() throws Exception {\n         String path = ""/test-documents/testHTML.html"";\n         final StringWriter href = new StringWriter();\n+        final StringWriter name = new StringWriter();\n         ContentHandler body = new BodyContentHandler();\n         Metadata metadata = new Metadata();\n         InputStream stream = HtmlParserTest.class.getResourceAsStream(path);\n@@ -49,7 +50,11 @@ public class HtmlParserTest extends TestCase {\n                         String u, String l, String n, Attributes a)\n                         throws SAXException {\n                     if (""a"".equals(l)) {\n-                        href.append(a.getValue(""href""));\n+                        if (a.getValue(""href"") != null) {\n+                            href.append(a.getValue(""href""));\n+                        } else if (a.getValue(""name"") != null) {\n+                            name.append(a.getValue(""name""));\n+                        }\n                     }\n                 }\n             };\n@@ -66,6 +71,7 @@ public class HtmlParserTest extends TestCase {\n         assertEquals(""5"", metadata.get(""refresh""));\n \n         assertEquals(""http://www.apache.org/"", href.toString());\n+        assertEquals(""test-anchor"", name.toString());\n \n         String content = body.toString();\n         assertTrue('"
True,Regression,296,tika-parsers,c5038b8fd110a3305645ad9791a6d10315ca577f,a463b9fd2ac3046b7e669b3549385f962a2482f5,org.apache.tika.mime.MimeTypesTest.testSubTypes,False,[],,,,org.apache.tika.mime.mimetypes.getmimetype(string)@org.apache.tika.mime.mimetypes.forname(string)@org.apache.tika.mime.mimetypes.mimetypes(),"u'diff --git a/tika-parsers/src/test/java/org/apache/tika/mime/MimeTypesTest.java b/tika-parsers/src/test/java/org/apache/tika/mime/MimeTypesTest.java\nindex 3cea64701..9aebb32e2 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n@@ -18,6 +18,9 @@ package org.apache.tika.mime;\n \n import java.io.IOException;\n import java.io.InputStream;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+\n import junit.framework.TestCase;\n \n public class MimeTypesTest extends TestCase {\n@@ -68,14 +71,20 @@ public class MimeTypesTest extends TestCase {\n    }\n \n     public void testSubTypes() {\n-        assertEquals(1, binary.getSubTypes().size());\n-        assertEquals(\n-                ""text/plain"",\n-                binary.getSubTypes().iterator().next().getName());\n+        assertEquals(2, binary.getSubTypes().size());\n+        Iterator<MimeType> iter = binary.getSubTypes().iterator();\n+        String[] typeNames = new String[2];\n+        typeNames[0] = iter.next().getName();\n+        typeNames[1] = iter.next().getName();\n+        Arrays.sort(typeNames);\n+        assertEquals(""application/xml"", typeNames[0]);\n+        assertEquals(""text/plain"", typeNames[1]);\n+\n         assertEquals(1, text.getSubTypes().size());\n         assertEquals(\n                 ""text/html"",\n                 text.getSubTypes().iterator().next().getName());\n+        \n         assertEquals(0, html.getSubTypes().size());\n     }\n '"
True,Regression,296,tika-parsers,c5038b8fd110a3305645ad9791a6d10315ca577f,a463b9fd2ac3046b7e669b3549385f962a2482f5,org.apache.tika.mime.MimeTypesTest.testSubTypes,False,[],,,,org.apache.tika.mime.mimetypes.getmimetype(string)@org.apache.tika.mime.mimetypes.forname(string)@org.apache.tika.mime.mimetypes.mimetypes(),"u'diff --git a/tika-parsers/src/test/java/org/apache/tika/mime/MimeTypesTest.java b/tika-parsers/src/test/java/org/apache/tika/mime/MimeTypesTest.java\nindex 3cea64701..9aebb32e2 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n@@ -18,6 +18,9 @@ package org.apache.tika.mime;\n \n import java.io.IOException;\n import java.io.InputStream;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+\n import junit.framework.TestCase;\n \n public class MimeTypesTest extends TestCase {\n@@ -68,14 +71,20 @@ public class MimeTypesTest extends TestCase {\n    }\n \n     public void testSubTypes() {\n-        assertEquals(1, binary.getSubTypes().size());\n-        assertEquals(\n-                ""text/plain"",\n-                binary.getSubTypes().iterator().next().getName());\n+        assertEquals(2, binary.getSubTypes().size());\n+        Iterator<MimeType> iter = binary.getSubTypes().iterator();\n+        String[] typeNames = new String[2];\n+        typeNames[0] = iter.next().getName();\n+        typeNames[1] = iter.next().getName();\n+        Arrays.sort(typeNames);\n+        assertEquals(""application/xml"", typeNames[0]);\n+        assertEquals(""text/plain"", typeNames[1]);\n+\n         assertEquals(1, text.getSubTypes().size());\n         assertEquals(\n                 ""text/html"",\n                 text.getSubTypes().iterator().next().getName());\n+        \n         assertEquals(0, html.getSubTypes().size());\n     }\n '"
True,Delta,296,tika-core,c5038b8fd110a3305645ad9791a6d10315ca577f,a463b9fd2ac3046b7e669b3549385f962a2482f5,org.apache.tika.mime.MimeDetectionTest.testAutosetSupertype,False,[],,,,org.apache.tika.mime.mimetypes.getmimetype(string)@org.apache.tika.mime.mimetypes.forname(string)@org.apache.tika.mime.mimetypes.mimetypes(),"u'diff --git a/tika-core/src/test/java/org/apache/tika/mime/MimeDetectionTest.java b/tika-core/src/test/java/org/apache/tika/mime/MimeDetectionTest.java\nindex 2e38907c7..f56f7868d 100644\n--- a/tika-core/src/test/java/org/apache/tika/mime/MimeDetectionTest.java\n+++ b/tika-core/src/test/java/org/apache/tika/mime/MimeDetectionTest.java\n@@ -48,6 +48,15 @@ public class MimeDetectionTest extends TestCase {\n         testFile(""application/xml"", ""test-long-comment.xml"");\n         testFile(""application/xslt+xml"", ""stylesheet.xsl"");\n     }\n+    \n+    public void testAutosetSupertype() throws MimeTypeException {\n+    \tMimeTypes types = new MimeTypes();\n+    \tMimeType type = types.forName(""application/something+xml"");\n+    \tassertEquals(""application/xml"", type.getSuperType().getName());\n+    \t\n+    \ttype = types.forName(""text/something"");\n+    \tassertEquals(""text/plain"", type.getSuperType().getName());\n+    }\n \n     private void testFile(String expected, String filename) throws IOException {\n         InputStream in = getClass().getResourceAsStream(filename);'"
True,Delta,296,tika-core,c5038b8fd110a3305645ad9791a6d10315ca577f,a463b9fd2ac3046b7e669b3549385f962a2482f5,org.apache.tika.mime.MimeDetectionTest.testAutosetSupertype,False,[],,,,org.apache.tika.mime.mimetypes.getmimetype(string)@org.apache.tika.mime.mimetypes.forname(string)@org.apache.tika.mime.mimetypes.mimetypes(),"u'diff --git a/tika-core/src/test/java/org/apache/tika/mime/MimeDetectionTest.java b/tika-core/src/test/java/org/apache/tika/mime/MimeDetectionTest.java\nindex 2e38907c7..f56f7868d 100644\n--- a/tika-core/src/test/java/org/apache/tika/mime/MimeDetectionTest.java\n+++ b/tika-core/src/test/java/org/apache/tika/mime/MimeDetectionTest.java\n@@ -48,6 +48,15 @@ public class MimeDetectionTest extends TestCase {\n         testFile(""application/xml"", ""test-long-comment.xml"");\n         testFile(""application/xslt+xml"", ""stylesheet.xsl"");\n     }\n+    \n+    public void testAutosetSupertype() throws MimeTypeException {\n+    \tMimeTypes types = new MimeTypes();\n+    \tMimeType type = types.forName(""application/something+xml"");\n+    \tassertEquals(""application/xml"", type.getSuperType().getName());\n+    \t\n+    \ttype = types.forName(""text/something"");\n+    \tassertEquals(""text/plain"", type.getSuperType().getName());\n+    }\n \n     private void testFile(String expected, String filename) throws IOException {\n         InputStream in = getClass().getResourceAsStream(filename);'"
True,Regression,275,tika-parsers,120c23875a61e1946125c37931b980964fe24d2a,a68d61cc30e6508264365b7838ef34a92acbdfec,org.apache.tika.parser.asm.ClassParserTest.testClassParsing,False,[],,,,org.apache.tika.parser.autodetectparser.autodetectparser()@org.apache.tika.config.tikaconfig.getdefaultconfig(parser),u''
True,Regression,269,tika-parsers,da2fb0cba8d5aeba3d8243364653f3a7baf604e7,9cfb4e1dad83854a9da85bcfc5aaae30b16ea73f,org.apache.tika.parser.asm.ClassParserTest.testClassParsing,False,[],,,,org.apache.tika.tika.tika(tikaconfig)@org.apache.tika.tika.tika(),u''
True,Regression,258,tika-parsers,15c83430df273aae65170d25ed95f4df62858de2,f04edc5024a25ce5ce6d178fd8027b62ecc58b40,org.apache.tika.parser.asm.ClassParserTest.testClassParsing,False,[],,,,org.apache.tika.parser.autodetectparser.setconfig(tikaconfig)@org.apache.tika.parser.autodetectparser.setmimetypes(mimetypes),u''
True,Regression,253,tika-parsers,0236e017be19e614f34660b0db892ef00cb1a3c9,226aaf44dd50986d1001eab68587669b7cbbebef,org.apache.tika.mime.TestMimeTypes.testGuessMimeTypes,False,[],,,,org.apache.tika.parser.microsoft.ooxml.xwpfwordextractordecorator.xwpfwordextractordecorator(xwpfwordextractor)@org.apache.tika.parser.microsoft.ooxml.metadataextractor.extract(metadata)@org.apache.tika.parser.microsoft.ooxml.abstractooxmlextractor.getmetadataextractor()@org.apache.tika.parser.microsoft.ooxml.xssfexcelextractordecorator.xssfexcelextractordecorator(xssfexcelextractor),"u'diff --git a/tika-parsers/src/test/java/org/apache/tika/mime/TestMimeTypes.java b/tika-parsers/src/test/java/org/apache/tika/mime/TestMimeTypes.java\nindex a400838e3..37608f5b5 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/mime/TestMimeTypes.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/mime/TestMimeTypes.java\n@@ -84,12 +84,38 @@ public class TestMimeTypes extends TestCase {\n         assertTypeByName(""text/html"", ""x.html"");\n         assertTypeByName(""application/xhtml+xml"", ""x.xhtml"");\n         assertTypeByName(""application/xml"", ""x.xml"");\n-        assertTypeByName(""application/msword"", ""x.doc"");\n-        assertTypeByName(""application/vnd.ms-powerpoint"", ""x.ppt"");\n-        assertTypeByName(""application/vnd.ms-excel"", ""x.xls"");\n         assertTypeByName(""application/zip"", ""x.zip"");\n         assertTypeByName(""application/vnd.oasis.opendocument.text"", ""x.odt"");\n         assertTypeByName(""application/octet-stream"", ""x.xyz"");\n+\n+        // Test for the MS Office media types and file extensions listed in\n+        // http://blogs.msdn.com/vsofficedeveloper/pages/Office-2007-Open-XML-MIME-Types.aspx\n+        assertTypeByName(""application/msword"", ""x.doc"");\n+        assertTypeByName(""application/msword"", ""x.dot"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.wordprocessingml.document"", ""x.docx"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.wordprocessingml.template"", ""x.dotx"");\n+        assertTypeByName(""application/vnd.ms-word.document.macroenabled.12"", ""x.docm"");\n+        assertTypeByName(""application/vnd.ms-word.template.macroenabled.12"", ""x.dotm"");\n+        assertTypeByName(""application/vnd.ms-excel"", ""x.xls"");\n+        assertTypeByName(""application/vnd.ms-excel"", ""x.xlt"");\n+        assertTypeByName(""application/vnd.ms-excel"", ""x.xla"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"", ""x.xlsx"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.spreadsheetml.template"", ""x.xltx"");\n+        assertTypeByName(""application/vnd.ms-excel.sheet.macroenabled.12"", ""x.xlsm"");\n+        assertTypeByName(""application/vnd.ms-excel.template.macroenabled.12"", ""x.xltm"");\n+        assertTypeByName(""application/vnd.ms-excel.addin.macroenabled.12"", ""x.xlam"");\n+        assertTypeByName(""application/vnd.ms-excel.sheet.binary.macroenabled.12"", ""x.xlsb"");\n+        assertTypeByName(""application/vnd.ms-powerpoint"", ""x.ppt"");\n+        assertTypeByName(""application/vnd.ms-powerpoint"", ""x.pot"");\n+        assertTypeByName(""application/vnd.ms-powerpoint"", ""x.pps"");\n+        assertTypeByName(""application/vnd.ms-powerpoint"", ""x.ppa"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.presentationml.presentation"", ""x.pptx"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.presentationml.template"", ""x.potx"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.presentationml.slideshow"", ""x.ppsx"");\n+        assertTypeByName(""application/vnd.ms-powerpoint.addin.macroenabled.12"", ""x.ppam"");\n+        assertTypeByName(""application/vnd.ms-powerpoint.presentation.macroenabled.12"", ""x.pptm"");\n+        assertTypeByName(""application/vnd.ms-powerpoint.presentation.macroenabled.12"", ""x.potm"");\n+        assertTypeByName(""application/vnd.ms-powerpoint.slideshow.macroenabled.12"", ""x.ppsm"");\n     }\n \n     public void testJpegDetection() throws Exception {\ndiff --git a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java\nindex 63fc6cf94..86be20c60 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java\n@@ -44,7 +44,7 @@ public class OOXMLParserTest extends TestCase {\n             parser.parse(input, handler, metadata);\r\n             \r\n             assertEquals(\r\n-                    ""application/vnd.openxmlformats-package.core-properties+xml"",\r\n+                    ""application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"",\r\n                     metadata.get(Metadata.CONTENT_TYPE));\r\n             assertEquals(""Simple Excel document"", metadata.get(Metadata.TITLE));\r\n             assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\r\n@@ -74,7 +74,7 @@ public class OOXMLParserTest extends TestCase {\n             parser.parse(input, handler, metadata);\r\n             \r\n             assertEquals(\r\n-                    ""application/vnd.openxmlformats-package.core-properties+xml"",\r\n+                    ""application/vnd.openxmlformats-officedocument.presentationml.presentation"",\r\n                     metadata.get(Metadata.CONTENT_TYPE));\r\n             assertEquals(""Sample Powerpoint Slide"", metadata.get(Metadata.TITLE));\r\n             assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\r\n@@ -101,7 +101,7 @@ public class OOXMLParserTest extends TestCase {\n             parser.parse(input, handler, metadata);\r\n             \r\n             assertEquals(\r\n-                    ""application/vnd.openxmlformats-package.core-properties+xml"",\r\n+                    ""application/vnd.openxmlformats-officedocument.wordprocessingml.document"",\r\n                     metadata.get(Metadata.CONTENT_TYPE));\r\n             assertEquals(""Sample Word Document"", metadata.get(Metadata.TITLE));\r\n             assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\r'"
True,Regression,253,tika-parsers,0236e017be19e614f34660b0db892ef00cb1a3c9,226aaf44dd50986d1001eab68587669b7cbbebef,org.apache.tika.parser.microsoft.ooxml.OOXMLParserTest.testWord,False,[],,,,org.apache.tika.parser.microsoft.ooxml.xwpfwordextractordecorator.xwpfwordextractordecorator(xwpfwordextractor)@org.apache.tika.parser.microsoft.ooxml.metadataextractor.extract(metadata)@org.apache.tika.parser.microsoft.ooxml.abstractooxmlextractor.getmetadataextractor()@org.apache.tika.parser.microsoft.ooxml.xssfexcelextractordecorator.xssfexcelextractordecorator(xssfexcelextractor),"u'diff --git a/tika-parsers/src/test/java/org/apache/tika/mime/TestMimeTypes.java b/tika-parsers/src/test/java/org/apache/tika/mime/TestMimeTypes.java\nindex a400838e3..37608f5b5 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/mime/TestMimeTypes.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/mime/TestMimeTypes.java\n@@ -84,12 +84,38 @@ public class TestMimeTypes extends TestCase {\n         assertTypeByName(""text/html"", ""x.html"");\n         assertTypeByName(""application/xhtml+xml"", ""x.xhtml"");\n         assertTypeByName(""application/xml"", ""x.xml"");\n-        assertTypeByName(""application/msword"", ""x.doc"");\n-        assertTypeByName(""application/vnd.ms-powerpoint"", ""x.ppt"");\n-        assertTypeByName(""application/vnd.ms-excel"", ""x.xls"");\n         assertTypeByName(""application/zip"", ""x.zip"");\n         assertTypeByName(""application/vnd.oasis.opendocument.text"", ""x.odt"");\n         assertTypeByName(""application/octet-stream"", ""x.xyz"");\n+\n+        // Test for the MS Office media types and file extensions listed in\n+        // http://blogs.msdn.com/vsofficedeveloper/pages/Office-2007-Open-XML-MIME-Types.aspx\n+        assertTypeByName(""application/msword"", ""x.doc"");\n+        assertTypeByName(""application/msword"", ""x.dot"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.wordprocessingml.document"", ""x.docx"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.wordprocessingml.template"", ""x.dotx"");\n+        assertTypeByName(""application/vnd.ms-word.document.macroenabled.12"", ""x.docm"");\n+        assertTypeByName(""application/vnd.ms-word.template.macroenabled.12"", ""x.dotm"");\n+        assertTypeByName(""application/vnd.ms-excel"", ""x.xls"");\n+        assertTypeByName(""application/vnd.ms-excel"", ""x.xlt"");\n+        assertTypeByName(""application/vnd.ms-excel"", ""x.xla"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"", ""x.xlsx"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.spreadsheetml.template"", ""x.xltx"");\n+        assertTypeByName(""application/vnd.ms-excel.sheet.macroenabled.12"", ""x.xlsm"");\n+        assertTypeByName(""application/vnd.ms-excel.template.macroenabled.12"", ""x.xltm"");\n+        assertTypeByName(""application/vnd.ms-excel.addin.macroenabled.12"", ""x.xlam"");\n+        assertTypeByName(""application/vnd.ms-excel.sheet.binary.macroenabled.12"", ""x.xlsb"");\n+        assertTypeByName(""application/vnd.ms-powerpoint"", ""x.ppt"");\n+        assertTypeByName(""application/vnd.ms-powerpoint"", ""x.pot"");\n+        assertTypeByName(""application/vnd.ms-powerpoint"", ""x.pps"");\n+        assertTypeByName(""application/vnd.ms-powerpoint"", ""x.ppa"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.presentationml.presentation"", ""x.pptx"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.presentationml.template"", ""x.potx"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.presentationml.slideshow"", ""x.ppsx"");\n+        assertTypeByName(""application/vnd.ms-powerpoint.addin.macroenabled.12"", ""x.ppam"");\n+        assertTypeByName(""application/vnd.ms-powerpoint.presentation.macroenabled.12"", ""x.pptm"");\n+        assertTypeByName(""application/vnd.ms-powerpoint.presentation.macroenabled.12"", ""x.potm"");\n+        assertTypeByName(""application/vnd.ms-powerpoint.slideshow.macroenabled.12"", ""x.ppsm"");\n     }\n \n     public void testJpegDetection() throws Exception {\ndiff --git a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java\nindex 63fc6cf94..86be20c60 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java\n@@ -44,7 +44,7 @@ public class OOXMLParserTest extends TestCase {\n             parser.parse(input, handler, metadata);\r\n             \r\n             assertEquals(\r\n-                    ""application/vnd.openxmlformats-package.core-properties+xml"",\r\n+                    ""application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"",\r\n                     metadata.get(Metadata.CONTENT_TYPE));\r\n             assertEquals(""Simple Excel document"", metadata.get(Metadata.TITLE));\r\n             assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\r\n@@ -74,7 +74,7 @@ public class OOXMLParserTest extends TestCase {\n             parser.parse(input, handler, metadata);\r\n             \r\n             assertEquals(\r\n-                    ""application/vnd.openxmlformats-package.core-properties+xml"",\r\n+                    ""application/vnd.openxmlformats-officedocument.presentationml.presentation"",\r\n                     metadata.get(Metadata.CONTENT_TYPE));\r\n             assertEquals(""Sample Powerpoint Slide"", metadata.get(Metadata.TITLE));\r\n             assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\r\n@@ -101,7 +101,7 @@ public class OOXMLParserTest extends TestCase {\n             parser.parse(input, handler, metadata);\r\n             \r\n             assertEquals(\r\n-                    ""application/vnd.openxmlformats-package.core-properties+xml"",\r\n+                    ""application/vnd.openxmlformats-officedocument.wordprocessingml.document"",\r\n                     metadata.get(Metadata.CONTENT_TYPE));\r\n             assertEquals(""Sample Word Document"", metadata.get(Metadata.TITLE));\r\n             assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\r'"
True,Regression,253,tika-parsers,0236e017be19e614f34660b0db892ef00cb1a3c9,226aaf44dd50986d1001eab68587669b7cbbebef,org.apache.tika.parser.microsoft.ooxml.OOXMLParserTest.testExcel,False,[],,,,org.apache.tika.parser.microsoft.ooxml.xwpfwordextractordecorator.xwpfwordextractordecorator(xwpfwordextractor)@org.apache.tika.parser.microsoft.ooxml.metadataextractor.extract(metadata)@org.apache.tika.parser.microsoft.ooxml.abstractooxmlextractor.getmetadataextractor()@org.apache.tika.parser.microsoft.ooxml.xssfexcelextractordecorator.xssfexcelextractordecorator(xssfexcelextractor),"u'diff --git a/tika-parsers/src/test/java/org/apache/tika/mime/TestMimeTypes.java b/tika-parsers/src/test/java/org/apache/tika/mime/TestMimeTypes.java\nindex a400838e3..37608f5b5 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/mime/TestMimeTypes.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/mime/TestMimeTypes.java\n@@ -84,12 +84,38 @@ public class TestMimeTypes extends TestCase {\n         assertTypeByName(""text/html"", ""x.html"");\n         assertTypeByName(""application/xhtml+xml"", ""x.xhtml"");\n         assertTypeByName(""application/xml"", ""x.xml"");\n-        assertTypeByName(""application/msword"", ""x.doc"");\n-        assertTypeByName(""application/vnd.ms-powerpoint"", ""x.ppt"");\n-        assertTypeByName(""application/vnd.ms-excel"", ""x.xls"");\n         assertTypeByName(""application/zip"", ""x.zip"");\n         assertTypeByName(""application/vnd.oasis.opendocument.text"", ""x.odt"");\n         assertTypeByName(""application/octet-stream"", ""x.xyz"");\n+\n+        // Test for the MS Office media types and file extensions listed in\n+        // http://blogs.msdn.com/vsofficedeveloper/pages/Office-2007-Open-XML-MIME-Types.aspx\n+        assertTypeByName(""application/msword"", ""x.doc"");\n+        assertTypeByName(""application/msword"", ""x.dot"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.wordprocessingml.document"", ""x.docx"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.wordprocessingml.template"", ""x.dotx"");\n+        assertTypeByName(""application/vnd.ms-word.document.macroenabled.12"", ""x.docm"");\n+        assertTypeByName(""application/vnd.ms-word.template.macroenabled.12"", ""x.dotm"");\n+        assertTypeByName(""application/vnd.ms-excel"", ""x.xls"");\n+        assertTypeByName(""application/vnd.ms-excel"", ""x.xlt"");\n+        assertTypeByName(""application/vnd.ms-excel"", ""x.xla"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"", ""x.xlsx"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.spreadsheetml.template"", ""x.xltx"");\n+        assertTypeByName(""application/vnd.ms-excel.sheet.macroenabled.12"", ""x.xlsm"");\n+        assertTypeByName(""application/vnd.ms-excel.template.macroenabled.12"", ""x.xltm"");\n+        assertTypeByName(""application/vnd.ms-excel.addin.macroenabled.12"", ""x.xlam"");\n+        assertTypeByName(""application/vnd.ms-excel.sheet.binary.macroenabled.12"", ""x.xlsb"");\n+        assertTypeByName(""application/vnd.ms-powerpoint"", ""x.ppt"");\n+        assertTypeByName(""application/vnd.ms-powerpoint"", ""x.pot"");\n+        assertTypeByName(""application/vnd.ms-powerpoint"", ""x.pps"");\n+        assertTypeByName(""application/vnd.ms-powerpoint"", ""x.ppa"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.presentationml.presentation"", ""x.pptx"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.presentationml.template"", ""x.potx"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.presentationml.slideshow"", ""x.ppsx"");\n+        assertTypeByName(""application/vnd.ms-powerpoint.addin.macroenabled.12"", ""x.ppam"");\n+        assertTypeByName(""application/vnd.ms-powerpoint.presentation.macroenabled.12"", ""x.pptm"");\n+        assertTypeByName(""application/vnd.ms-powerpoint.presentation.macroenabled.12"", ""x.potm"");\n+        assertTypeByName(""application/vnd.ms-powerpoint.slideshow.macroenabled.12"", ""x.ppsm"");\n     }\n \n     public void testJpegDetection() throws Exception {\ndiff --git a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java\nindex 63fc6cf94..86be20c60 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java\n@@ -44,7 +44,7 @@ public class OOXMLParserTest extends TestCase {\n             parser.parse(input, handler, metadata);\r\n             \r\n             assertEquals(\r\n-                    ""application/vnd.openxmlformats-package.core-properties+xml"",\r\n+                    ""application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"",\r\n                     metadata.get(Metadata.CONTENT_TYPE));\r\n             assertEquals(""Simple Excel document"", metadata.get(Metadata.TITLE));\r\n             assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\r\n@@ -74,7 +74,7 @@ public class OOXMLParserTest extends TestCase {\n             parser.parse(input, handler, metadata);\r\n             \r\n             assertEquals(\r\n-                    ""application/vnd.openxmlformats-package.core-properties+xml"",\r\n+                    ""application/vnd.openxmlformats-officedocument.presentationml.presentation"",\r\n                     metadata.get(Metadata.CONTENT_TYPE));\r\n             assertEquals(""Sample Powerpoint Slide"", metadata.get(Metadata.TITLE));\r\n             assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\r\n@@ -101,7 +101,7 @@ public class OOXMLParserTest extends TestCase {\n             parser.parse(input, handler, metadata);\r\n             \r\n             assertEquals(\r\n-                    ""application/vnd.openxmlformats-package.core-properties+xml"",\r\n+                    ""application/vnd.openxmlformats-officedocument.wordprocessingml.document"",\r\n                     metadata.get(Metadata.CONTENT_TYPE));\r\n             assertEquals(""Sample Word Document"", metadata.get(Metadata.TITLE));\r\n             assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\r'"
True,Regression,253,tika-parsers,0236e017be19e614f34660b0db892ef00cb1a3c9,226aaf44dd50986d1001eab68587669b7cbbebef,org.apache.tika.parser.microsoft.ooxml.OOXMLParserTest.testPowerPoint,False,[],,,,org.apache.tika.parser.microsoft.ooxml.xwpfwordextractordecorator.xwpfwordextractordecorator(xwpfwordextractor)@org.apache.tika.parser.microsoft.ooxml.metadataextractor.extract(metadata)@org.apache.tika.parser.microsoft.ooxml.abstractooxmlextractor.getmetadataextractor()@org.apache.tika.parser.microsoft.ooxml.xssfexcelextractordecorator.xssfexcelextractordecorator(xssfexcelextractor),"u'diff --git a/tika-parsers/src/test/java/org/apache/tika/mime/TestMimeTypes.java b/tika-parsers/src/test/java/org/apache/tika/mime/TestMimeTypes.java\nindex a400838e3..37608f5b5 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/mime/TestMimeTypes.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/mime/TestMimeTypes.java\n@@ -84,12 +84,38 @@ public class TestMimeTypes extends TestCase {\n         assertTypeByName(""text/html"", ""x.html"");\n         assertTypeByName(""application/xhtml+xml"", ""x.xhtml"");\n         assertTypeByName(""application/xml"", ""x.xml"");\n-        assertTypeByName(""application/msword"", ""x.doc"");\n-        assertTypeByName(""application/vnd.ms-powerpoint"", ""x.ppt"");\n-        assertTypeByName(""application/vnd.ms-excel"", ""x.xls"");\n         assertTypeByName(""application/zip"", ""x.zip"");\n         assertTypeByName(""application/vnd.oasis.opendocument.text"", ""x.odt"");\n         assertTypeByName(""application/octet-stream"", ""x.xyz"");\n+\n+        // Test for the MS Office media types and file extensions listed in\n+        // http://blogs.msdn.com/vsofficedeveloper/pages/Office-2007-Open-XML-MIME-Types.aspx\n+        assertTypeByName(""application/msword"", ""x.doc"");\n+        assertTypeByName(""application/msword"", ""x.dot"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.wordprocessingml.document"", ""x.docx"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.wordprocessingml.template"", ""x.dotx"");\n+        assertTypeByName(""application/vnd.ms-word.document.macroenabled.12"", ""x.docm"");\n+        assertTypeByName(""application/vnd.ms-word.template.macroenabled.12"", ""x.dotm"");\n+        assertTypeByName(""application/vnd.ms-excel"", ""x.xls"");\n+        assertTypeByName(""application/vnd.ms-excel"", ""x.xlt"");\n+        assertTypeByName(""application/vnd.ms-excel"", ""x.xla"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"", ""x.xlsx"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.spreadsheetml.template"", ""x.xltx"");\n+        assertTypeByName(""application/vnd.ms-excel.sheet.macroenabled.12"", ""x.xlsm"");\n+        assertTypeByName(""application/vnd.ms-excel.template.macroenabled.12"", ""x.xltm"");\n+        assertTypeByName(""application/vnd.ms-excel.addin.macroenabled.12"", ""x.xlam"");\n+        assertTypeByName(""application/vnd.ms-excel.sheet.binary.macroenabled.12"", ""x.xlsb"");\n+        assertTypeByName(""application/vnd.ms-powerpoint"", ""x.ppt"");\n+        assertTypeByName(""application/vnd.ms-powerpoint"", ""x.pot"");\n+        assertTypeByName(""application/vnd.ms-powerpoint"", ""x.pps"");\n+        assertTypeByName(""application/vnd.ms-powerpoint"", ""x.ppa"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.presentationml.presentation"", ""x.pptx"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.presentationml.template"", ""x.potx"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.presentationml.slideshow"", ""x.ppsx"");\n+        assertTypeByName(""application/vnd.ms-powerpoint.addin.macroenabled.12"", ""x.ppam"");\n+        assertTypeByName(""application/vnd.ms-powerpoint.presentation.macroenabled.12"", ""x.pptm"");\n+        assertTypeByName(""application/vnd.ms-powerpoint.presentation.macroenabled.12"", ""x.potm"");\n+        assertTypeByName(""application/vnd.ms-powerpoint.slideshow.macroenabled.12"", ""x.ppsm"");\n     }\n \n     public void testJpegDetection() throws Exception {\ndiff --git a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java\nindex 63fc6cf94..86be20c60 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java\n@@ -44,7 +44,7 @@ public class OOXMLParserTest extends TestCase {\n             parser.parse(input, handler, metadata);\r\n             \r\n             assertEquals(\r\n-                    ""application/vnd.openxmlformats-package.core-properties+xml"",\r\n+                    ""application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"",\r\n                     metadata.get(Metadata.CONTENT_TYPE));\r\n             assertEquals(""Simple Excel document"", metadata.get(Metadata.TITLE));\r\n             assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\r\n@@ -74,7 +74,7 @@ public class OOXMLParserTest extends TestCase {\n             parser.parse(input, handler, metadata);\r\n             \r\n             assertEquals(\r\n-                    ""application/vnd.openxmlformats-package.core-properties+xml"",\r\n+                    ""application/vnd.openxmlformats-officedocument.presentationml.presentation"",\r\n                     metadata.get(Metadata.CONTENT_TYPE));\r\n             assertEquals(""Sample Powerpoint Slide"", metadata.get(Metadata.TITLE));\r\n             assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\r\n@@ -101,7 +101,7 @@ public class OOXMLParserTest extends TestCase {\n             parser.parse(input, handler, metadata);\r\n             \r\n             assertEquals(\r\n-                    ""application/vnd.openxmlformats-package.core-properties+xml"",\r\n+                    ""application/vnd.openxmlformats-officedocument.wordprocessingml.document"",\r\n                     metadata.get(Metadata.CONTENT_TYPE));\r\n             assertEquals(""Sample Word Document"", metadata.get(Metadata.TITLE));\r\n             assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\r'"
True,Regression,253,tika-parsers,0236e017be19e614f34660b0db892ef00cb1a3c9,226aaf44dd50986d1001eab68587669b7cbbebef,org.apache.tika.parser.microsoft.ooxml.OOXMLParserTest.testWord,False,[],,,,org.apache.tika.parser.microsoft.ooxml.xwpfwordextractordecorator.xwpfwordextractordecorator(xwpfwordextractor)@org.apache.tika.parser.microsoft.ooxml.metadataextractor.extract(metadata)@org.apache.tika.parser.microsoft.ooxml.abstractooxmlextractor.getmetadataextractor()@org.apache.tika.parser.microsoft.ooxml.xssfexcelextractordecorator.xssfexcelextractordecorator(xssfexcelextractor),"u'diff --git a/tika-parsers/src/test/java/org/apache/tika/mime/TestMimeTypes.java b/tika-parsers/src/test/java/org/apache/tika/mime/TestMimeTypes.java\nindex a400838e3..37608f5b5 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/mime/TestMimeTypes.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/mime/TestMimeTypes.java\n@@ -84,12 +84,38 @@ public class TestMimeTypes extends TestCase {\n         assertTypeByName(""text/html"", ""x.html"");\n         assertTypeByName(""application/xhtml+xml"", ""x.xhtml"");\n         assertTypeByName(""application/xml"", ""x.xml"");\n-        assertTypeByName(""application/msword"", ""x.doc"");\n-        assertTypeByName(""application/vnd.ms-powerpoint"", ""x.ppt"");\n-        assertTypeByName(""application/vnd.ms-excel"", ""x.xls"");\n         assertTypeByName(""application/zip"", ""x.zip"");\n         assertTypeByName(""application/vnd.oasis.opendocument.text"", ""x.odt"");\n         assertTypeByName(""application/octet-stream"", ""x.xyz"");\n+\n+        // Test for the MS Office media types and file extensions listed in\n+        // http://blogs.msdn.com/vsofficedeveloper/pages/Office-2007-Open-XML-MIME-Types.aspx\n+        assertTypeByName(""application/msword"", ""x.doc"");\n+        assertTypeByName(""application/msword"", ""x.dot"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.wordprocessingml.document"", ""x.docx"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.wordprocessingml.template"", ""x.dotx"");\n+        assertTypeByName(""application/vnd.ms-word.document.macroenabled.12"", ""x.docm"");\n+        assertTypeByName(""application/vnd.ms-word.template.macroenabled.12"", ""x.dotm"");\n+        assertTypeByName(""application/vnd.ms-excel"", ""x.xls"");\n+        assertTypeByName(""application/vnd.ms-excel"", ""x.xlt"");\n+        assertTypeByName(""application/vnd.ms-excel"", ""x.xla"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"", ""x.xlsx"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.spreadsheetml.template"", ""x.xltx"");\n+        assertTypeByName(""application/vnd.ms-excel.sheet.macroenabled.12"", ""x.xlsm"");\n+        assertTypeByName(""application/vnd.ms-excel.template.macroenabled.12"", ""x.xltm"");\n+        assertTypeByName(""application/vnd.ms-excel.addin.macroenabled.12"", ""x.xlam"");\n+        assertTypeByName(""application/vnd.ms-excel.sheet.binary.macroenabled.12"", ""x.xlsb"");\n+        assertTypeByName(""application/vnd.ms-powerpoint"", ""x.ppt"");\n+        assertTypeByName(""application/vnd.ms-powerpoint"", ""x.pot"");\n+        assertTypeByName(""application/vnd.ms-powerpoint"", ""x.pps"");\n+        assertTypeByName(""application/vnd.ms-powerpoint"", ""x.ppa"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.presentationml.presentation"", ""x.pptx"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.presentationml.template"", ""x.potx"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.presentationml.slideshow"", ""x.ppsx"");\n+        assertTypeByName(""application/vnd.ms-powerpoint.addin.macroenabled.12"", ""x.ppam"");\n+        assertTypeByName(""application/vnd.ms-powerpoint.presentation.macroenabled.12"", ""x.pptm"");\n+        assertTypeByName(""application/vnd.ms-powerpoint.presentation.macroenabled.12"", ""x.potm"");\n+        assertTypeByName(""application/vnd.ms-powerpoint.slideshow.macroenabled.12"", ""x.ppsm"");\n     }\n \n     public void testJpegDetection() throws Exception {\ndiff --git a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java\nindex 63fc6cf94..86be20c60 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java\n@@ -44,7 +44,7 @@ public class OOXMLParserTest extends TestCase {\n             parser.parse(input, handler, metadata);\r\n             \r\n             assertEquals(\r\n-                    ""application/vnd.openxmlformats-package.core-properties+xml"",\r\n+                    ""application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"",\r\n                     metadata.get(Metadata.CONTENT_TYPE));\r\n             assertEquals(""Simple Excel document"", metadata.get(Metadata.TITLE));\r\n             assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\r\n@@ -74,7 +74,7 @@ public class OOXMLParserTest extends TestCase {\n             parser.parse(input, handler, metadata);\r\n             \r\n             assertEquals(\r\n-                    ""application/vnd.openxmlformats-package.core-properties+xml"",\r\n+                    ""application/vnd.openxmlformats-officedocument.presentationml.presentation"",\r\n                     metadata.get(Metadata.CONTENT_TYPE));\r\n             assertEquals(""Sample Powerpoint Slide"", metadata.get(Metadata.TITLE));\r\n             assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\r\n@@ -101,7 +101,7 @@ public class OOXMLParserTest extends TestCase {\n             parser.parse(input, handler, metadata);\r\n             \r\n             assertEquals(\r\n-                    ""application/vnd.openxmlformats-package.core-properties+xml"",\r\n+                    ""application/vnd.openxmlformats-officedocument.wordprocessingml.document"",\r\n                     metadata.get(Metadata.CONTENT_TYPE));\r\n             assertEquals(""Sample Word Document"", metadata.get(Metadata.TITLE));\r\n             assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\r'"
True,Regression,253,tika-parsers,0236e017be19e614f34660b0db892ef00cb1a3c9,226aaf44dd50986d1001eab68587669b7cbbebef,org.apache.tika.parser.microsoft.ooxml.OOXMLParserTest.testExcel,False,[],,,,org.apache.tika.parser.microsoft.ooxml.xwpfwordextractordecorator.xwpfwordextractordecorator(xwpfwordextractor)@org.apache.tika.parser.microsoft.ooxml.metadataextractor.extract(metadata)@org.apache.tika.parser.microsoft.ooxml.abstractooxmlextractor.getmetadataextractor()@org.apache.tika.parser.microsoft.ooxml.xssfexcelextractordecorator.xssfexcelextractordecorator(xssfexcelextractor),"u'diff --git a/tika-parsers/src/test/java/org/apache/tika/mime/TestMimeTypes.java b/tika-parsers/src/test/java/org/apache/tika/mime/TestMimeTypes.java\nindex a400838e3..37608f5b5 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/mime/TestMimeTypes.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/mime/TestMimeTypes.java\n@@ -84,12 +84,38 @@ public class TestMimeTypes extends TestCase {\n         assertTypeByName(""text/html"", ""x.html"");\n         assertTypeByName(""application/xhtml+xml"", ""x.xhtml"");\n         assertTypeByName(""application/xml"", ""x.xml"");\n-        assertTypeByName(""application/msword"", ""x.doc"");\n-        assertTypeByName(""application/vnd.ms-powerpoint"", ""x.ppt"");\n-        assertTypeByName(""application/vnd.ms-excel"", ""x.xls"");\n         assertTypeByName(""application/zip"", ""x.zip"");\n         assertTypeByName(""application/vnd.oasis.opendocument.text"", ""x.odt"");\n         assertTypeByName(""application/octet-stream"", ""x.xyz"");\n+\n+        // Test for the MS Office media types and file extensions listed in\n+        // http://blogs.msdn.com/vsofficedeveloper/pages/Office-2007-Open-XML-MIME-Types.aspx\n+        assertTypeByName(""application/msword"", ""x.doc"");\n+        assertTypeByName(""application/msword"", ""x.dot"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.wordprocessingml.document"", ""x.docx"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.wordprocessingml.template"", ""x.dotx"");\n+        assertTypeByName(""application/vnd.ms-word.document.macroenabled.12"", ""x.docm"");\n+        assertTypeByName(""application/vnd.ms-word.template.macroenabled.12"", ""x.dotm"");\n+        assertTypeByName(""application/vnd.ms-excel"", ""x.xls"");\n+        assertTypeByName(""application/vnd.ms-excel"", ""x.xlt"");\n+        assertTypeByName(""application/vnd.ms-excel"", ""x.xla"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"", ""x.xlsx"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.spreadsheetml.template"", ""x.xltx"");\n+        assertTypeByName(""application/vnd.ms-excel.sheet.macroenabled.12"", ""x.xlsm"");\n+        assertTypeByName(""application/vnd.ms-excel.template.macroenabled.12"", ""x.xltm"");\n+        assertTypeByName(""application/vnd.ms-excel.addin.macroenabled.12"", ""x.xlam"");\n+        assertTypeByName(""application/vnd.ms-excel.sheet.binary.macroenabled.12"", ""x.xlsb"");\n+        assertTypeByName(""application/vnd.ms-powerpoint"", ""x.ppt"");\n+        assertTypeByName(""application/vnd.ms-powerpoint"", ""x.pot"");\n+        assertTypeByName(""application/vnd.ms-powerpoint"", ""x.pps"");\n+        assertTypeByName(""application/vnd.ms-powerpoint"", ""x.ppa"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.presentationml.presentation"", ""x.pptx"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.presentationml.template"", ""x.potx"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.presentationml.slideshow"", ""x.ppsx"");\n+        assertTypeByName(""application/vnd.ms-powerpoint.addin.macroenabled.12"", ""x.ppam"");\n+        assertTypeByName(""application/vnd.ms-powerpoint.presentation.macroenabled.12"", ""x.pptm"");\n+        assertTypeByName(""application/vnd.ms-powerpoint.presentation.macroenabled.12"", ""x.potm"");\n+        assertTypeByName(""application/vnd.ms-powerpoint.slideshow.macroenabled.12"", ""x.ppsm"");\n     }\n \n     public void testJpegDetection() throws Exception {\ndiff --git a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java\nindex 63fc6cf94..86be20c60 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java\n@@ -44,7 +44,7 @@ public class OOXMLParserTest extends TestCase {\n             parser.parse(input, handler, metadata);\r\n             \r\n             assertEquals(\r\n-                    ""application/vnd.openxmlformats-package.core-properties+xml"",\r\n+                    ""application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"",\r\n                     metadata.get(Metadata.CONTENT_TYPE));\r\n             assertEquals(""Simple Excel document"", metadata.get(Metadata.TITLE));\r\n             assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\r\n@@ -74,7 +74,7 @@ public class OOXMLParserTest extends TestCase {\n             parser.parse(input, handler, metadata);\r\n             \r\n             assertEquals(\r\n-                    ""application/vnd.openxmlformats-package.core-properties+xml"",\r\n+                    ""application/vnd.openxmlformats-officedocument.presentationml.presentation"",\r\n                     metadata.get(Metadata.CONTENT_TYPE));\r\n             assertEquals(""Sample Powerpoint Slide"", metadata.get(Metadata.TITLE));\r\n             assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\r\n@@ -101,7 +101,7 @@ public class OOXMLParserTest extends TestCase {\n             parser.parse(input, handler, metadata);\r\n             \r\n             assertEquals(\r\n-                    ""application/vnd.openxmlformats-package.core-properties+xml"",\r\n+                    ""application/vnd.openxmlformats-officedocument.wordprocessingml.document"",\r\n                     metadata.get(Metadata.CONTENT_TYPE));\r\n             assertEquals(""Sample Word Document"", metadata.get(Metadata.TITLE));\r\n             assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\r'"
True,Regression,253,tika-parsers,0236e017be19e614f34660b0db892ef00cb1a3c9,226aaf44dd50986d1001eab68587669b7cbbebef,org.apache.tika.parser.microsoft.ooxml.OOXMLParserTest.testPowerPoint,False,[],,,,org.apache.tika.parser.microsoft.ooxml.xwpfwordextractordecorator.xwpfwordextractordecorator(xwpfwordextractor)@org.apache.tika.parser.microsoft.ooxml.metadataextractor.extract(metadata)@org.apache.tika.parser.microsoft.ooxml.abstractooxmlextractor.getmetadataextractor()@org.apache.tika.parser.microsoft.ooxml.xssfexcelextractordecorator.xssfexcelextractordecorator(xssfexcelextractor),"u'diff --git a/tika-parsers/src/test/java/org/apache/tika/mime/TestMimeTypes.java b/tika-parsers/src/test/java/org/apache/tika/mime/TestMimeTypes.java\nindex a400838e3..37608f5b5 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/mime/TestMimeTypes.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/mime/TestMimeTypes.java\n@@ -84,12 +84,38 @@ public class TestMimeTypes extends TestCase {\n         assertTypeByName(""text/html"", ""x.html"");\n         assertTypeByName(""application/xhtml+xml"", ""x.xhtml"");\n         assertTypeByName(""application/xml"", ""x.xml"");\n-        assertTypeByName(""application/msword"", ""x.doc"");\n-        assertTypeByName(""application/vnd.ms-powerpoint"", ""x.ppt"");\n-        assertTypeByName(""application/vnd.ms-excel"", ""x.xls"");\n         assertTypeByName(""application/zip"", ""x.zip"");\n         assertTypeByName(""application/vnd.oasis.opendocument.text"", ""x.odt"");\n         assertTypeByName(""application/octet-stream"", ""x.xyz"");\n+\n+        // Test for the MS Office media types and file extensions listed in\n+        // http://blogs.msdn.com/vsofficedeveloper/pages/Office-2007-Open-XML-MIME-Types.aspx\n+        assertTypeByName(""application/msword"", ""x.doc"");\n+        assertTypeByName(""application/msword"", ""x.dot"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.wordprocessingml.document"", ""x.docx"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.wordprocessingml.template"", ""x.dotx"");\n+        assertTypeByName(""application/vnd.ms-word.document.macroenabled.12"", ""x.docm"");\n+        assertTypeByName(""application/vnd.ms-word.template.macroenabled.12"", ""x.dotm"");\n+        assertTypeByName(""application/vnd.ms-excel"", ""x.xls"");\n+        assertTypeByName(""application/vnd.ms-excel"", ""x.xlt"");\n+        assertTypeByName(""application/vnd.ms-excel"", ""x.xla"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"", ""x.xlsx"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.spreadsheetml.template"", ""x.xltx"");\n+        assertTypeByName(""application/vnd.ms-excel.sheet.macroenabled.12"", ""x.xlsm"");\n+        assertTypeByName(""application/vnd.ms-excel.template.macroenabled.12"", ""x.xltm"");\n+        assertTypeByName(""application/vnd.ms-excel.addin.macroenabled.12"", ""x.xlam"");\n+        assertTypeByName(""application/vnd.ms-excel.sheet.binary.macroenabled.12"", ""x.xlsb"");\n+        assertTypeByName(""application/vnd.ms-powerpoint"", ""x.ppt"");\n+        assertTypeByName(""application/vnd.ms-powerpoint"", ""x.pot"");\n+        assertTypeByName(""application/vnd.ms-powerpoint"", ""x.pps"");\n+        assertTypeByName(""application/vnd.ms-powerpoint"", ""x.ppa"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.presentationml.presentation"", ""x.pptx"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.presentationml.template"", ""x.potx"");\n+        assertTypeByName(""application/vnd.openxmlformats-officedocument.presentationml.slideshow"", ""x.ppsx"");\n+        assertTypeByName(""application/vnd.ms-powerpoint.addin.macroenabled.12"", ""x.ppam"");\n+        assertTypeByName(""application/vnd.ms-powerpoint.presentation.macroenabled.12"", ""x.pptm"");\n+        assertTypeByName(""application/vnd.ms-powerpoint.presentation.macroenabled.12"", ""x.potm"");\n+        assertTypeByName(""application/vnd.ms-powerpoint.slideshow.macroenabled.12"", ""x.ppsm"");\n     }\n \n     public void testJpegDetection() throws Exception {\ndiff --git a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java\nindex 63fc6cf94..86be20c60 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/parser/microsoft/ooxml/OOXMLParserTest.java\n@@ -44,7 +44,7 @@ public class OOXMLParserTest extends TestCase {\n             parser.parse(input, handler, metadata);\r\n             \r\n             assertEquals(\r\n-                    ""application/vnd.openxmlformats-package.core-properties+xml"",\r\n+                    ""application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"",\r\n                     metadata.get(Metadata.CONTENT_TYPE));\r\n             assertEquals(""Simple Excel document"", metadata.get(Metadata.TITLE));\r\n             assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\r\n@@ -74,7 +74,7 @@ public class OOXMLParserTest extends TestCase {\n             parser.parse(input, handler, metadata);\r\n             \r\n             assertEquals(\r\n-                    ""application/vnd.openxmlformats-package.core-properties+xml"",\r\n+                    ""application/vnd.openxmlformats-officedocument.presentationml.presentation"",\r\n                     metadata.get(Metadata.CONTENT_TYPE));\r\n             assertEquals(""Sample Powerpoint Slide"", metadata.get(Metadata.TITLE));\r\n             assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\r\n@@ -101,7 +101,7 @@ public class OOXMLParserTest extends TestCase {\n             parser.parse(input, handler, metadata);\r\n             \r\n             assertEquals(\r\n-                    ""application/vnd.openxmlformats-package.core-properties+xml"",\r\n+                    ""application/vnd.openxmlformats-officedocument.wordprocessingml.document"",\r\n                     metadata.get(Metadata.CONTENT_TYPE));\r\n             assertEquals(""Sample Word Document"", metadata.get(Metadata.TITLE));\r\n             assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\r'"
True,Regression,238,tika-parsers,fa0955eacb284802417c4a0dbfca48d886c9eafa,fd4a584811f027ba94961126e5832c86759b2267,org.apache.tika.parser.asm.ClassParserTest.testClassParsing,False,[],,,,org.apache.tika.config.tikaconfig.tikaconfig(element)@org.apache.tika.config.tikaconfig.tikaconfig(inputstream)@org.apache.tika.config.tikaconfig.tikaconfig(document)@org.apache.tika.parser.autodetectparser.autodetectparser()@org.apache.tika.config.tikaconfig.getdefaultconfig(),u''
True,Delta,209,tika-core,62697affaf3fb93c5f667f76fe54deb78003ef4e,29af90d132752b20e252f2aa275129e343082771,org.apache.tika.language.TestLanguageIdentifier.testIdentify,False,[],,,,org.apache.tika.language.languageidentifier.languageidentifier(),"u'diff --git a/tika-core/src/test/java/org/apache/tika/language/TestLanguageIdentifier.java b/tika-core/src/test/java/org/apache/tika/language/TestLanguageIdentifier.java\nindex fb370aa91..c90d4483f 100644\n--- a/tika-core/src/test/java/org/apache/tika/language/TestLanguageIdentifier.java\n+++ b/tika-core/src/test/java/org/apache/tika/language/TestLanguageIdentifier.java\n@@ -180,8 +180,7 @@ public class TestLanguageIdentifier extends TestCase {\n     }\n   }\n \n-    // Disable until the resource files are properly located\n-    public void disabledTtestIdentify() {\n+    public void testIdentify() {\n         try {\n             long total = 0;\n             LanguageIdentifier idfr = new LanguageIdentifier();'"
True,Delta,209,tika-core,62697affaf3fb93c5f667f76fe54deb78003ef4e,29af90d132752b20e252f2aa275129e343082771,org.apache.tika.language.TestLanguageIdentifier.testIdentify,False,[],,,,org.apache.tika.language.languageidentifier.languageidentifier(),"u'diff --git a/tika-core/src/test/java/org/apache/tika/language/TestLanguageIdentifier.java b/tika-core/src/test/java/org/apache/tika/language/TestLanguageIdentifier.java\nindex fb370aa91..c90d4483f 100644\n--- a/tika-core/src/test/java/org/apache/tika/language/TestLanguageIdentifier.java\n+++ b/tika-core/src/test/java/org/apache/tika/language/TestLanguageIdentifier.java\n@@ -180,8 +180,7 @@ public class TestLanguageIdentifier extends TestCase {\n     }\n   }\n \n-    // Disable until the resource files are properly located\n-    public void disabledTtestIdentify() {\n+    public void testIdentify() {\n         try {\n             long total = 0;\n             LanguageIdentifier idfr = new LanguageIdentifier();'"
True,Delta,121,tika-parsers,acf76a64d81eb9c901d92fe718c0f0ffb4d14ced,15c83430df273aae65170d25ed95f4df62858de2,org.apache.tika.mime.MediaTypeTest.testParseWithParams,False,[],,,,org.apache.tika.mime.mediatype.parse(string),"u'diff --git a/tika-parsers/src/test/java/org/apache/tika/mime/MediaTypeTest.java b/tika-parsers/src/test/java/org/apache/tika/mime/MediaTypeTest.java\nindex 657fdf1ca..f6194e0bf 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/mime/MediaTypeTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/mime/MediaTypeTest.java\n@@ -106,6 +106,55 @@ public class MediaTypeTest extends TestCase {\n                 + ""; c=\\""\\\\(\\\\)\\\\<\\\\>\\\\@\\\\,\\\\;\\\\:\\\\\\\\\\\\\\""\\\\/\\\\[\\\\]\\\\?\\\\=\\"""",\n                 new MediaType(""text"", ""plain"", parameters).toString());\n     }\n+    \n+    /**\n+     * @since TIKA-121\n+     */\n+    public void testParseWithParams() {\n+        String mimeStringWithParams = ""text/html;charset=UTF-8;foo=bar;foo2=bar2"";\n+\n+        MediaType type = MediaType.parse(mimeStringWithParams);\n+        assertNotNull(type);\n+        assertNotNull(type.getParameters());\n+        assertNotNull(type.getParameters().keySet());\n+        assertEquals(3, type.getParameters().keySet().size());\n+        boolean gotCharset = false, gotFoo = false, gotFoo2 = false;\n+        for (String param : type.getParameters().keySet()) {\n+            if (param.equals(""charset"")) {\n+                gotCharset = true;\n+            } else if (param.equals(""foo"")) {\n+                gotFoo = true;\n+            } else if (param.equals(""foo2"")) {\n+                gotFoo2 = true;\n+            }\n+        }\n+        assertTrue(gotCharset && gotFoo && gotFoo2);\n+    }\n+\n+    /**\n+     * @since TIKA-121\n+     */\n+    public void testParseNoParams() {\n+        String mimeStringNoParams = ""text/html"";\n+\n+        MediaType type = MediaType.parse(mimeStringNoParams);\n+        assertNotNull(type);\n+        assertNotNull(type.getParameters());\n+        assertNotNull(type.getParameters().keySet());\n+        assertEquals(0, type.getParameters().keySet().size());\n+    }\n+\n+    /**\n+     * @since TIKA-121\n+     */\n+    public void testParseNoParamsWithSemi() {\n+        String mimeStringNoParamsWithSemi = ""text/html;"";\n+        MediaType type = MediaType.parse(mimeStringNoParamsWithSemi);\n+        assertNotNull(type);\n+        assertNotNull(type.getParameters());\n+        assertNotNull(type.getParameters().keySet());\n+        assertEquals(0, type.getParameters().keySet().size());\n+    }\n \n     \n }'"
True,Delta,121,tika-parsers,acf76a64d81eb9c901d92fe718c0f0ffb4d14ced,15c83430df273aae65170d25ed95f4df62858de2,org.apache.tika.mime.MediaTypeTest.testParseWithParams,False,[],,,,org.apache.tika.mime.mediatype.parse(string),"u'diff --git a/tika-parsers/src/test/java/org/apache/tika/mime/MediaTypeTest.java b/tika-parsers/src/test/java/org/apache/tika/mime/MediaTypeTest.java\nindex 657fdf1ca..f6194e0bf 100644\n--- a/tika-parsers/src/test/java/org/apache/tika/mime/MediaTypeTest.java\n+++ b/tika-parsers/src/test/java/org/apache/tika/mime/MediaTypeTest.java\n@@ -106,6 +106,55 @@ public class MediaTypeTest extends TestCase {\n                 + ""; c=\\""\\\\(\\\\)\\\\<\\\\>\\\\@\\\\,\\\\;\\\\:\\\\\\\\\\\\\\""\\\\/\\\\[\\\\]\\\\?\\\\=\\"""",\n                 new MediaType(""text"", ""plain"", parameters).toString());\n     }\n+    \n+    /**\n+     * @since TIKA-121\n+     */\n+    public void testParseWithParams() {\n+        String mimeStringWithParams = ""text/html;charset=UTF-8;foo=bar;foo2=bar2"";\n+\n+        MediaType type = MediaType.parse(mimeStringWithParams);\n+        assertNotNull(type);\n+        assertNotNull(type.getParameters());\n+        assertNotNull(type.getParameters().keySet());\n+        assertEquals(3, type.getParameters().keySet().size());\n+        boolean gotCharset = false, gotFoo = false, gotFoo2 = false;\n+        for (String param : type.getParameters().keySet()) {\n+            if (param.equals(""charset"")) {\n+                gotCharset = true;\n+            } else if (param.equals(""foo"")) {\n+                gotFoo = true;\n+            } else if (param.equals(""foo2"")) {\n+                gotFoo2 = true;\n+            }\n+        }\n+        assertTrue(gotCharset && gotFoo && gotFoo2);\n+    }\n+\n+    /**\n+     * @since TIKA-121\n+     */\n+    public void testParseNoParams() {\n+        String mimeStringNoParams = ""text/html"";\n+\n+        MediaType type = MediaType.parse(mimeStringNoParams);\n+        assertNotNull(type);\n+        assertNotNull(type.getParameters());\n+        assertNotNull(type.getParameters().keySet());\n+        assertEquals(0, type.getParameters().keySet().size());\n+    }\n+\n+    /**\n+     * @since TIKA-121\n+     */\n+    public void testParseNoParamsWithSemi() {\n+        String mimeStringNoParamsWithSemi = ""text/html;"";\n+        MediaType type = MediaType.parse(mimeStringNoParamsWithSemi);\n+        assertNotNull(type);\n+        assertNotNull(type.getParameters());\n+        assertNotNull(type.getParameters().keySet());\n+        assertEquals(0, type.getParameters().keySet().size());\n+    }\n \n     \n }'"
True,Regression,121,tika-core,acf76a64d81eb9c901d92fe718c0f0ffb4d14ced,15c83430df273aae65170d25ed95f4df62858de2,org.apache.tika.detect.TypeDetectorTest.testDetect,False,[],,,,org.apache.tika.mime.mediatype.parse(string),"u'diff --git a/tika-core/src/test/java/org/apache/tika/detect/TypeDetectorTest.java b/tika-core/src/test/java/org/apache/tika/detect/TypeDetectorTest.java\nindex 7a914811f..4e1aa3863 100644\n--- a/tika-core/src/test/java/org/apache/tika/detect/TypeDetectorTest.java\n+++ b/tika-core/src/test/java/org/apache/tika/detect/TypeDetectorTest.java\n@@ -17,6 +17,8 @@\n package org.apache.tika.detect;\r\n \r\n import java.io.IOException;\r\n+import java.util.Map;\r\n+import java.util.TreeMap;\r\n \r\n import junit.framework.TestCase;\r\n \r\n@@ -29,13 +31,22 @@ import org.apache.tika.mime.MediaType;\n public class TypeDetectorTest extends TestCase {\r\n \r\n     private Detector detector = new TypeDetector();\r\n+    \r\n+    private static final Map<String, String> params = new\r\n+        TreeMap<String, String>();\r\n+    static{\r\n+        params.put(""a"", ""b"");\r\n+    }\r\n+    \r\n+    private static final MediaType TEXT_PLAIN_A_EQ_B = \r\n+          new MediaType(""text"", ""plain"", params);\r\n \r\n     public void testDetect() {\r\n         assertDetect(MediaType.TEXT_PLAIN, ""text/plain"");\r\n         assertDetect(MediaType.TEXT_PLAIN, ""TEXT/PLAIN"");\r\n         assertDetect(MediaType.TEXT_PLAIN, "" text/\\tplain\\n"");\r\n-        assertDetect(MediaType.TEXT_PLAIN, ""text/plain; a=b"");\r\n-        assertDetect(MediaType.TEXT_PLAIN, ""\\ttext/plain; a=b\\n"");\r\n+        assertDetect(TEXT_PLAIN_A_EQ_B, ""text/plain; a=b"");\r\n+        assertDetect(TEXT_PLAIN_A_EQ_B, ""\\ttext/plain; a=b\\n"");\r\n \r\n         assertDetect(MediaType.OCTET_STREAM, ""text\\\\plain"");\r\n \r'"
True,Delta,107,tika,fa6bb7e3c92145d29cd97820718ece69fd6ffd62,0dd035b9be57a71ba23a29120f1e2153a3178b5b,org.apache.tika.mime.MimeTypeTest.testConstrctor,False,[],,,,org.apache.tika.mime.mimetype.isdescendantof(mimetype)@org.apache.tika.mime.mimetypes.readmagicheader(inputstream)@org.apache.tika.mime.patterns.matches(string)@org.apache.tika.mime.mimetype.setsupertype(mimetype)@org.apache.tika.mime.mimetype.setdescription(string)@org.apache.tika.mime.mimetype.isvalid(string)@org.apache.tika.mime.mimetype.compareto(mimetype),"u'diff --git a/src/test/java/org/apache/tika/mime/MimeTypeTest.java b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\nindex 7eab68fe5..f94f7a4a5 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n@@ -20,6 +20,50 @@ import junit.framework.TestCase;\n \n public class MimeTypeTest extends TestCase {\n \n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test MimeType constructor */\n+    public void testConstrctor() {\n+\n+        // Missing registry\n+        try {\n+            new MimeType(null, ""text/plain"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Missing name\n+        try {\n+            new MimeType(types, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (no slash)\n+        try {\n+            new MimeType(types, ""application"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (not lower case)\n+        try {\n+            new MimeType(types, ""TEXT/PLAIN"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n     public void testIsValidName() {\n         assertTrue(MimeType.isValid(""application/octet-stream""));\n         assertTrue(MimeType.isValid(""text/plain""));\n@@ -35,6 +79,32 @@ public class MimeTypeTest extends TestCase {\n         assertFalse(MimeType.isValid(""application/\\u00f6ctet-stream""));\n         assertFalse(MimeType.isValid(""text/plain;""));\n         assertFalse(MimeType.isValid(""text/plain; charset=UTF-8""));\n+        try {\n+            MimeType.isValid(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setDescription() */\n+    public void testSetDescription() {\n+        try {\n+            text.setDescription(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setSuperType() */\n+    public void testSetSuperType() throws MimeTypeException {\n+        try {\n+            text.setSuperType(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/MimeTypesTest.java b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\nindex ef95d40cc..1270a1bf6 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n@@ -16,6 +16,8 @@\n  */\n package org.apache.tika.mime;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n import junit.framework.TestCase;\n \n public class MimeTypesTest extends TestCase {\n@@ -90,6 +92,13 @@ public class MimeTypesTest extends TestCase {\n \n         assertTrue(html.isDescendantOf(text));\n         assertFalse(text.isDescendantOf(html));\n+\n+        try {\n+            binary.isDescendantOf(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n     public void testCompareTo() {\n@@ -104,6 +113,33 @@ public class MimeTypesTest extends TestCase {\n         assertTrue(html.compareTo(binary) > 0);\n         assertTrue(html.compareTo(text) > 0);\n         assertTrue(html.compareTo(html) == 0);\n+\n+        try {\n+            binary.compareTo(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(byte[]) */\n+    public void testGetMimeType_byteArray() {\n+        try {\n+            types.getMimeType((byte[])null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(InputStream) */\n+    public void testGetMimeType_InputStream() throws IOException {\n+        try {\n+            types.getMimeType((InputStream)null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/PatternsTest.java b/src/test/java/org/apache/tika/mime/PatternsTest.java\nnew file mode 100644\nindex 000000000..1255632ca\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/mime/PatternsTest.java\n@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.mime;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test case for {@link Patterns}.\n+ *\n+ * @version $Id$\n+ */\n+public class PatternsTest extends TestCase {\n+\n+    private Patterns patterns;\n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        patterns = new Patterns();\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test add() */\n+    public void testAdd() throws MimeTypeException {\n+        try {\n+            patterns.add(null, text);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add("""", null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add(null, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test matches() */\n+    public void testMatches() {\n+        try {\n+            patterns.matches(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+}'"
True,Regression,107,tika,fa6bb7e3c92145d29cd97820718ece69fd6ffd62,0dd035b9be57a71ba23a29120f1e2153a3178b5b,org.apache.tika.mime.MimeTypeTest.testIsValidName,False,[],,,,org.apache.tika.mime.mimetype.isdescendantof(mimetype)@org.apache.tika.mime.mimetypes.readmagicheader(inputstream)@org.apache.tika.mime.patterns.matches(string)@org.apache.tika.mime.mimetype.setsupertype(mimetype)@org.apache.tika.mime.mimetype.setdescription(string)@org.apache.tika.mime.mimetype.isvalid(string)@org.apache.tika.mime.mimetype.compareto(mimetype),"u'diff --git a/src/test/java/org/apache/tika/mime/MimeTypeTest.java b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\nindex 7eab68fe5..f94f7a4a5 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n@@ -20,6 +20,50 @@ import junit.framework.TestCase;\n \n public class MimeTypeTest extends TestCase {\n \n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test MimeType constructor */\n+    public void testConstrctor() {\n+\n+        // Missing registry\n+        try {\n+            new MimeType(null, ""text/plain"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Missing name\n+        try {\n+            new MimeType(types, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (no slash)\n+        try {\n+            new MimeType(types, ""application"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (not lower case)\n+        try {\n+            new MimeType(types, ""TEXT/PLAIN"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n     public void testIsValidName() {\n         assertTrue(MimeType.isValid(""application/octet-stream""));\n         assertTrue(MimeType.isValid(""text/plain""));\n@@ -35,6 +79,32 @@ public class MimeTypeTest extends TestCase {\n         assertFalse(MimeType.isValid(""application/\\u00f6ctet-stream""));\n         assertFalse(MimeType.isValid(""text/plain;""));\n         assertFalse(MimeType.isValid(""text/plain; charset=UTF-8""));\n+        try {\n+            MimeType.isValid(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setDescription() */\n+    public void testSetDescription() {\n+        try {\n+            text.setDescription(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setSuperType() */\n+    public void testSetSuperType() throws MimeTypeException {\n+        try {\n+            text.setSuperType(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/MimeTypesTest.java b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\nindex ef95d40cc..1270a1bf6 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n@@ -16,6 +16,8 @@\n  */\n package org.apache.tika.mime;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n import junit.framework.TestCase;\n \n public class MimeTypesTest extends TestCase {\n@@ -90,6 +92,13 @@ public class MimeTypesTest extends TestCase {\n \n         assertTrue(html.isDescendantOf(text));\n         assertFalse(text.isDescendantOf(html));\n+\n+        try {\n+            binary.isDescendantOf(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n     public void testCompareTo() {\n@@ -104,6 +113,33 @@ public class MimeTypesTest extends TestCase {\n         assertTrue(html.compareTo(binary) > 0);\n         assertTrue(html.compareTo(text) > 0);\n         assertTrue(html.compareTo(html) == 0);\n+\n+        try {\n+            binary.compareTo(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(byte[]) */\n+    public void testGetMimeType_byteArray() {\n+        try {\n+            types.getMimeType((byte[])null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(InputStream) */\n+    public void testGetMimeType_InputStream() throws IOException {\n+        try {\n+            types.getMimeType((InputStream)null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/PatternsTest.java b/src/test/java/org/apache/tika/mime/PatternsTest.java\nnew file mode 100644\nindex 000000000..1255632ca\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/mime/PatternsTest.java\n@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.mime;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test case for {@link Patterns}.\n+ *\n+ * @version $Id$\n+ */\n+public class PatternsTest extends TestCase {\n+\n+    private Patterns patterns;\n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        patterns = new Patterns();\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test add() */\n+    public void testAdd() throws MimeTypeException {\n+        try {\n+            patterns.add(null, text);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add("""", null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add(null, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test matches() */\n+    public void testMatches() {\n+        try {\n+            patterns.matches(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+}'"
True,Delta,107,tika,fa6bb7e3c92145d29cd97820718ece69fd6ffd62,0dd035b9be57a71ba23a29120f1e2153a3178b5b,org.apache.tika.mime.MimeTypeTest.testSetSuperType,False,[],,,,org.apache.tika.mime.mimetype.isdescendantof(mimetype)@org.apache.tika.mime.mimetypes.readmagicheader(inputstream)@org.apache.tika.mime.patterns.matches(string)@org.apache.tika.mime.mimetype.setsupertype(mimetype)@org.apache.tika.mime.mimetype.setdescription(string)@org.apache.tika.mime.mimetype.isvalid(string)@org.apache.tika.mime.mimetype.compareto(mimetype),"u'diff --git a/src/test/java/org/apache/tika/mime/MimeTypeTest.java b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\nindex 7eab68fe5..f94f7a4a5 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n@@ -20,6 +20,50 @@ import junit.framework.TestCase;\n \n public class MimeTypeTest extends TestCase {\n \n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test MimeType constructor */\n+    public void testConstrctor() {\n+\n+        // Missing registry\n+        try {\n+            new MimeType(null, ""text/plain"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Missing name\n+        try {\n+            new MimeType(types, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (no slash)\n+        try {\n+            new MimeType(types, ""application"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (not lower case)\n+        try {\n+            new MimeType(types, ""TEXT/PLAIN"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n     public void testIsValidName() {\n         assertTrue(MimeType.isValid(""application/octet-stream""));\n         assertTrue(MimeType.isValid(""text/plain""));\n@@ -35,6 +79,32 @@ public class MimeTypeTest extends TestCase {\n         assertFalse(MimeType.isValid(""application/\\u00f6ctet-stream""));\n         assertFalse(MimeType.isValid(""text/plain;""));\n         assertFalse(MimeType.isValid(""text/plain; charset=UTF-8""));\n+        try {\n+            MimeType.isValid(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setDescription() */\n+    public void testSetDescription() {\n+        try {\n+            text.setDescription(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setSuperType() */\n+    public void testSetSuperType() throws MimeTypeException {\n+        try {\n+            text.setSuperType(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/MimeTypesTest.java b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\nindex ef95d40cc..1270a1bf6 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n@@ -16,6 +16,8 @@\n  */\n package org.apache.tika.mime;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n import junit.framework.TestCase;\n \n public class MimeTypesTest extends TestCase {\n@@ -90,6 +92,13 @@ public class MimeTypesTest extends TestCase {\n \n         assertTrue(html.isDescendantOf(text));\n         assertFalse(text.isDescendantOf(html));\n+\n+        try {\n+            binary.isDescendantOf(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n     public void testCompareTo() {\n@@ -104,6 +113,33 @@ public class MimeTypesTest extends TestCase {\n         assertTrue(html.compareTo(binary) > 0);\n         assertTrue(html.compareTo(text) > 0);\n         assertTrue(html.compareTo(html) == 0);\n+\n+        try {\n+            binary.compareTo(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(byte[]) */\n+    public void testGetMimeType_byteArray() {\n+        try {\n+            types.getMimeType((byte[])null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(InputStream) */\n+    public void testGetMimeType_InputStream() throws IOException {\n+        try {\n+            types.getMimeType((InputStream)null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/PatternsTest.java b/src/test/java/org/apache/tika/mime/PatternsTest.java\nnew file mode 100644\nindex 000000000..1255632ca\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/mime/PatternsTest.java\n@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.mime;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test case for {@link Patterns}.\n+ *\n+ * @version $Id$\n+ */\n+public class PatternsTest extends TestCase {\n+\n+    private Patterns patterns;\n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        patterns = new Patterns();\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test add() */\n+    public void testAdd() throws MimeTypeException {\n+        try {\n+            patterns.add(null, text);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add("""", null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add(null, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test matches() */\n+    public void testMatches() {\n+        try {\n+            patterns.matches(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+}'"
True,Delta,107,tika,fa6bb7e3c92145d29cd97820718ece69fd6ffd62,0dd035b9be57a71ba23a29120f1e2153a3178b5b,org.apache.tika.mime.MimeTypeTest.testSetDescription,False,[],,,,org.apache.tika.mime.mimetype.isdescendantof(mimetype)@org.apache.tika.mime.mimetypes.readmagicheader(inputstream)@org.apache.tika.mime.patterns.matches(string)@org.apache.tika.mime.mimetype.setsupertype(mimetype)@org.apache.tika.mime.mimetype.setdescription(string)@org.apache.tika.mime.mimetype.isvalid(string)@org.apache.tika.mime.mimetype.compareto(mimetype),"u'diff --git a/src/test/java/org/apache/tika/mime/MimeTypeTest.java b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\nindex 7eab68fe5..f94f7a4a5 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n@@ -20,6 +20,50 @@ import junit.framework.TestCase;\n \n public class MimeTypeTest extends TestCase {\n \n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test MimeType constructor */\n+    public void testConstrctor() {\n+\n+        // Missing registry\n+        try {\n+            new MimeType(null, ""text/plain"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Missing name\n+        try {\n+            new MimeType(types, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (no slash)\n+        try {\n+            new MimeType(types, ""application"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (not lower case)\n+        try {\n+            new MimeType(types, ""TEXT/PLAIN"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n     public void testIsValidName() {\n         assertTrue(MimeType.isValid(""application/octet-stream""));\n         assertTrue(MimeType.isValid(""text/plain""));\n@@ -35,6 +79,32 @@ public class MimeTypeTest extends TestCase {\n         assertFalse(MimeType.isValid(""application/\\u00f6ctet-stream""));\n         assertFalse(MimeType.isValid(""text/plain;""));\n         assertFalse(MimeType.isValid(""text/plain; charset=UTF-8""));\n+        try {\n+            MimeType.isValid(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setDescription() */\n+    public void testSetDescription() {\n+        try {\n+            text.setDescription(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setSuperType() */\n+    public void testSetSuperType() throws MimeTypeException {\n+        try {\n+            text.setSuperType(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/MimeTypesTest.java b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\nindex ef95d40cc..1270a1bf6 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n@@ -16,6 +16,8 @@\n  */\n package org.apache.tika.mime;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n import junit.framework.TestCase;\n \n public class MimeTypesTest extends TestCase {\n@@ -90,6 +92,13 @@ public class MimeTypesTest extends TestCase {\n \n         assertTrue(html.isDescendantOf(text));\n         assertFalse(text.isDescendantOf(html));\n+\n+        try {\n+            binary.isDescendantOf(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n     public void testCompareTo() {\n@@ -104,6 +113,33 @@ public class MimeTypesTest extends TestCase {\n         assertTrue(html.compareTo(binary) > 0);\n         assertTrue(html.compareTo(text) > 0);\n         assertTrue(html.compareTo(html) == 0);\n+\n+        try {\n+            binary.compareTo(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(byte[]) */\n+    public void testGetMimeType_byteArray() {\n+        try {\n+            types.getMimeType((byte[])null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(InputStream) */\n+    public void testGetMimeType_InputStream() throws IOException {\n+        try {\n+            types.getMimeType((InputStream)null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/PatternsTest.java b/src/test/java/org/apache/tika/mime/PatternsTest.java\nnew file mode 100644\nindex 000000000..1255632ca\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/mime/PatternsTest.java\n@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.mime;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test case for {@link Patterns}.\n+ *\n+ * @version $Id$\n+ */\n+public class PatternsTest extends TestCase {\n+\n+    private Patterns patterns;\n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        patterns = new Patterns();\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test add() */\n+    public void testAdd() throws MimeTypeException {\n+        try {\n+            patterns.add(null, text);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add("""", null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add(null, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test matches() */\n+    public void testMatches() {\n+        try {\n+            patterns.matches(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+}'"
True,Delta,107,tika,fa6bb7e3c92145d29cd97820718ece69fd6ffd62,0dd035b9be57a71ba23a29120f1e2153a3178b5b,org.apache.tika.mime.MimeTypesTest.testGetMimeType_byteArray,False,[],,,,org.apache.tika.mime.mimetype.isdescendantof(mimetype)@org.apache.tika.mime.mimetypes.readmagicheader(inputstream)@org.apache.tika.mime.patterns.matches(string)@org.apache.tika.mime.mimetype.setsupertype(mimetype)@org.apache.tika.mime.mimetype.setdescription(string)@org.apache.tika.mime.mimetype.isvalid(string)@org.apache.tika.mime.mimetype.compareto(mimetype),"u'diff --git a/src/test/java/org/apache/tika/mime/MimeTypeTest.java b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\nindex 7eab68fe5..f94f7a4a5 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n@@ -20,6 +20,50 @@ import junit.framework.TestCase;\n \n public class MimeTypeTest extends TestCase {\n \n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test MimeType constructor */\n+    public void testConstrctor() {\n+\n+        // Missing registry\n+        try {\n+            new MimeType(null, ""text/plain"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Missing name\n+        try {\n+            new MimeType(types, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (no slash)\n+        try {\n+            new MimeType(types, ""application"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (not lower case)\n+        try {\n+            new MimeType(types, ""TEXT/PLAIN"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n     public void testIsValidName() {\n         assertTrue(MimeType.isValid(""application/octet-stream""));\n         assertTrue(MimeType.isValid(""text/plain""));\n@@ -35,6 +79,32 @@ public class MimeTypeTest extends TestCase {\n         assertFalse(MimeType.isValid(""application/\\u00f6ctet-stream""));\n         assertFalse(MimeType.isValid(""text/plain;""));\n         assertFalse(MimeType.isValid(""text/plain; charset=UTF-8""));\n+        try {\n+            MimeType.isValid(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setDescription() */\n+    public void testSetDescription() {\n+        try {\n+            text.setDescription(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setSuperType() */\n+    public void testSetSuperType() throws MimeTypeException {\n+        try {\n+            text.setSuperType(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/MimeTypesTest.java b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\nindex ef95d40cc..1270a1bf6 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n@@ -16,6 +16,8 @@\n  */\n package org.apache.tika.mime;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n import junit.framework.TestCase;\n \n public class MimeTypesTest extends TestCase {\n@@ -90,6 +92,13 @@ public class MimeTypesTest extends TestCase {\n \n         assertTrue(html.isDescendantOf(text));\n         assertFalse(text.isDescendantOf(html));\n+\n+        try {\n+            binary.isDescendantOf(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n     public void testCompareTo() {\n@@ -104,6 +113,33 @@ public class MimeTypesTest extends TestCase {\n         assertTrue(html.compareTo(binary) > 0);\n         assertTrue(html.compareTo(text) > 0);\n         assertTrue(html.compareTo(html) == 0);\n+\n+        try {\n+            binary.compareTo(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(byte[]) */\n+    public void testGetMimeType_byteArray() {\n+        try {\n+            types.getMimeType((byte[])null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(InputStream) */\n+    public void testGetMimeType_InputStream() throws IOException {\n+        try {\n+            types.getMimeType((InputStream)null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/PatternsTest.java b/src/test/java/org/apache/tika/mime/PatternsTest.java\nnew file mode 100644\nindex 000000000..1255632ca\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/mime/PatternsTest.java\n@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.mime;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test case for {@link Patterns}.\n+ *\n+ * @version $Id$\n+ */\n+public class PatternsTest extends TestCase {\n+\n+    private Patterns patterns;\n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        patterns = new Patterns();\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test add() */\n+    public void testAdd() throws MimeTypeException {\n+        try {\n+            patterns.add(null, text);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add("""", null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add(null, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test matches() */\n+    public void testMatches() {\n+        try {\n+            patterns.matches(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+}'"
True,Regression,107,tika,fa6bb7e3c92145d29cd97820718ece69fd6ffd62,0dd035b9be57a71ba23a29120f1e2153a3178b5b,org.apache.tika.mime.MimeTypesTest.testIsDescendantOf,False,[],,,,org.apache.tika.mime.mimetype.isdescendantof(mimetype)@org.apache.tika.mime.mimetypes.readmagicheader(inputstream)@org.apache.tika.mime.patterns.matches(string)@org.apache.tika.mime.mimetype.setsupertype(mimetype)@org.apache.tika.mime.mimetype.setdescription(string)@org.apache.tika.mime.mimetype.isvalid(string)@org.apache.tika.mime.mimetype.compareto(mimetype),"u'diff --git a/src/test/java/org/apache/tika/mime/MimeTypeTest.java b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\nindex 7eab68fe5..f94f7a4a5 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n@@ -20,6 +20,50 @@ import junit.framework.TestCase;\n \n public class MimeTypeTest extends TestCase {\n \n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test MimeType constructor */\n+    public void testConstrctor() {\n+\n+        // Missing registry\n+        try {\n+            new MimeType(null, ""text/plain"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Missing name\n+        try {\n+            new MimeType(types, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (no slash)\n+        try {\n+            new MimeType(types, ""application"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (not lower case)\n+        try {\n+            new MimeType(types, ""TEXT/PLAIN"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n     public void testIsValidName() {\n         assertTrue(MimeType.isValid(""application/octet-stream""));\n         assertTrue(MimeType.isValid(""text/plain""));\n@@ -35,6 +79,32 @@ public class MimeTypeTest extends TestCase {\n         assertFalse(MimeType.isValid(""application/\\u00f6ctet-stream""));\n         assertFalse(MimeType.isValid(""text/plain;""));\n         assertFalse(MimeType.isValid(""text/plain; charset=UTF-8""));\n+        try {\n+            MimeType.isValid(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setDescription() */\n+    public void testSetDescription() {\n+        try {\n+            text.setDescription(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setSuperType() */\n+    public void testSetSuperType() throws MimeTypeException {\n+        try {\n+            text.setSuperType(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/MimeTypesTest.java b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\nindex ef95d40cc..1270a1bf6 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n@@ -16,6 +16,8 @@\n  */\n package org.apache.tika.mime;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n import junit.framework.TestCase;\n \n public class MimeTypesTest extends TestCase {\n@@ -90,6 +92,13 @@ public class MimeTypesTest extends TestCase {\n \n         assertTrue(html.isDescendantOf(text));\n         assertFalse(text.isDescendantOf(html));\n+\n+        try {\n+            binary.isDescendantOf(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n     public void testCompareTo() {\n@@ -104,6 +113,33 @@ public class MimeTypesTest extends TestCase {\n         assertTrue(html.compareTo(binary) > 0);\n         assertTrue(html.compareTo(text) > 0);\n         assertTrue(html.compareTo(html) == 0);\n+\n+        try {\n+            binary.compareTo(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(byte[]) */\n+    public void testGetMimeType_byteArray() {\n+        try {\n+            types.getMimeType((byte[])null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(InputStream) */\n+    public void testGetMimeType_InputStream() throws IOException {\n+        try {\n+            types.getMimeType((InputStream)null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/PatternsTest.java b/src/test/java/org/apache/tika/mime/PatternsTest.java\nnew file mode 100644\nindex 000000000..1255632ca\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/mime/PatternsTest.java\n@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.mime;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test case for {@link Patterns}.\n+ *\n+ * @version $Id$\n+ */\n+public class PatternsTest extends TestCase {\n+\n+    private Patterns patterns;\n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        patterns = new Patterns();\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test add() */\n+    public void testAdd() throws MimeTypeException {\n+        try {\n+            patterns.add(null, text);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add("""", null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add(null, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test matches() */\n+    public void testMatches() {\n+        try {\n+            patterns.matches(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+}'"
True,Regression,107,tika,fa6bb7e3c92145d29cd97820718ece69fd6ffd62,0dd035b9be57a71ba23a29120f1e2153a3178b5b,org.apache.tika.mime.MimeTypesTest.testCompareTo,False,[],,,,org.apache.tika.mime.mimetype.isdescendantof(mimetype)@org.apache.tika.mime.mimetypes.readmagicheader(inputstream)@org.apache.tika.mime.patterns.matches(string)@org.apache.tika.mime.mimetype.setsupertype(mimetype)@org.apache.tika.mime.mimetype.setdescription(string)@org.apache.tika.mime.mimetype.isvalid(string)@org.apache.tika.mime.mimetype.compareto(mimetype),"u'diff --git a/src/test/java/org/apache/tika/mime/MimeTypeTest.java b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\nindex 7eab68fe5..f94f7a4a5 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n@@ -20,6 +20,50 @@ import junit.framework.TestCase;\n \n public class MimeTypeTest extends TestCase {\n \n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test MimeType constructor */\n+    public void testConstrctor() {\n+\n+        // Missing registry\n+        try {\n+            new MimeType(null, ""text/plain"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Missing name\n+        try {\n+            new MimeType(types, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (no slash)\n+        try {\n+            new MimeType(types, ""application"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (not lower case)\n+        try {\n+            new MimeType(types, ""TEXT/PLAIN"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n     public void testIsValidName() {\n         assertTrue(MimeType.isValid(""application/octet-stream""));\n         assertTrue(MimeType.isValid(""text/plain""));\n@@ -35,6 +79,32 @@ public class MimeTypeTest extends TestCase {\n         assertFalse(MimeType.isValid(""application/\\u00f6ctet-stream""));\n         assertFalse(MimeType.isValid(""text/plain;""));\n         assertFalse(MimeType.isValid(""text/plain; charset=UTF-8""));\n+        try {\n+            MimeType.isValid(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setDescription() */\n+    public void testSetDescription() {\n+        try {\n+            text.setDescription(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setSuperType() */\n+    public void testSetSuperType() throws MimeTypeException {\n+        try {\n+            text.setSuperType(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/MimeTypesTest.java b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\nindex ef95d40cc..1270a1bf6 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n@@ -16,6 +16,8 @@\n  */\n package org.apache.tika.mime;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n import junit.framework.TestCase;\n \n public class MimeTypesTest extends TestCase {\n@@ -90,6 +92,13 @@ public class MimeTypesTest extends TestCase {\n \n         assertTrue(html.isDescendantOf(text));\n         assertFalse(text.isDescendantOf(html));\n+\n+        try {\n+            binary.isDescendantOf(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n     public void testCompareTo() {\n@@ -104,6 +113,33 @@ public class MimeTypesTest extends TestCase {\n         assertTrue(html.compareTo(binary) > 0);\n         assertTrue(html.compareTo(text) > 0);\n         assertTrue(html.compareTo(html) == 0);\n+\n+        try {\n+            binary.compareTo(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(byte[]) */\n+    public void testGetMimeType_byteArray() {\n+        try {\n+            types.getMimeType((byte[])null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(InputStream) */\n+    public void testGetMimeType_InputStream() throws IOException {\n+        try {\n+            types.getMimeType((InputStream)null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/PatternsTest.java b/src/test/java/org/apache/tika/mime/PatternsTest.java\nnew file mode 100644\nindex 000000000..1255632ca\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/mime/PatternsTest.java\n@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.mime;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test case for {@link Patterns}.\n+ *\n+ * @version $Id$\n+ */\n+public class PatternsTest extends TestCase {\n+\n+    private Patterns patterns;\n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        patterns = new Patterns();\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test add() */\n+    public void testAdd() throws MimeTypeException {\n+        try {\n+            patterns.add(null, text);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add("""", null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add(null, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test matches() */\n+    public void testMatches() {\n+        try {\n+            patterns.matches(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+}'"
True,Delta,107,tika,fa6bb7e3c92145d29cd97820718ece69fd6ffd62,0dd035b9be57a71ba23a29120f1e2153a3178b5b,org.apache.tika.mime.MimeTypesTest.testGetMimeType_InputStream,False,[],,,,org.apache.tika.mime.mimetype.isdescendantof(mimetype)@org.apache.tika.mime.mimetypes.readmagicheader(inputstream)@org.apache.tika.mime.patterns.matches(string)@org.apache.tika.mime.mimetype.setsupertype(mimetype)@org.apache.tika.mime.mimetype.setdescription(string)@org.apache.tika.mime.mimetype.isvalid(string)@org.apache.tika.mime.mimetype.compareto(mimetype),"u'diff --git a/src/test/java/org/apache/tika/mime/MimeTypeTest.java b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\nindex 7eab68fe5..f94f7a4a5 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n@@ -20,6 +20,50 @@ import junit.framework.TestCase;\n \n public class MimeTypeTest extends TestCase {\n \n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test MimeType constructor */\n+    public void testConstrctor() {\n+\n+        // Missing registry\n+        try {\n+            new MimeType(null, ""text/plain"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Missing name\n+        try {\n+            new MimeType(types, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (no slash)\n+        try {\n+            new MimeType(types, ""application"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (not lower case)\n+        try {\n+            new MimeType(types, ""TEXT/PLAIN"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n     public void testIsValidName() {\n         assertTrue(MimeType.isValid(""application/octet-stream""));\n         assertTrue(MimeType.isValid(""text/plain""));\n@@ -35,6 +79,32 @@ public class MimeTypeTest extends TestCase {\n         assertFalse(MimeType.isValid(""application/\\u00f6ctet-stream""));\n         assertFalse(MimeType.isValid(""text/plain;""));\n         assertFalse(MimeType.isValid(""text/plain; charset=UTF-8""));\n+        try {\n+            MimeType.isValid(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setDescription() */\n+    public void testSetDescription() {\n+        try {\n+            text.setDescription(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setSuperType() */\n+    public void testSetSuperType() throws MimeTypeException {\n+        try {\n+            text.setSuperType(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/MimeTypesTest.java b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\nindex ef95d40cc..1270a1bf6 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n@@ -16,6 +16,8 @@\n  */\n package org.apache.tika.mime;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n import junit.framework.TestCase;\n \n public class MimeTypesTest extends TestCase {\n@@ -90,6 +92,13 @@ public class MimeTypesTest extends TestCase {\n \n         assertTrue(html.isDescendantOf(text));\n         assertFalse(text.isDescendantOf(html));\n+\n+        try {\n+            binary.isDescendantOf(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n     public void testCompareTo() {\n@@ -104,6 +113,33 @@ public class MimeTypesTest extends TestCase {\n         assertTrue(html.compareTo(binary) > 0);\n         assertTrue(html.compareTo(text) > 0);\n         assertTrue(html.compareTo(html) == 0);\n+\n+        try {\n+            binary.compareTo(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(byte[]) */\n+    public void testGetMimeType_byteArray() {\n+        try {\n+            types.getMimeType((byte[])null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(InputStream) */\n+    public void testGetMimeType_InputStream() throws IOException {\n+        try {\n+            types.getMimeType((InputStream)null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/PatternsTest.java b/src/test/java/org/apache/tika/mime/PatternsTest.java\nnew file mode 100644\nindex 000000000..1255632ca\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/mime/PatternsTest.java\n@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.mime;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test case for {@link Patterns}.\n+ *\n+ * @version $Id$\n+ */\n+public class PatternsTest extends TestCase {\n+\n+    private Patterns patterns;\n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        patterns = new Patterns();\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test add() */\n+    public void testAdd() throws MimeTypeException {\n+        try {\n+            patterns.add(null, text);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add("""", null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add(null, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test matches() */\n+    public void testMatches() {\n+        try {\n+            patterns.matches(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+}'"
True,Delta,107,tika,fa6bb7e3c92145d29cd97820718ece69fd6ffd62,0dd035b9be57a71ba23a29120f1e2153a3178b5b,org.apache.tika.mime.PatternsTest.testAdd,False,[],,,,org.apache.tika.mime.mimetype.isdescendantof(mimetype)@org.apache.tika.mime.mimetypes.readmagicheader(inputstream)@org.apache.tika.mime.patterns.matches(string)@org.apache.tika.mime.mimetype.setsupertype(mimetype)@org.apache.tika.mime.mimetype.setdescription(string)@org.apache.tika.mime.mimetype.isvalid(string)@org.apache.tika.mime.mimetype.compareto(mimetype),"u'diff --git a/src/test/java/org/apache/tika/mime/MimeTypeTest.java b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\nindex 7eab68fe5..f94f7a4a5 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n@@ -20,6 +20,50 @@ import junit.framework.TestCase;\n \n public class MimeTypeTest extends TestCase {\n \n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test MimeType constructor */\n+    public void testConstrctor() {\n+\n+        // Missing registry\n+        try {\n+            new MimeType(null, ""text/plain"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Missing name\n+        try {\n+            new MimeType(types, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (no slash)\n+        try {\n+            new MimeType(types, ""application"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (not lower case)\n+        try {\n+            new MimeType(types, ""TEXT/PLAIN"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n     public void testIsValidName() {\n         assertTrue(MimeType.isValid(""application/octet-stream""));\n         assertTrue(MimeType.isValid(""text/plain""));\n@@ -35,6 +79,32 @@ public class MimeTypeTest extends TestCase {\n         assertFalse(MimeType.isValid(""application/\\u00f6ctet-stream""));\n         assertFalse(MimeType.isValid(""text/plain;""));\n         assertFalse(MimeType.isValid(""text/plain; charset=UTF-8""));\n+        try {\n+            MimeType.isValid(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setDescription() */\n+    public void testSetDescription() {\n+        try {\n+            text.setDescription(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setSuperType() */\n+    public void testSetSuperType() throws MimeTypeException {\n+        try {\n+            text.setSuperType(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/MimeTypesTest.java b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\nindex ef95d40cc..1270a1bf6 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n@@ -16,6 +16,8 @@\n  */\n package org.apache.tika.mime;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n import junit.framework.TestCase;\n \n public class MimeTypesTest extends TestCase {\n@@ -90,6 +92,13 @@ public class MimeTypesTest extends TestCase {\n \n         assertTrue(html.isDescendantOf(text));\n         assertFalse(text.isDescendantOf(html));\n+\n+        try {\n+            binary.isDescendantOf(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n     public void testCompareTo() {\n@@ -104,6 +113,33 @@ public class MimeTypesTest extends TestCase {\n         assertTrue(html.compareTo(binary) > 0);\n         assertTrue(html.compareTo(text) > 0);\n         assertTrue(html.compareTo(html) == 0);\n+\n+        try {\n+            binary.compareTo(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(byte[]) */\n+    public void testGetMimeType_byteArray() {\n+        try {\n+            types.getMimeType((byte[])null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(InputStream) */\n+    public void testGetMimeType_InputStream() throws IOException {\n+        try {\n+            types.getMimeType((InputStream)null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/PatternsTest.java b/src/test/java/org/apache/tika/mime/PatternsTest.java\nnew file mode 100644\nindex 000000000..1255632ca\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/mime/PatternsTest.java\n@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.mime;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test case for {@link Patterns}.\n+ *\n+ * @version $Id$\n+ */\n+public class PatternsTest extends TestCase {\n+\n+    private Patterns patterns;\n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        patterns = new Patterns();\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test add() */\n+    public void testAdd() throws MimeTypeException {\n+        try {\n+            patterns.add(null, text);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add("""", null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add(null, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test matches() */\n+    public void testMatches() {\n+        try {\n+            patterns.matches(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+}'"
True,Delta,107,tika,fa6bb7e3c92145d29cd97820718ece69fd6ffd62,0dd035b9be57a71ba23a29120f1e2153a3178b5b,org.apache.tika.mime.PatternsTest.testMatches,False,[],,,,org.apache.tika.mime.mimetype.isdescendantof(mimetype)@org.apache.tika.mime.mimetypes.readmagicheader(inputstream)@org.apache.tika.mime.patterns.matches(string)@org.apache.tika.mime.mimetype.setsupertype(mimetype)@org.apache.tika.mime.mimetype.setdescription(string)@org.apache.tika.mime.mimetype.isvalid(string)@org.apache.tika.mime.mimetype.compareto(mimetype),"u'diff --git a/src/test/java/org/apache/tika/mime/MimeTypeTest.java b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\nindex 7eab68fe5..f94f7a4a5 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n@@ -20,6 +20,50 @@ import junit.framework.TestCase;\n \n public class MimeTypeTest extends TestCase {\n \n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test MimeType constructor */\n+    public void testConstrctor() {\n+\n+        // Missing registry\n+        try {\n+            new MimeType(null, ""text/plain"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Missing name\n+        try {\n+            new MimeType(types, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (no slash)\n+        try {\n+            new MimeType(types, ""application"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (not lower case)\n+        try {\n+            new MimeType(types, ""TEXT/PLAIN"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n     public void testIsValidName() {\n         assertTrue(MimeType.isValid(""application/octet-stream""));\n         assertTrue(MimeType.isValid(""text/plain""));\n@@ -35,6 +79,32 @@ public class MimeTypeTest extends TestCase {\n         assertFalse(MimeType.isValid(""application/\\u00f6ctet-stream""));\n         assertFalse(MimeType.isValid(""text/plain;""));\n         assertFalse(MimeType.isValid(""text/plain; charset=UTF-8""));\n+        try {\n+            MimeType.isValid(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setDescription() */\n+    public void testSetDescription() {\n+        try {\n+            text.setDescription(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setSuperType() */\n+    public void testSetSuperType() throws MimeTypeException {\n+        try {\n+            text.setSuperType(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/MimeTypesTest.java b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\nindex ef95d40cc..1270a1bf6 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n@@ -16,6 +16,8 @@\n  */\n package org.apache.tika.mime;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n import junit.framework.TestCase;\n \n public class MimeTypesTest extends TestCase {\n@@ -90,6 +92,13 @@ public class MimeTypesTest extends TestCase {\n \n         assertTrue(html.isDescendantOf(text));\n         assertFalse(text.isDescendantOf(html));\n+\n+        try {\n+            binary.isDescendantOf(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n     public void testCompareTo() {\n@@ -104,6 +113,33 @@ public class MimeTypesTest extends TestCase {\n         assertTrue(html.compareTo(binary) > 0);\n         assertTrue(html.compareTo(text) > 0);\n         assertTrue(html.compareTo(html) == 0);\n+\n+        try {\n+            binary.compareTo(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(byte[]) */\n+    public void testGetMimeType_byteArray() {\n+        try {\n+            types.getMimeType((byte[])null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(InputStream) */\n+    public void testGetMimeType_InputStream() throws IOException {\n+        try {\n+            types.getMimeType((InputStream)null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/PatternsTest.java b/src/test/java/org/apache/tika/mime/PatternsTest.java\nnew file mode 100644\nindex 000000000..1255632ca\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/mime/PatternsTest.java\n@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.mime;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test case for {@link Patterns}.\n+ *\n+ * @version $Id$\n+ */\n+public class PatternsTest extends TestCase {\n+\n+    private Patterns patterns;\n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        patterns = new Patterns();\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test add() */\n+    public void testAdd() throws MimeTypeException {\n+        try {\n+            patterns.add(null, text);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add("""", null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add(null, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test matches() */\n+    public void testMatches() {\n+        try {\n+            patterns.matches(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+}'"
True,Delta,107,tika,fa6bb7e3c92145d29cd97820718ece69fd6ffd62,0dd035b9be57a71ba23a29120f1e2153a3178b5b,org.apache.tika.mime.MimeTypeTest.testConstrctor,False,[],,,,org.apache.tika.mime.mimetype.isdescendantof(mimetype)@org.apache.tika.mime.mimetypes.readmagicheader(inputstream)@org.apache.tika.mime.patterns.matches(string)@org.apache.tika.mime.mimetype.setsupertype(mimetype)@org.apache.tika.mime.mimetype.setdescription(string)@org.apache.tika.mime.mimetype.isvalid(string)@org.apache.tika.mime.mimetype.compareto(mimetype),"u'diff --git a/src/test/java/org/apache/tika/mime/MimeTypeTest.java b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\nindex 7eab68fe5..f94f7a4a5 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n@@ -20,6 +20,50 @@ import junit.framework.TestCase;\n \n public class MimeTypeTest extends TestCase {\n \n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test MimeType constructor */\n+    public void testConstrctor() {\n+\n+        // Missing registry\n+        try {\n+            new MimeType(null, ""text/plain"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Missing name\n+        try {\n+            new MimeType(types, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (no slash)\n+        try {\n+            new MimeType(types, ""application"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (not lower case)\n+        try {\n+            new MimeType(types, ""TEXT/PLAIN"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n     public void testIsValidName() {\n         assertTrue(MimeType.isValid(""application/octet-stream""));\n         assertTrue(MimeType.isValid(""text/plain""));\n@@ -35,6 +79,32 @@ public class MimeTypeTest extends TestCase {\n         assertFalse(MimeType.isValid(""application/\\u00f6ctet-stream""));\n         assertFalse(MimeType.isValid(""text/plain;""));\n         assertFalse(MimeType.isValid(""text/plain; charset=UTF-8""));\n+        try {\n+            MimeType.isValid(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setDescription() */\n+    public void testSetDescription() {\n+        try {\n+            text.setDescription(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setSuperType() */\n+    public void testSetSuperType() throws MimeTypeException {\n+        try {\n+            text.setSuperType(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/MimeTypesTest.java b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\nindex ef95d40cc..1270a1bf6 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n@@ -16,6 +16,8 @@\n  */\n package org.apache.tika.mime;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n import junit.framework.TestCase;\n \n public class MimeTypesTest extends TestCase {\n@@ -90,6 +92,13 @@ public class MimeTypesTest extends TestCase {\n \n         assertTrue(html.isDescendantOf(text));\n         assertFalse(text.isDescendantOf(html));\n+\n+        try {\n+            binary.isDescendantOf(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n     public void testCompareTo() {\n@@ -104,6 +113,33 @@ public class MimeTypesTest extends TestCase {\n         assertTrue(html.compareTo(binary) > 0);\n         assertTrue(html.compareTo(text) > 0);\n         assertTrue(html.compareTo(html) == 0);\n+\n+        try {\n+            binary.compareTo(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(byte[]) */\n+    public void testGetMimeType_byteArray() {\n+        try {\n+            types.getMimeType((byte[])null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(InputStream) */\n+    public void testGetMimeType_InputStream() throws IOException {\n+        try {\n+            types.getMimeType((InputStream)null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/PatternsTest.java b/src/test/java/org/apache/tika/mime/PatternsTest.java\nnew file mode 100644\nindex 000000000..1255632ca\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/mime/PatternsTest.java\n@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.mime;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test case for {@link Patterns}.\n+ *\n+ * @version $Id$\n+ */\n+public class PatternsTest extends TestCase {\n+\n+    private Patterns patterns;\n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        patterns = new Patterns();\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test add() */\n+    public void testAdd() throws MimeTypeException {\n+        try {\n+            patterns.add(null, text);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add("""", null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add(null, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test matches() */\n+    public void testMatches() {\n+        try {\n+            patterns.matches(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+}'"
True,Regression,107,tika,fa6bb7e3c92145d29cd97820718ece69fd6ffd62,0dd035b9be57a71ba23a29120f1e2153a3178b5b,org.apache.tika.mime.MimeTypeTest.testIsValidName,False,[],,,,org.apache.tika.mime.mimetype.isdescendantof(mimetype)@org.apache.tika.mime.mimetypes.readmagicheader(inputstream)@org.apache.tika.mime.patterns.matches(string)@org.apache.tika.mime.mimetype.setsupertype(mimetype)@org.apache.tika.mime.mimetype.setdescription(string)@org.apache.tika.mime.mimetype.isvalid(string)@org.apache.tika.mime.mimetype.compareto(mimetype),"u'diff --git a/src/test/java/org/apache/tika/mime/MimeTypeTest.java b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\nindex 7eab68fe5..f94f7a4a5 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n@@ -20,6 +20,50 @@ import junit.framework.TestCase;\n \n public class MimeTypeTest extends TestCase {\n \n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test MimeType constructor */\n+    public void testConstrctor() {\n+\n+        // Missing registry\n+        try {\n+            new MimeType(null, ""text/plain"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Missing name\n+        try {\n+            new MimeType(types, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (no slash)\n+        try {\n+            new MimeType(types, ""application"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (not lower case)\n+        try {\n+            new MimeType(types, ""TEXT/PLAIN"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n     public void testIsValidName() {\n         assertTrue(MimeType.isValid(""application/octet-stream""));\n         assertTrue(MimeType.isValid(""text/plain""));\n@@ -35,6 +79,32 @@ public class MimeTypeTest extends TestCase {\n         assertFalse(MimeType.isValid(""application/\\u00f6ctet-stream""));\n         assertFalse(MimeType.isValid(""text/plain;""));\n         assertFalse(MimeType.isValid(""text/plain; charset=UTF-8""));\n+        try {\n+            MimeType.isValid(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setDescription() */\n+    public void testSetDescription() {\n+        try {\n+            text.setDescription(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setSuperType() */\n+    public void testSetSuperType() throws MimeTypeException {\n+        try {\n+            text.setSuperType(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/MimeTypesTest.java b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\nindex ef95d40cc..1270a1bf6 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n@@ -16,6 +16,8 @@\n  */\n package org.apache.tika.mime;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n import junit.framework.TestCase;\n \n public class MimeTypesTest extends TestCase {\n@@ -90,6 +92,13 @@ public class MimeTypesTest extends TestCase {\n \n         assertTrue(html.isDescendantOf(text));\n         assertFalse(text.isDescendantOf(html));\n+\n+        try {\n+            binary.isDescendantOf(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n     public void testCompareTo() {\n@@ -104,6 +113,33 @@ public class MimeTypesTest extends TestCase {\n         assertTrue(html.compareTo(binary) > 0);\n         assertTrue(html.compareTo(text) > 0);\n         assertTrue(html.compareTo(html) == 0);\n+\n+        try {\n+            binary.compareTo(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(byte[]) */\n+    public void testGetMimeType_byteArray() {\n+        try {\n+            types.getMimeType((byte[])null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(InputStream) */\n+    public void testGetMimeType_InputStream() throws IOException {\n+        try {\n+            types.getMimeType((InputStream)null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/PatternsTest.java b/src/test/java/org/apache/tika/mime/PatternsTest.java\nnew file mode 100644\nindex 000000000..1255632ca\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/mime/PatternsTest.java\n@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.mime;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test case for {@link Patterns}.\n+ *\n+ * @version $Id$\n+ */\n+public class PatternsTest extends TestCase {\n+\n+    private Patterns patterns;\n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        patterns = new Patterns();\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test add() */\n+    public void testAdd() throws MimeTypeException {\n+        try {\n+            patterns.add(null, text);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add("""", null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add(null, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test matches() */\n+    public void testMatches() {\n+        try {\n+            patterns.matches(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+}'"
True,Delta,107,tika,fa6bb7e3c92145d29cd97820718ece69fd6ffd62,0dd035b9be57a71ba23a29120f1e2153a3178b5b,org.apache.tika.mime.MimeTypeTest.testSetSuperType,False,[],,,,org.apache.tika.mime.mimetype.isdescendantof(mimetype)@org.apache.tika.mime.mimetypes.readmagicheader(inputstream)@org.apache.tika.mime.patterns.matches(string)@org.apache.tika.mime.mimetype.setsupertype(mimetype)@org.apache.tika.mime.mimetype.setdescription(string)@org.apache.tika.mime.mimetype.isvalid(string)@org.apache.tika.mime.mimetype.compareto(mimetype),"u'diff --git a/src/test/java/org/apache/tika/mime/MimeTypeTest.java b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\nindex 7eab68fe5..f94f7a4a5 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n@@ -20,6 +20,50 @@ import junit.framework.TestCase;\n \n public class MimeTypeTest extends TestCase {\n \n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test MimeType constructor */\n+    public void testConstrctor() {\n+\n+        // Missing registry\n+        try {\n+            new MimeType(null, ""text/plain"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Missing name\n+        try {\n+            new MimeType(types, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (no slash)\n+        try {\n+            new MimeType(types, ""application"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (not lower case)\n+        try {\n+            new MimeType(types, ""TEXT/PLAIN"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n     public void testIsValidName() {\n         assertTrue(MimeType.isValid(""application/octet-stream""));\n         assertTrue(MimeType.isValid(""text/plain""));\n@@ -35,6 +79,32 @@ public class MimeTypeTest extends TestCase {\n         assertFalse(MimeType.isValid(""application/\\u00f6ctet-stream""));\n         assertFalse(MimeType.isValid(""text/plain;""));\n         assertFalse(MimeType.isValid(""text/plain; charset=UTF-8""));\n+        try {\n+            MimeType.isValid(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setDescription() */\n+    public void testSetDescription() {\n+        try {\n+            text.setDescription(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setSuperType() */\n+    public void testSetSuperType() throws MimeTypeException {\n+        try {\n+            text.setSuperType(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/MimeTypesTest.java b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\nindex ef95d40cc..1270a1bf6 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n@@ -16,6 +16,8 @@\n  */\n package org.apache.tika.mime;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n import junit.framework.TestCase;\n \n public class MimeTypesTest extends TestCase {\n@@ -90,6 +92,13 @@ public class MimeTypesTest extends TestCase {\n \n         assertTrue(html.isDescendantOf(text));\n         assertFalse(text.isDescendantOf(html));\n+\n+        try {\n+            binary.isDescendantOf(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n     public void testCompareTo() {\n@@ -104,6 +113,33 @@ public class MimeTypesTest extends TestCase {\n         assertTrue(html.compareTo(binary) > 0);\n         assertTrue(html.compareTo(text) > 0);\n         assertTrue(html.compareTo(html) == 0);\n+\n+        try {\n+            binary.compareTo(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(byte[]) */\n+    public void testGetMimeType_byteArray() {\n+        try {\n+            types.getMimeType((byte[])null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(InputStream) */\n+    public void testGetMimeType_InputStream() throws IOException {\n+        try {\n+            types.getMimeType((InputStream)null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/PatternsTest.java b/src/test/java/org/apache/tika/mime/PatternsTest.java\nnew file mode 100644\nindex 000000000..1255632ca\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/mime/PatternsTest.java\n@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.mime;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test case for {@link Patterns}.\n+ *\n+ * @version $Id$\n+ */\n+public class PatternsTest extends TestCase {\n+\n+    private Patterns patterns;\n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        patterns = new Patterns();\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test add() */\n+    public void testAdd() throws MimeTypeException {\n+        try {\n+            patterns.add(null, text);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add("""", null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add(null, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test matches() */\n+    public void testMatches() {\n+        try {\n+            patterns.matches(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+}'"
True,Delta,107,tika,fa6bb7e3c92145d29cd97820718ece69fd6ffd62,0dd035b9be57a71ba23a29120f1e2153a3178b5b,org.apache.tika.mime.MimeTypeTest.testSetDescription,False,[],,,,org.apache.tika.mime.mimetype.isdescendantof(mimetype)@org.apache.tika.mime.mimetypes.readmagicheader(inputstream)@org.apache.tika.mime.patterns.matches(string)@org.apache.tika.mime.mimetype.setsupertype(mimetype)@org.apache.tika.mime.mimetype.setdescription(string)@org.apache.tika.mime.mimetype.isvalid(string)@org.apache.tika.mime.mimetype.compareto(mimetype),"u'diff --git a/src/test/java/org/apache/tika/mime/MimeTypeTest.java b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\nindex 7eab68fe5..f94f7a4a5 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n@@ -20,6 +20,50 @@ import junit.framework.TestCase;\n \n public class MimeTypeTest extends TestCase {\n \n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test MimeType constructor */\n+    public void testConstrctor() {\n+\n+        // Missing registry\n+        try {\n+            new MimeType(null, ""text/plain"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Missing name\n+        try {\n+            new MimeType(types, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (no slash)\n+        try {\n+            new MimeType(types, ""application"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (not lower case)\n+        try {\n+            new MimeType(types, ""TEXT/PLAIN"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n     public void testIsValidName() {\n         assertTrue(MimeType.isValid(""application/octet-stream""));\n         assertTrue(MimeType.isValid(""text/plain""));\n@@ -35,6 +79,32 @@ public class MimeTypeTest extends TestCase {\n         assertFalse(MimeType.isValid(""application/\\u00f6ctet-stream""));\n         assertFalse(MimeType.isValid(""text/plain;""));\n         assertFalse(MimeType.isValid(""text/plain; charset=UTF-8""));\n+        try {\n+            MimeType.isValid(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setDescription() */\n+    public void testSetDescription() {\n+        try {\n+            text.setDescription(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setSuperType() */\n+    public void testSetSuperType() throws MimeTypeException {\n+        try {\n+            text.setSuperType(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/MimeTypesTest.java b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\nindex ef95d40cc..1270a1bf6 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n@@ -16,6 +16,8 @@\n  */\n package org.apache.tika.mime;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n import junit.framework.TestCase;\n \n public class MimeTypesTest extends TestCase {\n@@ -90,6 +92,13 @@ public class MimeTypesTest extends TestCase {\n \n         assertTrue(html.isDescendantOf(text));\n         assertFalse(text.isDescendantOf(html));\n+\n+        try {\n+            binary.isDescendantOf(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n     public void testCompareTo() {\n@@ -104,6 +113,33 @@ public class MimeTypesTest extends TestCase {\n         assertTrue(html.compareTo(binary) > 0);\n         assertTrue(html.compareTo(text) > 0);\n         assertTrue(html.compareTo(html) == 0);\n+\n+        try {\n+            binary.compareTo(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(byte[]) */\n+    public void testGetMimeType_byteArray() {\n+        try {\n+            types.getMimeType((byte[])null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(InputStream) */\n+    public void testGetMimeType_InputStream() throws IOException {\n+        try {\n+            types.getMimeType((InputStream)null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/PatternsTest.java b/src/test/java/org/apache/tika/mime/PatternsTest.java\nnew file mode 100644\nindex 000000000..1255632ca\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/mime/PatternsTest.java\n@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.mime;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test case for {@link Patterns}.\n+ *\n+ * @version $Id$\n+ */\n+public class PatternsTest extends TestCase {\n+\n+    private Patterns patterns;\n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        patterns = new Patterns();\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test add() */\n+    public void testAdd() throws MimeTypeException {\n+        try {\n+            patterns.add(null, text);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add("""", null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add(null, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test matches() */\n+    public void testMatches() {\n+        try {\n+            patterns.matches(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+}'"
True,Delta,107,tika,fa6bb7e3c92145d29cd97820718ece69fd6ffd62,0dd035b9be57a71ba23a29120f1e2153a3178b5b,org.apache.tika.mime.MimeTypesTest.testGetMimeType_byteArray,False,[],,,,org.apache.tika.mime.mimetype.isdescendantof(mimetype)@org.apache.tika.mime.mimetypes.readmagicheader(inputstream)@org.apache.tika.mime.patterns.matches(string)@org.apache.tika.mime.mimetype.setsupertype(mimetype)@org.apache.tika.mime.mimetype.setdescription(string)@org.apache.tika.mime.mimetype.isvalid(string)@org.apache.tika.mime.mimetype.compareto(mimetype),"u'diff --git a/src/test/java/org/apache/tika/mime/MimeTypeTest.java b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\nindex 7eab68fe5..f94f7a4a5 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n@@ -20,6 +20,50 @@ import junit.framework.TestCase;\n \n public class MimeTypeTest extends TestCase {\n \n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test MimeType constructor */\n+    public void testConstrctor() {\n+\n+        // Missing registry\n+        try {\n+            new MimeType(null, ""text/plain"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Missing name\n+        try {\n+            new MimeType(types, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (no slash)\n+        try {\n+            new MimeType(types, ""application"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (not lower case)\n+        try {\n+            new MimeType(types, ""TEXT/PLAIN"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n     public void testIsValidName() {\n         assertTrue(MimeType.isValid(""application/octet-stream""));\n         assertTrue(MimeType.isValid(""text/plain""));\n@@ -35,6 +79,32 @@ public class MimeTypeTest extends TestCase {\n         assertFalse(MimeType.isValid(""application/\\u00f6ctet-stream""));\n         assertFalse(MimeType.isValid(""text/plain;""));\n         assertFalse(MimeType.isValid(""text/plain; charset=UTF-8""));\n+        try {\n+            MimeType.isValid(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setDescription() */\n+    public void testSetDescription() {\n+        try {\n+            text.setDescription(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setSuperType() */\n+    public void testSetSuperType() throws MimeTypeException {\n+        try {\n+            text.setSuperType(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/MimeTypesTest.java b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\nindex ef95d40cc..1270a1bf6 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n@@ -16,6 +16,8 @@\n  */\n package org.apache.tika.mime;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n import junit.framework.TestCase;\n \n public class MimeTypesTest extends TestCase {\n@@ -90,6 +92,13 @@ public class MimeTypesTest extends TestCase {\n \n         assertTrue(html.isDescendantOf(text));\n         assertFalse(text.isDescendantOf(html));\n+\n+        try {\n+            binary.isDescendantOf(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n     public void testCompareTo() {\n@@ -104,6 +113,33 @@ public class MimeTypesTest extends TestCase {\n         assertTrue(html.compareTo(binary) > 0);\n         assertTrue(html.compareTo(text) > 0);\n         assertTrue(html.compareTo(html) == 0);\n+\n+        try {\n+            binary.compareTo(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(byte[]) */\n+    public void testGetMimeType_byteArray() {\n+        try {\n+            types.getMimeType((byte[])null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(InputStream) */\n+    public void testGetMimeType_InputStream() throws IOException {\n+        try {\n+            types.getMimeType((InputStream)null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/PatternsTest.java b/src/test/java/org/apache/tika/mime/PatternsTest.java\nnew file mode 100644\nindex 000000000..1255632ca\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/mime/PatternsTest.java\n@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.mime;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test case for {@link Patterns}.\n+ *\n+ * @version $Id$\n+ */\n+public class PatternsTest extends TestCase {\n+\n+    private Patterns patterns;\n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        patterns = new Patterns();\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test add() */\n+    public void testAdd() throws MimeTypeException {\n+        try {\n+            patterns.add(null, text);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add("""", null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add(null, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test matches() */\n+    public void testMatches() {\n+        try {\n+            patterns.matches(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+}'"
True,Regression,107,tika,fa6bb7e3c92145d29cd97820718ece69fd6ffd62,0dd035b9be57a71ba23a29120f1e2153a3178b5b,org.apache.tika.mime.MimeTypesTest.testIsDescendantOf,False,[],,,,org.apache.tika.mime.mimetype.isdescendantof(mimetype)@org.apache.tika.mime.mimetypes.readmagicheader(inputstream)@org.apache.tika.mime.patterns.matches(string)@org.apache.tika.mime.mimetype.setsupertype(mimetype)@org.apache.tika.mime.mimetype.setdescription(string)@org.apache.tika.mime.mimetype.isvalid(string)@org.apache.tika.mime.mimetype.compareto(mimetype),"u'diff --git a/src/test/java/org/apache/tika/mime/MimeTypeTest.java b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\nindex 7eab68fe5..f94f7a4a5 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n@@ -20,6 +20,50 @@ import junit.framework.TestCase;\n \n public class MimeTypeTest extends TestCase {\n \n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test MimeType constructor */\n+    public void testConstrctor() {\n+\n+        // Missing registry\n+        try {\n+            new MimeType(null, ""text/plain"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Missing name\n+        try {\n+            new MimeType(types, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (no slash)\n+        try {\n+            new MimeType(types, ""application"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (not lower case)\n+        try {\n+            new MimeType(types, ""TEXT/PLAIN"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n     public void testIsValidName() {\n         assertTrue(MimeType.isValid(""application/octet-stream""));\n         assertTrue(MimeType.isValid(""text/plain""));\n@@ -35,6 +79,32 @@ public class MimeTypeTest extends TestCase {\n         assertFalse(MimeType.isValid(""application/\\u00f6ctet-stream""));\n         assertFalse(MimeType.isValid(""text/plain;""));\n         assertFalse(MimeType.isValid(""text/plain; charset=UTF-8""));\n+        try {\n+            MimeType.isValid(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setDescription() */\n+    public void testSetDescription() {\n+        try {\n+            text.setDescription(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setSuperType() */\n+    public void testSetSuperType() throws MimeTypeException {\n+        try {\n+            text.setSuperType(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/MimeTypesTest.java b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\nindex ef95d40cc..1270a1bf6 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n@@ -16,6 +16,8 @@\n  */\n package org.apache.tika.mime;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n import junit.framework.TestCase;\n \n public class MimeTypesTest extends TestCase {\n@@ -90,6 +92,13 @@ public class MimeTypesTest extends TestCase {\n \n         assertTrue(html.isDescendantOf(text));\n         assertFalse(text.isDescendantOf(html));\n+\n+        try {\n+            binary.isDescendantOf(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n     public void testCompareTo() {\n@@ -104,6 +113,33 @@ public class MimeTypesTest extends TestCase {\n         assertTrue(html.compareTo(binary) > 0);\n         assertTrue(html.compareTo(text) > 0);\n         assertTrue(html.compareTo(html) == 0);\n+\n+        try {\n+            binary.compareTo(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(byte[]) */\n+    public void testGetMimeType_byteArray() {\n+        try {\n+            types.getMimeType((byte[])null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(InputStream) */\n+    public void testGetMimeType_InputStream() throws IOException {\n+        try {\n+            types.getMimeType((InputStream)null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/PatternsTest.java b/src/test/java/org/apache/tika/mime/PatternsTest.java\nnew file mode 100644\nindex 000000000..1255632ca\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/mime/PatternsTest.java\n@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.mime;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test case for {@link Patterns}.\n+ *\n+ * @version $Id$\n+ */\n+public class PatternsTest extends TestCase {\n+\n+    private Patterns patterns;\n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        patterns = new Patterns();\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test add() */\n+    public void testAdd() throws MimeTypeException {\n+        try {\n+            patterns.add(null, text);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add("""", null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add(null, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test matches() */\n+    public void testMatches() {\n+        try {\n+            patterns.matches(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+}'"
True,Regression,107,tika,fa6bb7e3c92145d29cd97820718ece69fd6ffd62,0dd035b9be57a71ba23a29120f1e2153a3178b5b,org.apache.tika.mime.MimeTypesTest.testCompareTo,False,[],,,,org.apache.tika.mime.mimetype.isdescendantof(mimetype)@org.apache.tika.mime.mimetypes.readmagicheader(inputstream)@org.apache.tika.mime.patterns.matches(string)@org.apache.tika.mime.mimetype.setsupertype(mimetype)@org.apache.tika.mime.mimetype.setdescription(string)@org.apache.tika.mime.mimetype.isvalid(string)@org.apache.tika.mime.mimetype.compareto(mimetype),"u'diff --git a/src/test/java/org/apache/tika/mime/MimeTypeTest.java b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\nindex 7eab68fe5..f94f7a4a5 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n@@ -20,6 +20,50 @@ import junit.framework.TestCase;\n \n public class MimeTypeTest extends TestCase {\n \n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test MimeType constructor */\n+    public void testConstrctor() {\n+\n+        // Missing registry\n+        try {\n+            new MimeType(null, ""text/plain"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Missing name\n+        try {\n+            new MimeType(types, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (no slash)\n+        try {\n+            new MimeType(types, ""application"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (not lower case)\n+        try {\n+            new MimeType(types, ""TEXT/PLAIN"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n     public void testIsValidName() {\n         assertTrue(MimeType.isValid(""application/octet-stream""));\n         assertTrue(MimeType.isValid(""text/plain""));\n@@ -35,6 +79,32 @@ public class MimeTypeTest extends TestCase {\n         assertFalse(MimeType.isValid(""application/\\u00f6ctet-stream""));\n         assertFalse(MimeType.isValid(""text/plain;""));\n         assertFalse(MimeType.isValid(""text/plain; charset=UTF-8""));\n+        try {\n+            MimeType.isValid(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setDescription() */\n+    public void testSetDescription() {\n+        try {\n+            text.setDescription(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setSuperType() */\n+    public void testSetSuperType() throws MimeTypeException {\n+        try {\n+            text.setSuperType(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/MimeTypesTest.java b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\nindex ef95d40cc..1270a1bf6 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n@@ -16,6 +16,8 @@\n  */\n package org.apache.tika.mime;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n import junit.framework.TestCase;\n \n public class MimeTypesTest extends TestCase {\n@@ -90,6 +92,13 @@ public class MimeTypesTest extends TestCase {\n \n         assertTrue(html.isDescendantOf(text));\n         assertFalse(text.isDescendantOf(html));\n+\n+        try {\n+            binary.isDescendantOf(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n     public void testCompareTo() {\n@@ -104,6 +113,33 @@ public class MimeTypesTest extends TestCase {\n         assertTrue(html.compareTo(binary) > 0);\n         assertTrue(html.compareTo(text) > 0);\n         assertTrue(html.compareTo(html) == 0);\n+\n+        try {\n+            binary.compareTo(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(byte[]) */\n+    public void testGetMimeType_byteArray() {\n+        try {\n+            types.getMimeType((byte[])null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(InputStream) */\n+    public void testGetMimeType_InputStream() throws IOException {\n+        try {\n+            types.getMimeType((InputStream)null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/PatternsTest.java b/src/test/java/org/apache/tika/mime/PatternsTest.java\nnew file mode 100644\nindex 000000000..1255632ca\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/mime/PatternsTest.java\n@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.mime;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test case for {@link Patterns}.\n+ *\n+ * @version $Id$\n+ */\n+public class PatternsTest extends TestCase {\n+\n+    private Patterns patterns;\n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        patterns = new Patterns();\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test add() */\n+    public void testAdd() throws MimeTypeException {\n+        try {\n+            patterns.add(null, text);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add("""", null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add(null, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test matches() */\n+    public void testMatches() {\n+        try {\n+            patterns.matches(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+}'"
True,Delta,107,tika,fa6bb7e3c92145d29cd97820718ece69fd6ffd62,0dd035b9be57a71ba23a29120f1e2153a3178b5b,org.apache.tika.mime.MimeTypesTest.testGetMimeType_InputStream,False,[],,,,org.apache.tika.mime.mimetype.isdescendantof(mimetype)@org.apache.tika.mime.mimetypes.readmagicheader(inputstream)@org.apache.tika.mime.patterns.matches(string)@org.apache.tika.mime.mimetype.setsupertype(mimetype)@org.apache.tika.mime.mimetype.setdescription(string)@org.apache.tika.mime.mimetype.isvalid(string)@org.apache.tika.mime.mimetype.compareto(mimetype),"u'diff --git a/src/test/java/org/apache/tika/mime/MimeTypeTest.java b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\nindex 7eab68fe5..f94f7a4a5 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n@@ -20,6 +20,50 @@ import junit.framework.TestCase;\n \n public class MimeTypeTest extends TestCase {\n \n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test MimeType constructor */\n+    public void testConstrctor() {\n+\n+        // Missing registry\n+        try {\n+            new MimeType(null, ""text/plain"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Missing name\n+        try {\n+            new MimeType(types, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (no slash)\n+        try {\n+            new MimeType(types, ""application"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (not lower case)\n+        try {\n+            new MimeType(types, ""TEXT/PLAIN"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n     public void testIsValidName() {\n         assertTrue(MimeType.isValid(""application/octet-stream""));\n         assertTrue(MimeType.isValid(""text/plain""));\n@@ -35,6 +79,32 @@ public class MimeTypeTest extends TestCase {\n         assertFalse(MimeType.isValid(""application/\\u00f6ctet-stream""));\n         assertFalse(MimeType.isValid(""text/plain;""));\n         assertFalse(MimeType.isValid(""text/plain; charset=UTF-8""));\n+        try {\n+            MimeType.isValid(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setDescription() */\n+    public void testSetDescription() {\n+        try {\n+            text.setDescription(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setSuperType() */\n+    public void testSetSuperType() throws MimeTypeException {\n+        try {\n+            text.setSuperType(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/MimeTypesTest.java b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\nindex ef95d40cc..1270a1bf6 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n@@ -16,6 +16,8 @@\n  */\n package org.apache.tika.mime;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n import junit.framework.TestCase;\n \n public class MimeTypesTest extends TestCase {\n@@ -90,6 +92,13 @@ public class MimeTypesTest extends TestCase {\n \n         assertTrue(html.isDescendantOf(text));\n         assertFalse(text.isDescendantOf(html));\n+\n+        try {\n+            binary.isDescendantOf(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n     public void testCompareTo() {\n@@ -104,6 +113,33 @@ public class MimeTypesTest extends TestCase {\n         assertTrue(html.compareTo(binary) > 0);\n         assertTrue(html.compareTo(text) > 0);\n         assertTrue(html.compareTo(html) == 0);\n+\n+        try {\n+            binary.compareTo(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(byte[]) */\n+    public void testGetMimeType_byteArray() {\n+        try {\n+            types.getMimeType((byte[])null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(InputStream) */\n+    public void testGetMimeType_InputStream() throws IOException {\n+        try {\n+            types.getMimeType((InputStream)null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/PatternsTest.java b/src/test/java/org/apache/tika/mime/PatternsTest.java\nnew file mode 100644\nindex 000000000..1255632ca\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/mime/PatternsTest.java\n@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.mime;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test case for {@link Patterns}.\n+ *\n+ * @version $Id$\n+ */\n+public class PatternsTest extends TestCase {\n+\n+    private Patterns patterns;\n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        patterns = new Patterns();\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test add() */\n+    public void testAdd() throws MimeTypeException {\n+        try {\n+            patterns.add(null, text);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add("""", null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add(null, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test matches() */\n+    public void testMatches() {\n+        try {\n+            patterns.matches(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+}'"
True,Delta,107,tika,fa6bb7e3c92145d29cd97820718ece69fd6ffd62,0dd035b9be57a71ba23a29120f1e2153a3178b5b,org.apache.tika.mime.PatternsTest.testAdd,False,[],,,,org.apache.tika.mime.mimetype.isdescendantof(mimetype)@org.apache.tika.mime.mimetypes.readmagicheader(inputstream)@org.apache.tika.mime.patterns.matches(string)@org.apache.tika.mime.mimetype.setsupertype(mimetype)@org.apache.tika.mime.mimetype.setdescription(string)@org.apache.tika.mime.mimetype.isvalid(string)@org.apache.tika.mime.mimetype.compareto(mimetype),"u'diff --git a/src/test/java/org/apache/tika/mime/MimeTypeTest.java b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\nindex 7eab68fe5..f94f7a4a5 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n@@ -20,6 +20,50 @@ import junit.framework.TestCase;\n \n public class MimeTypeTest extends TestCase {\n \n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test MimeType constructor */\n+    public void testConstrctor() {\n+\n+        // Missing registry\n+        try {\n+            new MimeType(null, ""text/plain"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Missing name\n+        try {\n+            new MimeType(types, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (no slash)\n+        try {\n+            new MimeType(types, ""application"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (not lower case)\n+        try {\n+            new MimeType(types, ""TEXT/PLAIN"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n     public void testIsValidName() {\n         assertTrue(MimeType.isValid(""application/octet-stream""));\n         assertTrue(MimeType.isValid(""text/plain""));\n@@ -35,6 +79,32 @@ public class MimeTypeTest extends TestCase {\n         assertFalse(MimeType.isValid(""application/\\u00f6ctet-stream""));\n         assertFalse(MimeType.isValid(""text/plain;""));\n         assertFalse(MimeType.isValid(""text/plain; charset=UTF-8""));\n+        try {\n+            MimeType.isValid(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setDescription() */\n+    public void testSetDescription() {\n+        try {\n+            text.setDescription(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setSuperType() */\n+    public void testSetSuperType() throws MimeTypeException {\n+        try {\n+            text.setSuperType(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/MimeTypesTest.java b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\nindex ef95d40cc..1270a1bf6 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n@@ -16,6 +16,8 @@\n  */\n package org.apache.tika.mime;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n import junit.framework.TestCase;\n \n public class MimeTypesTest extends TestCase {\n@@ -90,6 +92,13 @@ public class MimeTypesTest extends TestCase {\n \n         assertTrue(html.isDescendantOf(text));\n         assertFalse(text.isDescendantOf(html));\n+\n+        try {\n+            binary.isDescendantOf(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n     public void testCompareTo() {\n@@ -104,6 +113,33 @@ public class MimeTypesTest extends TestCase {\n         assertTrue(html.compareTo(binary) > 0);\n         assertTrue(html.compareTo(text) > 0);\n         assertTrue(html.compareTo(html) == 0);\n+\n+        try {\n+            binary.compareTo(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(byte[]) */\n+    public void testGetMimeType_byteArray() {\n+        try {\n+            types.getMimeType((byte[])null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(InputStream) */\n+    public void testGetMimeType_InputStream() throws IOException {\n+        try {\n+            types.getMimeType((InputStream)null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/PatternsTest.java b/src/test/java/org/apache/tika/mime/PatternsTest.java\nnew file mode 100644\nindex 000000000..1255632ca\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/mime/PatternsTest.java\n@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.mime;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test case for {@link Patterns}.\n+ *\n+ * @version $Id$\n+ */\n+public class PatternsTest extends TestCase {\n+\n+    private Patterns patterns;\n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        patterns = new Patterns();\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test add() */\n+    public void testAdd() throws MimeTypeException {\n+        try {\n+            patterns.add(null, text);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add("""", null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add(null, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test matches() */\n+    public void testMatches() {\n+        try {\n+            patterns.matches(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+}'"
True,Delta,107,tika,fa6bb7e3c92145d29cd97820718ece69fd6ffd62,0dd035b9be57a71ba23a29120f1e2153a3178b5b,org.apache.tika.mime.PatternsTest.testMatches,False,[],,,,org.apache.tika.mime.mimetype.isdescendantof(mimetype)@org.apache.tika.mime.mimetypes.readmagicheader(inputstream)@org.apache.tika.mime.patterns.matches(string)@org.apache.tika.mime.mimetype.setsupertype(mimetype)@org.apache.tika.mime.mimetype.setdescription(string)@org.apache.tika.mime.mimetype.isvalid(string)@org.apache.tika.mime.mimetype.compareto(mimetype),"u'diff --git a/src/test/java/org/apache/tika/mime/MimeTypeTest.java b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\nindex 7eab68fe5..f94f7a4a5 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypeTest.java\n@@ -20,6 +20,50 @@ import junit.framework.TestCase;\n \n public class MimeTypeTest extends TestCase {\n \n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test MimeType constructor */\n+    public void testConstrctor() {\n+\n+        // Missing registry\n+        try {\n+            new MimeType(null, ""text/plain"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Missing name\n+        try {\n+            new MimeType(types, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (no slash)\n+        try {\n+            new MimeType(types, ""application"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+\n+        // Invalid name (not lower case)\n+        try {\n+            new MimeType(types, ""TEXT/PLAIN"");\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n     public void testIsValidName() {\n         assertTrue(MimeType.isValid(""application/octet-stream""));\n         assertTrue(MimeType.isValid(""text/plain""));\n@@ -35,6 +79,32 @@ public class MimeTypeTest extends TestCase {\n         assertFalse(MimeType.isValid(""application/\\u00f6ctet-stream""));\n         assertFalse(MimeType.isValid(""text/plain;""));\n         assertFalse(MimeType.isValid(""text/plain; charset=UTF-8""));\n+        try {\n+            MimeType.isValid(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setDescription() */\n+    public void testSetDescription() {\n+        try {\n+            text.setDescription(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test MimeType setSuperType() */\n+    public void testSetSuperType() throws MimeTypeException {\n+        try {\n+            text.setSuperType(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/MimeTypesTest.java b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\nindex ef95d40cc..1270a1bf6 100644\n--- a/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n+++ b/src/test/java/org/apache/tika/mime/MimeTypesTest.java\n@@ -16,6 +16,8 @@\n  */\n package org.apache.tika.mime;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n import junit.framework.TestCase;\n \n public class MimeTypesTest extends TestCase {\n@@ -90,6 +92,13 @@ public class MimeTypesTest extends TestCase {\n \n         assertTrue(html.isDescendantOf(text));\n         assertFalse(text.isDescendantOf(html));\n+\n+        try {\n+            binary.isDescendantOf(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n     public void testCompareTo() {\n@@ -104,6 +113,33 @@ public class MimeTypesTest extends TestCase {\n         assertTrue(html.compareTo(binary) > 0);\n         assertTrue(html.compareTo(text) > 0);\n         assertTrue(html.compareTo(html) == 0);\n+\n+        try {\n+            binary.compareTo(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(byte[]) */\n+    public void testGetMimeType_byteArray() {\n+        try {\n+            types.getMimeType((byte[])null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test getMimeType(InputStream) */\n+    public void testGetMimeType_InputStream() throws IOException {\n+        try {\n+            types.getMimeType((InputStream)null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n     }\n \n }\ndiff --git a/src/test/java/org/apache/tika/mime/PatternsTest.java b/src/test/java/org/apache/tika/mime/PatternsTest.java\nnew file mode 100644\nindex 000000000..1255632ca\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/mime/PatternsTest.java\n@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.mime;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test case for {@link Patterns}.\n+ *\n+ * @version $Id$\n+ */\n+public class PatternsTest extends TestCase {\n+\n+    private Patterns patterns;\n+    private MimeTypes types;\n+    private MimeType text;\n+\n+    protected void setUp() throws MimeTypeException {\n+        patterns = new Patterns();\n+        types = new MimeTypes();\n+        text = types.forName(""text/plain"");\n+    }\n+\n+    /** Test add() */\n+    public void testAdd() throws MimeTypeException {\n+        try {\n+            patterns.add(null, text);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add("""", null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+        try {\n+            patterns.add(null, null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+\n+    /** Test matches() */\n+    public void testMatches() {\n+        try {\n+            patterns.matches(null);\n+            fail(""Expected IllegalArgumentException"");\n+        } catch (IllegalArgumentException e) {\n+            // expected result\n+        }\n+    }\n+}'"
True,Regression,87,tika,4b126e887da913b559591eed21bebea8d48d2ae9,05b7bb7e19b9c3ca05077abecbf7b7a1d447cdca,org.apache.tika.mime.TestMimeTypes.testMimeDeterminationForTestDocuments,False,[],,,,org.apache.tika.mime.mimetype.equals(object)@org.apache.tika.mime.mimetypes.getmimetype(string)@org.apache.tika.mime.mimetypesreader.readmimeinfo(element)@org.apache.tika.mime.mimetypes.mimetypes()@org.apache.tika.mime.mimetype.addpattern(string)@org.apache.tika.mime.mimetypes.forname(string)@org.apache.tika.mime.mimetype.isvalid(string)@org.apache.tika.mime.mimetypesreader.readmimetype(element)@org.apache.tika.mime.mimetype.hasctrlorspecials(string)@org.apache.tika.mime.mimetypesreader.read(document)@org.apache.tika.mime.mimetype.clean(string)@org.apache.tika.mime.mimetype.addalias(string)@org.apache.tika.mime.mimetypes.add(mimetype)@org.apache.tika.mime.mimetype.mimetype(string),"u'diff --git a/src/test/java/org/apache/tika/mime/TestMimeTypes.java b/src/test/java/org/apache/tika/mime/TestMimeTypes.java\nindex 7f74a8ca0..8806275dd 100644\n--- a/src/test/java/org/apache/tika/mime/TestMimeTypes.java\n+++ b/src/test/java/org/apache/tika/mime/TestMimeTypes.java\n@@ -68,7 +68,7 @@ public class TestMimeTypes extends TestCase {\n         assertEquals(repo.getMimeType(""test.pdF""), type);\n     }\n \n-    public void testLoadMimeTypes() {\n+    public void testLoadMimeTypes() throws MimeTypeException {\n         assertNotNull(repo.forName(""application/octet-stream""));\n         assertNotNull(repo.forName(""text/x-tex""));\n     }\n@@ -137,5 +137,4 @@ public class TestMimeTypes extends TestCase {\n         return type;\n     }\n \n-\n }'"
True,Regression,87,tika,4b126e887da913b559591eed21bebea8d48d2ae9,05b7bb7e19b9c3ca05077abecbf7b7a1d447cdca,org.apache.tika.mime.TestMimeTypes.testMimeDeterminationForTestDocuments,False,[],,,,org.apache.tika.mime.mimetype.equals(object)@org.apache.tika.mime.mimetypes.getmimetype(string)@org.apache.tika.mime.mimetypesreader.readmimeinfo(element)@org.apache.tika.mime.mimetypes.mimetypes()@org.apache.tika.mime.mimetype.addpattern(string)@org.apache.tika.mime.mimetypes.forname(string)@org.apache.tika.mime.mimetype.isvalid(string)@org.apache.tika.mime.mimetypesreader.readmimetype(element)@org.apache.tika.mime.mimetype.hasctrlorspecials(string)@org.apache.tika.mime.mimetypesreader.read(document)@org.apache.tika.mime.mimetype.clean(string)@org.apache.tika.mime.mimetype.addalias(string)@org.apache.tika.mime.mimetypes.add(mimetype)@org.apache.tika.mime.mimetype.mimetype(string),"u'diff --git a/src/test/java/org/apache/tika/mime/TestMimeTypes.java b/src/test/java/org/apache/tika/mime/TestMimeTypes.java\nindex 7f74a8ca0..8806275dd 100644\n--- a/src/test/java/org/apache/tika/mime/TestMimeTypes.java\n+++ b/src/test/java/org/apache/tika/mime/TestMimeTypes.java\n@@ -68,7 +68,7 @@ public class TestMimeTypes extends TestCase {\n         assertEquals(repo.getMimeType(""test.pdF""), type);\n     }\n \n-    public void testLoadMimeTypes() {\n+    public void testLoadMimeTypes() throws MimeTypeException {\n         assertNotNull(repo.forName(""application/octet-stream""));\n         assertNotNull(repo.forName(""text/x-tex""));\n     }\n@@ -137,5 +137,4 @@ public class TestMimeTypes extends TestCase {\n         return type;\n     }\n \n-\n }'"
True,Delta,63,tika,1081cb5beded2bd1228de19f74c6349ca674afed,e759bbbc8afcc8d490562eb08c14a10c509adc20,org.apache.tika.parser.microsoft.ExcelParserTest.testExcelParser,False,[],,,,org.apache.tika.parser.microsoft.excelparser.extracttext(inputstream)@org.apache.tika.parser.microsoft.powerpointparser.extracttext(inputstream),"u'diff --git a/src/test/java/org/apache/tika/parser/microsoft/ExcelParserTest.java b/src/test/java/org/apache/tika/parser/microsoft/ExcelParserTest.java\nnew file mode 100644\nindex 000000000..8642262af\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/parser/microsoft/ExcelParserTest.java\n@@ -0,0 +1,54 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.parser.microsoft;\n+\n+import java.io.InputStream;\n+import java.io.StringWriter;\n+\n+import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.parser.WriteOutContentHandler;\n+import org.xml.sax.ContentHandler;\n+\n+import junit.framework.TestCase;\n+\n+public class ExcelParserTest extends TestCase {\n+\n+    public void testExcelParser() throws Exception {\n+        InputStream input = ExcelParserTest.class.getResourceAsStream(\n+                ""/test-documents/testEXCEL.xls"");\n+        try {\n+            Metadata metadata = new Metadata();\n+            StringWriter writer = new StringWriter();\n+            ContentHandler handler = new WriteOutContentHandler(writer);\n+            new ExcelParser().parse(input, handler, metadata);\n+\n+            assertEquals(\n+                    ""application/vnd.ms-excel"",\n+                    metadata.get(Metadata.CONTENT_TYPE));\n+            assertEquals(""Simple Excel document"", metadata.get(Metadata.TITLE));\n+            assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\n+            String content = writer.toString();\n+            assertTrue(content.contains(""Sample Excel Worksheet""));\n+            assertTrue(content.contains(""Numbers and their Squares""));\n+            assertTrue(content.contains(""9.0""));\n+            assertTrue(content.contains(""196.0""));\n+        } finally {\n+            input.close();\n+        }\n+    }\n+\n+}\ndiff --git a/src/test/java/org/apache/tika/parser/microsoft/PowerPointParserTest.java b/src/test/java/org/apache/tika/parser/microsoft/PowerPointParserTest.java\nnew file mode 100644\nindex 000000000..e4832c5c2\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/parser/microsoft/PowerPointParserTest.java\n@@ -0,0 +1,52 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.parser.microsoft;\n+\n+import java.io.InputStream;\n+import java.io.StringWriter;\n+\n+import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.parser.WriteOutContentHandler;\n+import org.xml.sax.ContentHandler;\n+\n+import junit.framework.TestCase;\n+\n+public class PowerPointParserTest extends TestCase {\n+\n+    public void testPowerPointParser() throws Exception {\n+        InputStream input = PowerPointParserTest.class.getResourceAsStream(\n+                ""/test-documents/testPPT.ppt"");\n+        try {\n+            Metadata metadata = new Metadata();\n+            StringWriter writer = new StringWriter();\n+            ContentHandler handler = new WriteOutContentHandler(writer);\n+            new PowerPointParser().parse(input, handler, metadata);\n+\n+            assertEquals(\n+                    ""application/vnd.ms-powerpoint"",\n+                    metadata.get(Metadata.CONTENT_TYPE));\n+            assertEquals(""Sample Powerpoint Slide"", metadata.get(Metadata.TITLE));\n+            assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\n+            String content = writer.toString();\n+            assertTrue(content.contains(""Sample Powerpoint Slide""));\n+            assertTrue(content.contains(""Powerpoint X for Mac""));\n+        } finally {\n+            input.close();\n+        }\n+    }\n+\n+}\ndiff --git a/src/test/java/org/apache/tika/parser/microsoft/WordParserTest.java b/src/test/java/org/apache/tika/parser/microsoft/WordParserTest.java\nnew file mode 100644\nindex 000000000..1a8e396e6\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/parser/microsoft/WordParserTest.java\n@@ -0,0 +1,51 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.parser.microsoft;\n+\n+import java.io.InputStream;\n+import java.io.StringWriter;\n+\n+import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.parser.WriteOutContentHandler;\n+import org.xml.sax.ContentHandler;\n+\n+import junit.framework.TestCase;\n+\n+public class WordParserTest extends TestCase {\n+\n+    public void testWordParser() throws Exception {\n+        InputStream input = WordParserTest.class.getResourceAsStream(\n+                ""/test-documents/testWORD.doc"");\n+        try {\n+            Metadata metadata = new Metadata();\n+            StringWriter writer = new StringWriter();\n+            ContentHandler handler = new WriteOutContentHandler(writer);\n+            new WordParser().parse(input, handler, metadata);\n+\n+            assertEquals(\n+                    ""application/msword"",\n+                    metadata.get(Metadata.CONTENT_TYPE));\n+            assertEquals(""Sample Word Document"", metadata.get(Metadata.TITLE));\n+            assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\n+            String content = writer.toString();\n+            assertTrue(content.contains(""Sample Word Document""));\n+        } finally {\n+            input.close();\n+        }\n+    }\n+\n+}'"
True,Delta,63,tika,1081cb5beded2bd1228de19f74c6349ca674afed,e759bbbc8afcc8d490562eb08c14a10c509adc20,org.apache.tika.parser.microsoft.PowerPointParserTest.testPowerPointParser,False,[],,,,org.apache.tika.parser.microsoft.excelparser.extracttext(inputstream)@org.apache.tika.parser.microsoft.powerpointparser.extracttext(inputstream),"u'diff --git a/src/test/java/org/apache/tika/parser/microsoft/ExcelParserTest.java b/src/test/java/org/apache/tika/parser/microsoft/ExcelParserTest.java\nnew file mode 100644\nindex 000000000..8642262af\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/parser/microsoft/ExcelParserTest.java\n@@ -0,0 +1,54 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.parser.microsoft;\n+\n+import java.io.InputStream;\n+import java.io.StringWriter;\n+\n+import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.parser.WriteOutContentHandler;\n+import org.xml.sax.ContentHandler;\n+\n+import junit.framework.TestCase;\n+\n+public class ExcelParserTest extends TestCase {\n+\n+    public void testExcelParser() throws Exception {\n+        InputStream input = ExcelParserTest.class.getResourceAsStream(\n+                ""/test-documents/testEXCEL.xls"");\n+        try {\n+            Metadata metadata = new Metadata();\n+            StringWriter writer = new StringWriter();\n+            ContentHandler handler = new WriteOutContentHandler(writer);\n+            new ExcelParser().parse(input, handler, metadata);\n+\n+            assertEquals(\n+                    ""application/vnd.ms-excel"",\n+                    metadata.get(Metadata.CONTENT_TYPE));\n+            assertEquals(""Simple Excel document"", metadata.get(Metadata.TITLE));\n+            assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\n+            String content = writer.toString();\n+            assertTrue(content.contains(""Sample Excel Worksheet""));\n+            assertTrue(content.contains(""Numbers and their Squares""));\n+            assertTrue(content.contains(""9.0""));\n+            assertTrue(content.contains(""196.0""));\n+        } finally {\n+            input.close();\n+        }\n+    }\n+\n+}\ndiff --git a/src/test/java/org/apache/tika/parser/microsoft/PowerPointParserTest.java b/src/test/java/org/apache/tika/parser/microsoft/PowerPointParserTest.java\nnew file mode 100644\nindex 000000000..e4832c5c2\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/parser/microsoft/PowerPointParserTest.java\n@@ -0,0 +1,52 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.parser.microsoft;\n+\n+import java.io.InputStream;\n+import java.io.StringWriter;\n+\n+import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.parser.WriteOutContentHandler;\n+import org.xml.sax.ContentHandler;\n+\n+import junit.framework.TestCase;\n+\n+public class PowerPointParserTest extends TestCase {\n+\n+    public void testPowerPointParser() throws Exception {\n+        InputStream input = PowerPointParserTest.class.getResourceAsStream(\n+                ""/test-documents/testPPT.ppt"");\n+        try {\n+            Metadata metadata = new Metadata();\n+            StringWriter writer = new StringWriter();\n+            ContentHandler handler = new WriteOutContentHandler(writer);\n+            new PowerPointParser().parse(input, handler, metadata);\n+\n+            assertEquals(\n+                    ""application/vnd.ms-powerpoint"",\n+                    metadata.get(Metadata.CONTENT_TYPE));\n+            assertEquals(""Sample Powerpoint Slide"", metadata.get(Metadata.TITLE));\n+            assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\n+            String content = writer.toString();\n+            assertTrue(content.contains(""Sample Powerpoint Slide""));\n+            assertTrue(content.contains(""Powerpoint X for Mac""));\n+        } finally {\n+            input.close();\n+        }\n+    }\n+\n+}\ndiff --git a/src/test/java/org/apache/tika/parser/microsoft/WordParserTest.java b/src/test/java/org/apache/tika/parser/microsoft/WordParserTest.java\nnew file mode 100644\nindex 000000000..1a8e396e6\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/parser/microsoft/WordParserTest.java\n@@ -0,0 +1,51 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.parser.microsoft;\n+\n+import java.io.InputStream;\n+import java.io.StringWriter;\n+\n+import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.parser.WriteOutContentHandler;\n+import org.xml.sax.ContentHandler;\n+\n+import junit.framework.TestCase;\n+\n+public class WordParserTest extends TestCase {\n+\n+    public void testWordParser() throws Exception {\n+        InputStream input = WordParserTest.class.getResourceAsStream(\n+                ""/test-documents/testWORD.doc"");\n+        try {\n+            Metadata metadata = new Metadata();\n+            StringWriter writer = new StringWriter();\n+            ContentHandler handler = new WriteOutContentHandler(writer);\n+            new WordParser().parse(input, handler, metadata);\n+\n+            assertEquals(\n+                    ""application/msword"",\n+                    metadata.get(Metadata.CONTENT_TYPE));\n+            assertEquals(""Sample Word Document"", metadata.get(Metadata.TITLE));\n+            assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\n+            String content = writer.toString();\n+            assertTrue(content.contains(""Sample Word Document""));\n+        } finally {\n+            input.close();\n+        }\n+    }\n+\n+}'"
True,Delta,63,tika,1081cb5beded2bd1228de19f74c6349ca674afed,e759bbbc8afcc8d490562eb08c14a10c509adc20,org.apache.tika.parser.microsoft.WordParserTest.testWordParser,False,[],,,,org.apache.tika.parser.microsoft.excelparser.extracttext(inputstream)@org.apache.tika.parser.microsoft.powerpointparser.extracttext(inputstream),"u'diff --git a/src/test/java/org/apache/tika/parser/microsoft/ExcelParserTest.java b/src/test/java/org/apache/tika/parser/microsoft/ExcelParserTest.java\nnew file mode 100644\nindex 000000000..8642262af\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/parser/microsoft/ExcelParserTest.java\n@@ -0,0 +1,54 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.parser.microsoft;\n+\n+import java.io.InputStream;\n+import java.io.StringWriter;\n+\n+import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.parser.WriteOutContentHandler;\n+import org.xml.sax.ContentHandler;\n+\n+import junit.framework.TestCase;\n+\n+public class ExcelParserTest extends TestCase {\n+\n+    public void testExcelParser() throws Exception {\n+        InputStream input = ExcelParserTest.class.getResourceAsStream(\n+                ""/test-documents/testEXCEL.xls"");\n+        try {\n+            Metadata metadata = new Metadata();\n+            StringWriter writer = new StringWriter();\n+            ContentHandler handler = new WriteOutContentHandler(writer);\n+            new ExcelParser().parse(input, handler, metadata);\n+\n+            assertEquals(\n+                    ""application/vnd.ms-excel"",\n+                    metadata.get(Metadata.CONTENT_TYPE));\n+            assertEquals(""Simple Excel document"", metadata.get(Metadata.TITLE));\n+            assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\n+            String content = writer.toString();\n+            assertTrue(content.contains(""Sample Excel Worksheet""));\n+            assertTrue(content.contains(""Numbers and their Squares""));\n+            assertTrue(content.contains(""9.0""));\n+            assertTrue(content.contains(""196.0""));\n+        } finally {\n+            input.close();\n+        }\n+    }\n+\n+}\ndiff --git a/src/test/java/org/apache/tika/parser/microsoft/PowerPointParserTest.java b/src/test/java/org/apache/tika/parser/microsoft/PowerPointParserTest.java\nnew file mode 100644\nindex 000000000..e4832c5c2\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/parser/microsoft/PowerPointParserTest.java\n@@ -0,0 +1,52 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.parser.microsoft;\n+\n+import java.io.InputStream;\n+import java.io.StringWriter;\n+\n+import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.parser.WriteOutContentHandler;\n+import org.xml.sax.ContentHandler;\n+\n+import junit.framework.TestCase;\n+\n+public class PowerPointParserTest extends TestCase {\n+\n+    public void testPowerPointParser() throws Exception {\n+        InputStream input = PowerPointParserTest.class.getResourceAsStream(\n+                ""/test-documents/testPPT.ppt"");\n+        try {\n+            Metadata metadata = new Metadata();\n+            StringWriter writer = new StringWriter();\n+            ContentHandler handler = new WriteOutContentHandler(writer);\n+            new PowerPointParser().parse(input, handler, metadata);\n+\n+            assertEquals(\n+                    ""application/vnd.ms-powerpoint"",\n+                    metadata.get(Metadata.CONTENT_TYPE));\n+            assertEquals(""Sample Powerpoint Slide"", metadata.get(Metadata.TITLE));\n+            assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\n+            String content = writer.toString();\n+            assertTrue(content.contains(""Sample Powerpoint Slide""));\n+            assertTrue(content.contains(""Powerpoint X for Mac""));\n+        } finally {\n+            input.close();\n+        }\n+    }\n+\n+}\ndiff --git a/src/test/java/org/apache/tika/parser/microsoft/WordParserTest.java b/src/test/java/org/apache/tika/parser/microsoft/WordParserTest.java\nnew file mode 100644\nindex 000000000..1a8e396e6\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/parser/microsoft/WordParserTest.java\n@@ -0,0 +1,51 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.parser.microsoft;\n+\n+import java.io.InputStream;\n+import java.io.StringWriter;\n+\n+import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.parser.WriteOutContentHandler;\n+import org.xml.sax.ContentHandler;\n+\n+import junit.framework.TestCase;\n+\n+public class WordParserTest extends TestCase {\n+\n+    public void testWordParser() throws Exception {\n+        InputStream input = WordParserTest.class.getResourceAsStream(\n+                ""/test-documents/testWORD.doc"");\n+        try {\n+            Metadata metadata = new Metadata();\n+            StringWriter writer = new StringWriter();\n+            ContentHandler handler = new WriteOutContentHandler(writer);\n+            new WordParser().parse(input, handler, metadata);\n+\n+            assertEquals(\n+                    ""application/msword"",\n+                    metadata.get(Metadata.CONTENT_TYPE));\n+            assertEquals(""Sample Word Document"", metadata.get(Metadata.TITLE));\n+            assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\n+            String content = writer.toString();\n+            assertTrue(content.contains(""Sample Word Document""));\n+        } finally {\n+            input.close();\n+        }\n+    }\n+\n+}'"
True,Delta,63,tika,1081cb5beded2bd1228de19f74c6349ca674afed,e759bbbc8afcc8d490562eb08c14a10c509adc20,org.apache.tika.parser.microsoft.ExcelParserTest.testExcelParser,False,[],,,,org.apache.tika.parser.microsoft.excelparser.extracttext(inputstream)@org.apache.tika.parser.microsoft.powerpointparser.extracttext(inputstream),"u'diff --git a/src/test/java/org/apache/tika/parser/microsoft/ExcelParserTest.java b/src/test/java/org/apache/tika/parser/microsoft/ExcelParserTest.java\nnew file mode 100644\nindex 000000000..8642262af\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/parser/microsoft/ExcelParserTest.java\n@@ -0,0 +1,54 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.parser.microsoft;\n+\n+import java.io.InputStream;\n+import java.io.StringWriter;\n+\n+import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.parser.WriteOutContentHandler;\n+import org.xml.sax.ContentHandler;\n+\n+import junit.framework.TestCase;\n+\n+public class ExcelParserTest extends TestCase {\n+\n+    public void testExcelParser() throws Exception {\n+        InputStream input = ExcelParserTest.class.getResourceAsStream(\n+                ""/test-documents/testEXCEL.xls"");\n+        try {\n+            Metadata metadata = new Metadata();\n+            StringWriter writer = new StringWriter();\n+            ContentHandler handler = new WriteOutContentHandler(writer);\n+            new ExcelParser().parse(input, handler, metadata);\n+\n+            assertEquals(\n+                    ""application/vnd.ms-excel"",\n+                    metadata.get(Metadata.CONTENT_TYPE));\n+            assertEquals(""Simple Excel document"", metadata.get(Metadata.TITLE));\n+            assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\n+            String content = writer.toString();\n+            assertTrue(content.contains(""Sample Excel Worksheet""));\n+            assertTrue(content.contains(""Numbers and their Squares""));\n+            assertTrue(content.contains(""9.0""));\n+            assertTrue(content.contains(""196.0""));\n+        } finally {\n+            input.close();\n+        }\n+    }\n+\n+}\ndiff --git a/src/test/java/org/apache/tika/parser/microsoft/PowerPointParserTest.java b/src/test/java/org/apache/tika/parser/microsoft/PowerPointParserTest.java\nnew file mode 100644\nindex 000000000..e4832c5c2\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/parser/microsoft/PowerPointParserTest.java\n@@ -0,0 +1,52 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.parser.microsoft;\n+\n+import java.io.InputStream;\n+import java.io.StringWriter;\n+\n+import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.parser.WriteOutContentHandler;\n+import org.xml.sax.ContentHandler;\n+\n+import junit.framework.TestCase;\n+\n+public class PowerPointParserTest extends TestCase {\n+\n+    public void testPowerPointParser() throws Exception {\n+        InputStream input = PowerPointParserTest.class.getResourceAsStream(\n+                ""/test-documents/testPPT.ppt"");\n+        try {\n+            Metadata metadata = new Metadata();\n+            StringWriter writer = new StringWriter();\n+            ContentHandler handler = new WriteOutContentHandler(writer);\n+            new PowerPointParser().parse(input, handler, metadata);\n+\n+            assertEquals(\n+                    ""application/vnd.ms-powerpoint"",\n+                    metadata.get(Metadata.CONTENT_TYPE));\n+            assertEquals(""Sample Powerpoint Slide"", metadata.get(Metadata.TITLE));\n+            assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\n+            String content = writer.toString();\n+            assertTrue(content.contains(""Sample Powerpoint Slide""));\n+            assertTrue(content.contains(""Powerpoint X for Mac""));\n+        } finally {\n+            input.close();\n+        }\n+    }\n+\n+}\ndiff --git a/src/test/java/org/apache/tika/parser/microsoft/WordParserTest.java b/src/test/java/org/apache/tika/parser/microsoft/WordParserTest.java\nnew file mode 100644\nindex 000000000..1a8e396e6\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/parser/microsoft/WordParserTest.java\n@@ -0,0 +1,51 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.parser.microsoft;\n+\n+import java.io.InputStream;\n+import java.io.StringWriter;\n+\n+import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.parser.WriteOutContentHandler;\n+import org.xml.sax.ContentHandler;\n+\n+import junit.framework.TestCase;\n+\n+public class WordParserTest extends TestCase {\n+\n+    public void testWordParser() throws Exception {\n+        InputStream input = WordParserTest.class.getResourceAsStream(\n+                ""/test-documents/testWORD.doc"");\n+        try {\n+            Metadata metadata = new Metadata();\n+            StringWriter writer = new StringWriter();\n+            ContentHandler handler = new WriteOutContentHandler(writer);\n+            new WordParser().parse(input, handler, metadata);\n+\n+            assertEquals(\n+                    ""application/msword"",\n+                    metadata.get(Metadata.CONTENT_TYPE));\n+            assertEquals(""Sample Word Document"", metadata.get(Metadata.TITLE));\n+            assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\n+            String content = writer.toString();\n+            assertTrue(content.contains(""Sample Word Document""));\n+        } finally {\n+            input.close();\n+        }\n+    }\n+\n+}'"
True,Delta,63,tika,1081cb5beded2bd1228de19f74c6349ca674afed,e759bbbc8afcc8d490562eb08c14a10c509adc20,org.apache.tika.parser.microsoft.PowerPointParserTest.testPowerPointParser,False,[],,,,org.apache.tika.parser.microsoft.excelparser.extracttext(inputstream)@org.apache.tika.parser.microsoft.powerpointparser.extracttext(inputstream),"u'diff --git a/src/test/java/org/apache/tika/parser/microsoft/ExcelParserTest.java b/src/test/java/org/apache/tika/parser/microsoft/ExcelParserTest.java\nnew file mode 100644\nindex 000000000..8642262af\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/parser/microsoft/ExcelParserTest.java\n@@ -0,0 +1,54 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.parser.microsoft;\n+\n+import java.io.InputStream;\n+import java.io.StringWriter;\n+\n+import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.parser.WriteOutContentHandler;\n+import org.xml.sax.ContentHandler;\n+\n+import junit.framework.TestCase;\n+\n+public class ExcelParserTest extends TestCase {\n+\n+    public void testExcelParser() throws Exception {\n+        InputStream input = ExcelParserTest.class.getResourceAsStream(\n+                ""/test-documents/testEXCEL.xls"");\n+        try {\n+            Metadata metadata = new Metadata();\n+            StringWriter writer = new StringWriter();\n+            ContentHandler handler = new WriteOutContentHandler(writer);\n+            new ExcelParser().parse(input, handler, metadata);\n+\n+            assertEquals(\n+                    ""application/vnd.ms-excel"",\n+                    metadata.get(Metadata.CONTENT_TYPE));\n+            assertEquals(""Simple Excel document"", metadata.get(Metadata.TITLE));\n+            assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\n+            String content = writer.toString();\n+            assertTrue(content.contains(""Sample Excel Worksheet""));\n+            assertTrue(content.contains(""Numbers and their Squares""));\n+            assertTrue(content.contains(""9.0""));\n+            assertTrue(content.contains(""196.0""));\n+        } finally {\n+            input.close();\n+        }\n+    }\n+\n+}\ndiff --git a/src/test/java/org/apache/tika/parser/microsoft/PowerPointParserTest.java b/src/test/java/org/apache/tika/parser/microsoft/PowerPointParserTest.java\nnew file mode 100644\nindex 000000000..e4832c5c2\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/parser/microsoft/PowerPointParserTest.java\n@@ -0,0 +1,52 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.parser.microsoft;\n+\n+import java.io.InputStream;\n+import java.io.StringWriter;\n+\n+import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.parser.WriteOutContentHandler;\n+import org.xml.sax.ContentHandler;\n+\n+import junit.framework.TestCase;\n+\n+public class PowerPointParserTest extends TestCase {\n+\n+    public void testPowerPointParser() throws Exception {\n+        InputStream input = PowerPointParserTest.class.getResourceAsStream(\n+                ""/test-documents/testPPT.ppt"");\n+        try {\n+            Metadata metadata = new Metadata();\n+            StringWriter writer = new StringWriter();\n+            ContentHandler handler = new WriteOutContentHandler(writer);\n+            new PowerPointParser().parse(input, handler, metadata);\n+\n+            assertEquals(\n+                    ""application/vnd.ms-powerpoint"",\n+                    metadata.get(Metadata.CONTENT_TYPE));\n+            assertEquals(""Sample Powerpoint Slide"", metadata.get(Metadata.TITLE));\n+            assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\n+            String content = writer.toString();\n+            assertTrue(content.contains(""Sample Powerpoint Slide""));\n+            assertTrue(content.contains(""Powerpoint X for Mac""));\n+        } finally {\n+            input.close();\n+        }\n+    }\n+\n+}\ndiff --git a/src/test/java/org/apache/tika/parser/microsoft/WordParserTest.java b/src/test/java/org/apache/tika/parser/microsoft/WordParserTest.java\nnew file mode 100644\nindex 000000000..1a8e396e6\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/parser/microsoft/WordParserTest.java\n@@ -0,0 +1,51 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.parser.microsoft;\n+\n+import java.io.InputStream;\n+import java.io.StringWriter;\n+\n+import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.parser.WriteOutContentHandler;\n+import org.xml.sax.ContentHandler;\n+\n+import junit.framework.TestCase;\n+\n+public class WordParserTest extends TestCase {\n+\n+    public void testWordParser() throws Exception {\n+        InputStream input = WordParserTest.class.getResourceAsStream(\n+                ""/test-documents/testWORD.doc"");\n+        try {\n+            Metadata metadata = new Metadata();\n+            StringWriter writer = new StringWriter();\n+            ContentHandler handler = new WriteOutContentHandler(writer);\n+            new WordParser().parse(input, handler, metadata);\n+\n+            assertEquals(\n+                    ""application/msword"",\n+                    metadata.get(Metadata.CONTENT_TYPE));\n+            assertEquals(""Sample Word Document"", metadata.get(Metadata.TITLE));\n+            assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\n+            String content = writer.toString();\n+            assertTrue(content.contains(""Sample Word Document""));\n+        } finally {\n+            input.close();\n+        }\n+    }\n+\n+}'"
True,Delta,63,tika,1081cb5beded2bd1228de19f74c6349ca674afed,e759bbbc8afcc8d490562eb08c14a10c509adc20,org.apache.tika.parser.microsoft.WordParserTest.testWordParser,False,[],,,,org.apache.tika.parser.microsoft.excelparser.extracttext(inputstream)@org.apache.tika.parser.microsoft.powerpointparser.extracttext(inputstream),"u'diff --git a/src/test/java/org/apache/tika/parser/microsoft/ExcelParserTest.java b/src/test/java/org/apache/tika/parser/microsoft/ExcelParserTest.java\nnew file mode 100644\nindex 000000000..8642262af\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/parser/microsoft/ExcelParserTest.java\n@@ -0,0 +1,54 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.parser.microsoft;\n+\n+import java.io.InputStream;\n+import java.io.StringWriter;\n+\n+import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.parser.WriteOutContentHandler;\n+import org.xml.sax.ContentHandler;\n+\n+import junit.framework.TestCase;\n+\n+public class ExcelParserTest extends TestCase {\n+\n+    public void testExcelParser() throws Exception {\n+        InputStream input = ExcelParserTest.class.getResourceAsStream(\n+                ""/test-documents/testEXCEL.xls"");\n+        try {\n+            Metadata metadata = new Metadata();\n+            StringWriter writer = new StringWriter();\n+            ContentHandler handler = new WriteOutContentHandler(writer);\n+            new ExcelParser().parse(input, handler, metadata);\n+\n+            assertEquals(\n+                    ""application/vnd.ms-excel"",\n+                    metadata.get(Metadata.CONTENT_TYPE));\n+            assertEquals(""Simple Excel document"", metadata.get(Metadata.TITLE));\n+            assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\n+            String content = writer.toString();\n+            assertTrue(content.contains(""Sample Excel Worksheet""));\n+            assertTrue(content.contains(""Numbers and their Squares""));\n+            assertTrue(content.contains(""9.0""));\n+            assertTrue(content.contains(""196.0""));\n+        } finally {\n+            input.close();\n+        }\n+    }\n+\n+}\ndiff --git a/src/test/java/org/apache/tika/parser/microsoft/PowerPointParserTest.java b/src/test/java/org/apache/tika/parser/microsoft/PowerPointParserTest.java\nnew file mode 100644\nindex 000000000..e4832c5c2\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/parser/microsoft/PowerPointParserTest.java\n@@ -0,0 +1,52 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.parser.microsoft;\n+\n+import java.io.InputStream;\n+import java.io.StringWriter;\n+\n+import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.parser.WriteOutContentHandler;\n+import org.xml.sax.ContentHandler;\n+\n+import junit.framework.TestCase;\n+\n+public class PowerPointParserTest extends TestCase {\n+\n+    public void testPowerPointParser() throws Exception {\n+        InputStream input = PowerPointParserTest.class.getResourceAsStream(\n+                ""/test-documents/testPPT.ppt"");\n+        try {\n+            Metadata metadata = new Metadata();\n+            StringWriter writer = new StringWriter();\n+            ContentHandler handler = new WriteOutContentHandler(writer);\n+            new PowerPointParser().parse(input, handler, metadata);\n+\n+            assertEquals(\n+                    ""application/vnd.ms-powerpoint"",\n+                    metadata.get(Metadata.CONTENT_TYPE));\n+            assertEquals(""Sample Powerpoint Slide"", metadata.get(Metadata.TITLE));\n+            assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\n+            String content = writer.toString();\n+            assertTrue(content.contains(""Sample Powerpoint Slide""));\n+            assertTrue(content.contains(""Powerpoint X for Mac""));\n+        } finally {\n+            input.close();\n+        }\n+    }\n+\n+}\ndiff --git a/src/test/java/org/apache/tika/parser/microsoft/WordParserTest.java b/src/test/java/org/apache/tika/parser/microsoft/WordParserTest.java\nnew file mode 100644\nindex 000000000..1a8e396e6\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/parser/microsoft/WordParserTest.java\n@@ -0,0 +1,51 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.parser.microsoft;\n+\n+import java.io.InputStream;\n+import java.io.StringWriter;\n+\n+import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.parser.WriteOutContentHandler;\n+import org.xml.sax.ContentHandler;\n+\n+import junit.framework.TestCase;\n+\n+public class WordParserTest extends TestCase {\n+\n+    public void testWordParser() throws Exception {\n+        InputStream input = WordParserTest.class.getResourceAsStream(\n+                ""/test-documents/testWORD.doc"");\n+        try {\n+            Metadata metadata = new Metadata();\n+            StringWriter writer = new StringWriter();\n+            ContentHandler handler = new WriteOutContentHandler(writer);\n+            new WordParser().parse(input, handler, metadata);\n+\n+            assertEquals(\n+                    ""application/msword"",\n+                    metadata.get(Metadata.CONTENT_TYPE));\n+            assertEquals(""Sample Word Document"", metadata.get(Metadata.TITLE));\n+            assertEquals(""Keith Bennett"", metadata.get(Metadata.AUTHOR));\n+            String content = writer.toString();\n+            assertTrue(content.contains(""Sample Word Document""));\n+        } finally {\n+            input.close();\n+        }\n+    }\n+\n+}'"
True,Delta,56,tika,b12c01d9b56053554cec501aab0530f7f4352daf,9477c5e4a38dbacf794b663c757617a8ee07432a,org.apache.tika.mime.TestMimeTypes.testCaseSensitivity,False,[],,,,org.apache.tika.mime.mimetypes.getmimetype(string),"u'diff --git a/src/test/java/org/apache/tika/mime/TestMimeTypes.java b/src/test/java/org/apache/tika/mime/TestMimeTypes.java\nnew file mode 100644\nindex 000000000..f798263c4\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/mime/TestMimeTypes.java\n@@ -0,0 +1,52 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.tika.mime;\n+\n+// Junit imports\n+import junit.framework.TestCase;\n+\n+// Tika imports\n+import org.apache.tika.config.TikaConfig;\n+\n+/**\n+ * \n+ * Test Suite for the {@link MimeTypes} repository.\n+ * \n+ */\n+public class TestMimeTypes extends TestCase {\n+\n+    private MimeTypes repo;\n+\n+    public TestMimeTypes() {\n+        try {\n+            repo = TikaConfig.getDefaultConfig().getMimeRepository();\n+        } catch (Exception e) {\n+            fail(e.getMessage());\n+        }\n+\n+    }\n+\n+    public void testCaseSensitivity() {\n+        MimeType type = repo.getMimeType(""test.PDF"");\n+        assertNotNull(type);\n+        assertEquals(repo.getMimeType(""test.pdf""), type);\n+        assertEquals(repo.getMimeType(""test.PdF""), type);\n+        assertEquals(repo.getMimeType(""test.pdF""), type);\n+    }\n+\n+}'"
True,Delta,56,tika,b12c01d9b56053554cec501aab0530f7f4352daf,9477c5e4a38dbacf794b663c757617a8ee07432a,org.apache.tika.mime.TestMimeTypes.testCaseSensitivity,False,[],,,,org.apache.tika.mime.mimetypes.getmimetype(string),"u'diff --git a/src/test/java/org/apache/tika/mime/TestMimeTypes.java b/src/test/java/org/apache/tika/mime/TestMimeTypes.java\nnew file mode 100644\nindex 000000000..f798263c4\n--- /dev/null\n+++ b/src/test/java/org/apache/tika/mime/TestMimeTypes.java\n@@ -0,0 +1,52 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the ""License""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an ""AS IS"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.tika.mime;\n+\n+// Junit imports\n+import junit.framework.TestCase;\n+\n+// Tika imports\n+import org.apache.tika.config.TikaConfig;\n+\n+/**\n+ * \n+ * Test Suite for the {@link MimeTypes} repository.\n+ * \n+ */\n+public class TestMimeTypes extends TestCase {\n+\n+    private MimeTypes repo;\n+\n+    public TestMimeTypes() {\n+        try {\n+            repo = TikaConfig.getDefaultConfig().getMimeRepository();\n+        } catch (Exception e) {\n+            fail(e.getMessage());\n+        }\n+\n+    }\n+\n+    public void testCaseSensitivity() {\n+        MimeType type = repo.getMimeType(""test.PDF"");\n+        assertNotNull(type);\n+        assertEquals(repo.getMimeType(""test.pdf""), type);\n+        assertEquals(repo.getMimeType(""test.PdF""), type);\n+        assertEquals(repo.getMimeType(""test.pdF""), type);\n+    }\n+\n+}'"

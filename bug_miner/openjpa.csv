valid,type,issue,module,commit,parent,testcase,has_test_annotation,traces,bugged_components,description,extra_description,blamed_components,diff
True,Regression,2750,openjpa-persistence-jdbc,f399f912cf34a1f2a7963472ad19119bdc453071,9a98d6a2bf8203a1cead34d18f705e380c829cd6,org.apache.openjpa.conf.TestBadJdbcUrl.testBadUrlProtocolValueWithValidDataSource,False,[],,,,org.apache.openjpa.jdbc.schema.dbcpdriverdatasource.close(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestBadJdbcUrl.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestBadJdbcUrl.java\nindex c9f3e92cb..db6d1588c 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestBadJdbcUrl.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestBadJdbcUrl.java\n@@ -49,7 +49,7 @@ public class TestBadJdbcUrl extends TestCase {\n     public static final String GOOD_DRIVER =\n         ""org.apache.derby.jdbc.EmbeddedDriver"";\n     public static final String GOOD_DATASOURCE =\n-        ""org.apache.commons.dbcp.BasicDataSource"";\n+        ""org.apache.commons.dbcp2.BasicDataSource"";\n \n \tpublic static final String BAD_DRIVER = ""bad.driver"";\n \tpublic static final String BAD_URL_PROTOCOL = ""bad.url.protocol"";'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestTypeSafeCondExpression.testGeneralCaseExpression3,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestTypeSafeCondExpression.testSimpleCaseExpression2,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery41,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestTypeSafeCondExpression.testGeneralCaseExpression2,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery66,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery50,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery127,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestTypesafeCriteria.testCountDistinctOnJoin,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery106,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery100,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery1,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery6,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery29,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestTypeSafeCondExpression.testSimpleCaseExpression4,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestTypesafeCriteria.testFunctionWithOneArgument,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestJoinCondition.testFetchJoin,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery14,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestTypesafeCriteria.testGroupByAndHaving,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery7,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery32,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery60,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEdit.testCandidateClassIsImplicitlySelectedForEntityQuery,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestTypesafeCriteria.testExplictRoot,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestJoinCondition.testCollectionJoinWithoutCondition,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestTypeSafeCondExpression.testTypeExpression7,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery103a,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery39,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery55,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery38,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery51,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery108,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestJoinCondition.testOuterFetchJoin,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestFetchJoin.testLeftFetchJoin,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestTypesafeCriteria.testAvgExpression,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery109,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery21,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestJoinCondition.testSetJoinWithoutCondition,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery54,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestTypesafeCriteria.testFunctionWithTwoArgument,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery45,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestJoinCondition.testOuterJoinSingleAttributeWithoutCondition,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestTypeSafeCondExpression.testCoalesceExpressions,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery69,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery52,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery68,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestTypeSafeCondExpression.testNullIfExpressions,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestJoinCondition.testCrossJoinWithoutCondition1,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestTypeSafeCondExpression.testNothingUsingCriteria,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestTypesafeCriteria.testSizeReturnsInteger,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestTypesafeCriteria.testNewConstruct,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery44,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestTypeSafeCondExpression.testGeneralCaseExpression1,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery107,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestTypesafeCriteria.testGroupByOnMaxResult,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestTypeSafeCondExpression.testAVGAggregFunc,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestTypesafeCriteria.testProjection,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestTypeSafeCondExpression.testSimpleCaseExpression1,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery42,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery99,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestTypeSafeCondExpression.testMINAggregFunc,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestStringCriteria.testGroupByAndHaving,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery105,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestTypesafeCriteria.testOrdering5,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestTypeSafeCondExpression.testTypeExpression8,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestMetaModelTypesafeCriteria.testGroupByAndHaving,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery103b,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery46,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery16,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery110,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery56,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEdit.testEditOrderBy,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestTypesafeCriteria.testCountDistinct,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestTypeSafeCondExpression.testGroupByHavingClause,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery87,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery88,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery90,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestFetchJoin.testFetchJoin,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery97,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery3,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestJoinCondition.testMapJoinWithoutCondition,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery118,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery62,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestTypesafeCriteria.testSimpleLeftJoin,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery30,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestTypesafeCriteria.testImplicitRoot,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestTypeSafeCondExpression.testTypeExpression9,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestTypeSafeCondExpression.testSUMAggregFunc,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery128,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEdit.testEditedToAddMultiselectionTerm,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery65,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery33,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery34,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery91,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery11,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery89,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery59,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestTypeSafeCondExpression.testCOUNTAggregFunc,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery61,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestJoinCondition.testCrossJoinWithoutCondition,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestJoinCondition.testInnerJoinSingleAttributeWithoutCondition,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestJoinCondition.testListJoinWithoutCondition,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestTypesafeCriteria.testAliasInOrderByClause,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery98,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestTypeSafeCondExpression.testMAXAggregFunc,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery22,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestTypesafeCriteria.testOrdering4,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery119,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"
True,Regression,2733,openjpa-persistence-jdbc,0e4ec5b392b978c4515b26c60e485f2b610de94f,80736f6e9d38dfb180c89cec6cb2916341165a5c,org.apache.openjpa.persistence.criteria.TestEmbeddableCriteria.testEmbeddableQuery28,False,[],,,,org.apache.openjpa.persistence.criteria.criteriaqueryimpl.getparameters(),"u'diff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\nindex 18758ae40..ef1b72f61 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java\n@@ -37,16 +37,18 @@ public class Order {\n     private int id;\n \n     private int quantity;\n-\tprivate double totalCost;\n-\t@Column(name=""CNT"")\n-\tprivate int count;\n-\tprivate String name;\n+    private double totalCost;\n \n-\t@ManyToOne\n-\tprivate Customer customer;\n+    @Column(name=""CNT"")\n+    private int count;\n \n-\t@OneToMany(mappedBy=""order"")\n-\tprivate List<LineItem> lineItems;\n+    private String name;\n+\n+    @ManyToOne\n+    private Customer customer;\n+\n+    @OneToMany(mappedBy=""order"")\n+    private List<LineItem> lineItems;\n \n     private boolean delivered;\n \ndiff --git a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\nindex f4e8adb6f..b2547a8a3 100644\n--- a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n+++ b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java\n@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import java.sql.Timestamp;\n+import java.util.List;\n \n import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n@@ -582,41 +583,52 @@ public class TestSubqueries extends CriteriaTest {\n     }\n \n     public void testSubquery24() {\n-\n         em.getTransaction().begin();\n \n-        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n-        em.createQuery(""delete from Order o"").executeUpdate();\n-        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+        freshCustomerAndOrder();\n \n-        em.flush();\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n \n-        Customer c1 = new Customer();\n-        c1.setAccountNum(156);\n-        c1.setFirstName(""John"");\n-        c1.setLastName(""Doe"");\n-        c1.setName(""Capricorn"");\n-        em.persist(c1);\n+        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n \n-        Order o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n-        o1 = new Order();\n-        o1.setCustomer(c1);\n-        em.persist(o1);\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n \n-        em.flush();\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n \n-        // em.getTransaction().commit();\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(""param1"", ""Capricorn"");\n+        tq.setParameter(""param2"", ""Doe"");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+        cleanCustomerAndOrder();\n+    }\n+\n+    public void testSubquery25() {\n+        em.getTransaction().begin();\n \n-        // System.out.println(""CUSTOMERS: ""+em.createQuery(""select count(c) from Customer c"").getFirstResult());\n-        // System.out.println(""ORDERS: ""+em.createQuery(""select count(c) from Order c"").getFirstResult());\n+        freshCustomerAndOrder();\n \n         CriteriaQuery<Long> q = cb.createQuery(Long.class);\n         Root<Customer> root = q.from(Customer.class);\n         q.select(root.get(Customer_.accountNum));\n \n         ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");\n+        ParameterExpression<String> testParam2 = cb.parameter(String.class, ""param1"");\n \n         Subquery<Customer> sq = q.subquery(Customer.class);\n         Root<Order> sqRoot = sq.from(Order.class);\n@@ -627,7 +639,7 @@ public class TestSubqueries extends CriteriaTest {\n         sq.select(sqRoot.get(Order_.customer));\n \n         q.where(cb.and(\n-                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.equal(testParam2, root.get(Customer_.name)),\n                 cb.in(root).value(sq)\n         ));\n \n@@ -640,6 +652,42 @@ public class TestSubqueries extends CriteriaTest {\n \n         em.getTransaction().rollback();\n \n+        cleanCustomerAndOrder();\n+    }\n+\n+    private void freshCustomerAndOrder() {\n+        cleanCustomerAndOrder();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(""John"");\n+        c1.setLastName(""Doe"");\n+        c1.setName(""Capricorn"");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+    }\n+\n+    private void cleanCustomerAndOrder() {\n+        boolean txActive = em.getTransaction().isActive();\n+        if (!txActive) {\n+            em.getTransaction().begin();\n+        }\n+        em.createQuery(""delete from Order o where o.customer.name = \'Capricorn\'"").executeUpdate();\n+        em.createQuery(""delete from Order o"").executeUpdate();\n+        em.createQuery(""delete from Customer c where c.name = \'Capricorn\'"").executeUpdate();\n+\n+        em.flush();\n+        if (!txActive) {\n+            em.getTransaction().commit();\n+        }\n     }\n \n }'"

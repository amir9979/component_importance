valid,type,issue,module,commit,parent,testcase,has_test_annotation,traces,bugged_components,description,extra_description,blamed_components,diff
True,Delta,21,commons-functor,f72ca72b68487ad6e9eb9245cc24ff987269bcd1,fbc0dc7d81d8b4d3c448155c5907e06d996d9d58,org.apache.commons.functor.core.composite.TestUnarySequence.testConstructors,False,[],,,,org.apache.commons.functor.core.composite.unarysequence.then(unaryprocedure),"u'diff --git a/src/test/java/org/apache/commons/functor/core/composite/TestUnarySequence.java b/src/test/java/org/apache/commons/functor/core/composite/TestUnarySequence.java\nindex 620f015..d3f6323 100644\n--- a/src/test/java/org/apache/commons/functor/core/composite/TestUnarySequence.java\n+++ b/src/test/java/org/apache/commons/functor/core/composite/TestUnarySequence.java\n@@ -17,6 +17,7 @@\n package org.apache.commons.functor.core.composite;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n \n import java.util.ArrayList;\n import java.util.List;\n@@ -43,6 +44,26 @@ public class TestUnarySequence extends BaseFunctorTest {\n     // Tests\n     // ------------------------------------------------------------------------\n \n+    @Test\n+    public void testConstructors() throws Exception {\n+        UnarySequence<Object> seq1 = new UnarySequence<Object>((UnaryProcedure<? super Object>)null);\n+        UnarySequence<Object> seq2 = new UnarySequence<Object>();\n+        assertObjectsAreEqual(seq1, seq2);\n+        \n+        RunCounter p1 = new RunCounter();\n+        RunCounter p2 = new RunCounter();\n+        List<UnaryProcedure<? super Object>> iterable = new ArrayList<UnaryProcedure<? super Object>>();\n+        iterable.add(p1);\n+        iterable.add(p2);\n+        UnarySequence<Object> seq3 = new UnarySequence<Object>(iterable);\n+        UnarySequence<Object> seq4 = new UnarySequence<Object>(p1, p2);\n+        assertObjectsAreEqual(seq3, seq4);\n+        \n+        UnarySequence<Object> seq5 = new UnarySequence<Object>((Iterable<UnaryProcedure<? super Object>>)null);\n+        UnarySequence<Object> seq6 = new UnarySequence<Object>((UnaryProcedure<? super Object>[])null);\n+        assertObjectsAreEqual(seq5, seq6);\n+    }\n+    \n     @Test\n     public void testRunZero() throws Exception {\n         UnarySequence<String> seq = new UnarySequence<String>();\n@@ -110,6 +131,7 @@ public class TestUnarySequence extends BaseFunctorTest {\n         }\n \n         assertObjectsAreNotEqual(p,new NoOp());\n+        assertFalse(p.equals(null));\n     }\n \n     // Classes'"
True,Delta,21,commons-functor,f72ca72b68487ad6e9eb9245cc24ff987269bcd1,fbc0dc7d81d8b4d3c448155c5907e06d996d9d58,org.apache.commons.functor.core.composite.TestUnarySequence.testConstructors,False,[],,,,org.apache.commons.functor.core.composite.unarysequence.then(unaryprocedure),"u'diff --git a/src/test/java/org/apache/commons/functor/core/composite/TestUnarySequence.java b/src/test/java/org/apache/commons/functor/core/composite/TestUnarySequence.java\nindex 620f015..d3f6323 100644\n--- a/src/test/java/org/apache/commons/functor/core/composite/TestUnarySequence.java\n+++ b/src/test/java/org/apache/commons/functor/core/composite/TestUnarySequence.java\n@@ -17,6 +17,7 @@\n package org.apache.commons.functor.core.composite;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n \n import java.util.ArrayList;\n import java.util.List;\n@@ -43,6 +44,26 @@ public class TestUnarySequence extends BaseFunctorTest {\n     // Tests\n     // ------------------------------------------------------------------------\n \n+    @Test\n+    public void testConstructors() throws Exception {\n+        UnarySequence<Object> seq1 = new UnarySequence<Object>((UnaryProcedure<? super Object>)null);\n+        UnarySequence<Object> seq2 = new UnarySequence<Object>();\n+        assertObjectsAreEqual(seq1, seq2);\n+        \n+        RunCounter p1 = new RunCounter();\n+        RunCounter p2 = new RunCounter();\n+        List<UnaryProcedure<? super Object>> iterable = new ArrayList<UnaryProcedure<? super Object>>();\n+        iterable.add(p1);\n+        iterable.add(p2);\n+        UnarySequence<Object> seq3 = new UnarySequence<Object>(iterable);\n+        UnarySequence<Object> seq4 = new UnarySequence<Object>(p1, p2);\n+        assertObjectsAreEqual(seq3, seq4);\n+        \n+        UnarySequence<Object> seq5 = new UnarySequence<Object>((Iterable<UnaryProcedure<? super Object>>)null);\n+        UnarySequence<Object> seq6 = new UnarySequence<Object>((UnaryProcedure<? super Object>[])null);\n+        assertObjectsAreEqual(seq5, seq6);\n+    }\n+    \n     @Test\n     public void testRunZero() throws Exception {\n         UnarySequence<String> seq = new UnarySequence<String>();\n@@ -110,6 +131,7 @@ public class TestUnarySequence extends BaseFunctorTest {\n         }\n \n         assertObjectsAreNotEqual(p,new NoOp());\n+        assertFalse(p.equals(null));\n     }\n \n     // Classes'"

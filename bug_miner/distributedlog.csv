valid,type,issue,module,commit,parent,testcase,has_test_annotation,traces,bugged_components,description,extra_description,blamed_components,diff
True,Delta,206,distributedlog-core,671a6ee446606a142b256599c9c8e99845474fe5,09be3fcc16d1841080c218e7471174bb8d3e78e4,org.apache.distributedlog.TestBKDistributedLogManager.testDeleteLog,False,[],,,,org.apache.distributedlog.bkdistributedlogmanager.delete(),"u'diff --git a/distributedlog-core/src/test/java/org/apache/distributedlog/TestBKDistributedLogManager.java b/distributedlog-core/src/test/java/org/apache/distributedlog/TestBKDistributedLogManager.java\nindex 18e097f..d353894 100644\n--- a/distributedlog-core/src/test/java/org/apache/distributedlog/TestBKDistributedLogManager.java\n+++ b/distributedlog-core/src/test/java/org/apache/distributedlog/TestBKDistributedLogManager.java\n@@ -17,6 +17,7 @@\n  */\n package org.apache.distributedlog;\n \n+import java.io.IOException;\n import java.net.URI;\n import java.util.Collection;\n import java.util.Iterator;\n@@ -29,6 +30,7 @@ import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import org.apache.bookkeeper.client.BookKeeper;\n import org.apache.distributedlog.api.AsyncLogReader;\n import org.apache.distributedlog.api.AsyncLogWriter;\n import org.apache.distributedlog.api.DistributedLogManager;\n@@ -41,6 +43,7 @@ import org.apache.distributedlog.exceptions.BKTransmitException;\n import org.apache.distributedlog.exceptions.LogEmptyException;\n import org.apache.distributedlog.exceptions.LogNotFoundException;\n import org.apache.distributedlog.exceptions.LogReadException;\n+import org.apache.distributedlog.impl.BKNamespaceDriver;\n import org.apache.distributedlog.impl.ZKLogSegmentMetadataStore;\n import org.apache.distributedlog.io.Abortables;\n import org.apache.distributedlog.logsegment.LogSegmentMetadataStore;\n@@ -65,6 +68,7 @@ import org.apache.distributedlog.metadata.LogSegmentMetadataStoreUpdater;\n import org.apache.distributedlog.api.namespace.NamespaceBuilder;\n import org.apache.distributedlog.api.subscription.SubscriptionsStore;\n \n+import static com.google.common.base.Charsets.UTF_8;\n import static org.junit.Assert.*;\n import static org.junit.Assert.assertEquals;\n \n@@ -1202,4 +1206,43 @@ public class TestBKDistributedLogManager extends TestDistributedLogBase {\n \n         zookeeperClient.close();\n     }\n+\n+    @Test(timeout = 60000)\n+    public void testDeleteLog() throws Exception {\n+        String name = ""delete-log-should-delete-ledgers"";\n+        DistributedLogManager dlm = createNewDLM(conf, name);\n+        long txid = 1;\n+        // Create the log and write some records\n+        BKSyncLogWriter writer = (BKSyncLogWriter)dlm.startLogSegmentNonPartitioned();\n+        for (long j = 1; j <= DEFAULT_SEGMENT_SIZE; j++) {\n+            writer.write(DLMTestUtil.getLogRecordInstance(txid++));\n+        }\n+        BKLogSegmentWriter perStreamLogWriter = writer.getCachedLogWriter();\n+        writer.closeAndComplete();\n+        BKLogWriteHandler blplm = ((BKDistributedLogManager) (dlm)).createWriteHandler(true);\n+        assertNotNull(zkc.exists(blplm.completedLedgerZNode(txid, txid - 1,\n+            perStreamLogWriter.getLogSegmentSequenceNumber()), false));\n+        Utils.ioResult(blplm.asyncClose());\n+\n+        // Should be able to open the underline ledger using BK client\n+        long ledgerId = perStreamLogWriter.getLogSegmentId();\n+        BKNamespaceDriver driver = (BKNamespaceDriver) dlm.getNamespaceDriver();\n+        driver.getReaderBKC().get().openLedgerNoRecovery(ledgerId,\n+            BookKeeper.DigestType.CRC32, conf.getBKDigestPW().getBytes(UTF_8));\n+        // Delete the log and we shouldn\'t be able the open the ledger\n+        dlm.delete();\n+        try {\n+            driver.getReaderBKC().get().openLedgerNoRecovery(ledgerId,\n+                BookKeeper.DigestType.CRC32, conf.getBKDigestPW().getBytes(UTF_8));\n+            fail(""Should fail to open ledger after we delete the log"");\n+        } catch (BKException.BKNoSuchLedgerExistsException e) {\n+            // ignore\n+        }\n+        // delete again should not throw any exception\n+        try {\n+            dlm.delete();\n+        } catch (IOException ioe) {\n+            fail(""Delete log twice should not throw any exception"");\n+        }\n+    }\n }'"
True,Delta,206,distributedlog-core,671a6ee446606a142b256599c9c8e99845474fe5,09be3fcc16d1841080c218e7471174bb8d3e78e4,org.apache.distributedlog.TestBKDistributedLogManager.testDeleteLog,False,[],,,,org.apache.distributedlog.bkdistributedlogmanager.delete(),"u'diff --git a/distributedlog-core/src/test/java/org/apache/distributedlog/TestBKDistributedLogManager.java b/distributedlog-core/src/test/java/org/apache/distributedlog/TestBKDistributedLogManager.java\nindex 18e097f..d353894 100644\n--- a/distributedlog-core/src/test/java/org/apache/distributedlog/TestBKDistributedLogManager.java\n+++ b/distributedlog-core/src/test/java/org/apache/distributedlog/TestBKDistributedLogManager.java\n@@ -17,6 +17,7 @@\n  */\n package org.apache.distributedlog;\n \n+import java.io.IOException;\n import java.net.URI;\n import java.util.Collection;\n import java.util.Iterator;\n@@ -29,6 +30,7 @@ import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import org.apache.bookkeeper.client.BookKeeper;\n import org.apache.distributedlog.api.AsyncLogReader;\n import org.apache.distributedlog.api.AsyncLogWriter;\n import org.apache.distributedlog.api.DistributedLogManager;\n@@ -41,6 +43,7 @@ import org.apache.distributedlog.exceptions.BKTransmitException;\n import org.apache.distributedlog.exceptions.LogEmptyException;\n import org.apache.distributedlog.exceptions.LogNotFoundException;\n import org.apache.distributedlog.exceptions.LogReadException;\n+import org.apache.distributedlog.impl.BKNamespaceDriver;\n import org.apache.distributedlog.impl.ZKLogSegmentMetadataStore;\n import org.apache.distributedlog.io.Abortables;\n import org.apache.distributedlog.logsegment.LogSegmentMetadataStore;\n@@ -65,6 +68,7 @@ import org.apache.distributedlog.metadata.LogSegmentMetadataStoreUpdater;\n import org.apache.distributedlog.api.namespace.NamespaceBuilder;\n import org.apache.distributedlog.api.subscription.SubscriptionsStore;\n \n+import static com.google.common.base.Charsets.UTF_8;\n import static org.junit.Assert.*;\n import static org.junit.Assert.assertEquals;\n \n@@ -1202,4 +1206,43 @@ public class TestBKDistributedLogManager extends TestDistributedLogBase {\n \n         zookeeperClient.close();\n     }\n+\n+    @Test(timeout = 60000)\n+    public void testDeleteLog() throws Exception {\n+        String name = ""delete-log-should-delete-ledgers"";\n+        DistributedLogManager dlm = createNewDLM(conf, name);\n+        long txid = 1;\n+        // Create the log and write some records\n+        BKSyncLogWriter writer = (BKSyncLogWriter)dlm.startLogSegmentNonPartitioned();\n+        for (long j = 1; j <= DEFAULT_SEGMENT_SIZE; j++) {\n+            writer.write(DLMTestUtil.getLogRecordInstance(txid++));\n+        }\n+        BKLogSegmentWriter perStreamLogWriter = writer.getCachedLogWriter();\n+        writer.closeAndComplete();\n+        BKLogWriteHandler blplm = ((BKDistributedLogManager) (dlm)).createWriteHandler(true);\n+        assertNotNull(zkc.exists(blplm.completedLedgerZNode(txid, txid - 1,\n+            perStreamLogWriter.getLogSegmentSequenceNumber()), false));\n+        Utils.ioResult(blplm.asyncClose());\n+\n+        // Should be able to open the underline ledger using BK client\n+        long ledgerId = perStreamLogWriter.getLogSegmentId();\n+        BKNamespaceDriver driver = (BKNamespaceDriver) dlm.getNamespaceDriver();\n+        driver.getReaderBKC().get().openLedgerNoRecovery(ledgerId,\n+            BookKeeper.DigestType.CRC32, conf.getBKDigestPW().getBytes(UTF_8));\n+        // Delete the log and we shouldn\'t be able the open the ledger\n+        dlm.delete();\n+        try {\n+            driver.getReaderBKC().get().openLedgerNoRecovery(ledgerId,\n+                BookKeeper.DigestType.CRC32, conf.getBKDigestPW().getBytes(UTF_8));\n+            fail(""Should fail to open ledger after we delete the log"");\n+        } catch (BKException.BKNoSuchLedgerExistsException e) {\n+            // ignore\n+        }\n+        // delete again should not throw any exception\n+        try {\n+            dlm.delete();\n+        } catch (IOException ioe) {\n+            fail(""Delete log twice should not throw any exception"");\n+        }\n+    }\n }'"

valid,type,issue,module,commit,parent,testcase,has_test_annotation,traces,bugged_components,description,extra_description,blamed_components,diff
True,Delta,516,commons-dbcp,af598460ac9990c2a02823b3cfbdaf9f5429ad5e,c2efa4a80ff5bdc422999e3cba6843935aded1a0,org.apache.commons.dbcp2.managed.TestManagedDataSourceInTx.testDoubleReturn,False,[],,,,org.apache.commons.dbcp2.managed.managedconnection.updatetransactionstatus(),"u'diff --git a/src/test/java/org/apache/commons/dbcp2/managed/TestManagedDataSourceInTx.java b/src/test/java/org/apache/commons/dbcp2/managed/TestManagedDataSourceInTx.java\nindex 0dbfe763..8090cc67 100644\n--- a/src/test/java/org/apache/commons/dbcp2/managed/TestManagedDataSourceInTx.java\n+++ b/src/test/java/org/apache/commons/dbcp2/managed/TestManagedDataSourceInTx.java\n@@ -17,6 +17,7 @@\n  */\n package org.apache.commons.dbcp2.managed;\n \n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertSame;\n@@ -129,6 +130,41 @@ public class TestManagedDataSourceInTx extends TestManagedDataSource {\n         transactionManager.commit();\n     }\n \n+    @Test\n+    public void testDoubleReturn() throws Exception {\n+        transactionManager.getTransaction().registerSynchronization(new Synchronization() {\n+            private ManagedConnection<?> conn;\n+\n+            @Override\n+            public void beforeCompletion() {\n+                try {\n+                    conn = (ManagedConnection<?>) ds.getConnection();\n+                    assertNotNull(conn);\n+                } catch (final SQLException e) {\n+                    fail(""Could not get connection"");\n+                }\n+            }\n+\n+            @Override\n+            public void afterCompletion(final int i) {\n+                final int numActive = pool.getNumActive();\n+                try {\n+                    conn.checkOpen();\n+                } catch (final Exception e) {\n+                    // Ignore\n+                }\n+                assertEquals(numActive, pool.getNumActive());\n+                try {\n+                    conn.close();\n+                } catch (final Exception e) {\n+                    fail(""Should have been able to close the connection"");\n+                }\n+                // TODO Requires DBCP-515 assertTrue(numActive -1 == pool.getNumActive());\n+            }\n+        });\n+        transactionManager.commit();\n+    }\n+\n     @Override\n     @Test\n     public void testHashCode() throws Exception {'"
True,Delta,516,commons-dbcp,af598460ac9990c2a02823b3cfbdaf9f5429ad5e,c2efa4a80ff5bdc422999e3cba6843935aded1a0,org.apache.commons.dbcp2.managed.TestManagedDataSourceInTx.testDoubleReturn,False,[],,,,org.apache.commons.dbcp2.managed.managedconnection.updatetransactionstatus(),"u'diff --git a/src/test/java/org/apache/commons/dbcp2/managed/TestManagedDataSourceInTx.java b/src/test/java/org/apache/commons/dbcp2/managed/TestManagedDataSourceInTx.java\nindex 0dbfe763..8090cc67 100644\n--- a/src/test/java/org/apache/commons/dbcp2/managed/TestManagedDataSourceInTx.java\n+++ b/src/test/java/org/apache/commons/dbcp2/managed/TestManagedDataSourceInTx.java\n@@ -17,6 +17,7 @@\n  */\n package org.apache.commons.dbcp2.managed;\n \n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertSame;\n@@ -129,6 +130,41 @@ public class TestManagedDataSourceInTx extends TestManagedDataSource {\n         transactionManager.commit();\n     }\n \n+    @Test\n+    public void testDoubleReturn() throws Exception {\n+        transactionManager.getTransaction().registerSynchronization(new Synchronization() {\n+            private ManagedConnection<?> conn;\n+\n+            @Override\n+            public void beforeCompletion() {\n+                try {\n+                    conn = (ManagedConnection<?>) ds.getConnection();\n+                    assertNotNull(conn);\n+                } catch (final SQLException e) {\n+                    fail(""Could not get connection"");\n+                }\n+            }\n+\n+            @Override\n+            public void afterCompletion(final int i) {\n+                final int numActive = pool.getNumActive();\n+                try {\n+                    conn.checkOpen();\n+                } catch (final Exception e) {\n+                    // Ignore\n+                }\n+                assertEquals(numActive, pool.getNumActive());\n+                try {\n+                    conn.close();\n+                } catch (final Exception e) {\n+                    fail(""Should have been able to close the connection"");\n+                }\n+                // TODO Requires DBCP-515 assertTrue(numActive -1 == pool.getNumActive());\n+            }\n+        });\n+        transactionManager.commit();\n+    }\n+\n     @Override\n     @Test\n     public void testHashCode() throws Exception {'"
True,Delta,496,commons-dbcp,735d9a839110590ff1c82ff619cbd7facb34d078,b3654dbd3f21b6d7863eb491faf33a02bbcc9100,org.apache.commons.dbcp2.datasources.TestSharedPoolDataSource.testPoolPreparedCalls,False,[],,,,org.apache.commons.dbcp2.cpdsadapter.pooledconnectionimpl.setstatementpool(keyedobjectpool)@org.apache.commons.dbcp2.cpdsadapter.pooledconnectionimpl.finalize()@org.apache.commons.dbcp2.cpdsadapter.pooledconnectionimpl.createkey(string)@org.apache.commons.dbcp2.cpdsadapter.pooledconnectionimpl.makeobject(pstmtkeycpds)@org.apache.commons.dbcp2.poolingconnection.poolingconnection(connection),"u'diff --git a/src/test/java/org/apache/commons/dbcp2/datasources/TestSharedPoolDataSource.java b/src/test/java/org/apache/commons/dbcp2/datasources/TestSharedPoolDataSource.java\nindex e41fdcdd..f436b6c8 100644\n--- a/src/test/java/org/apache/commons/dbcp2/datasources/TestSharedPoolDataSource.java\n+++ b/src/test/java/org/apache/commons/dbcp2/datasources/TestSharedPoolDataSource.java\n@@ -22,6 +22,7 @@ import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n+import java.sql.CallableStatement;\n import java.sql.Connection;\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n@@ -396,6 +397,22 @@ public class TestSharedPoolDataSource extends TestConnectionPool {\n \n     // Bugzilla Bug 24136 ClassCastException in DriverAdapterCPDS\n     // when setPoolPreparedStatements(true)\n+    @Test\n+    public void testPoolPrepareCall() throws Exception {\n+        pcds.setPoolPreparedStatements(true);\n+\n+        final Connection conn = ds.getConnection();\n+        assertNotNull(conn);\n+        final PreparedStatement stmt = conn.prepareCall(""{call home()}"");\n+        assertNotNull(stmt);\n+        final ResultSet rset = stmt.executeQuery();\n+        assertNotNull(rset);\n+        assertTrue(rset.next());\n+        rset.close();\n+        stmt.close();\n+        conn.close();\n+    }\n+\n     @Test\n     public void testPoolPrepareStatement() throws Exception {\n         pcds.setPoolPreparedStatements(true);\n@@ -412,6 +429,37 @@ public class TestSharedPoolDataSource extends TestConnectionPool {\n         conn.close();\n     }\n \n+    // There are 3 different prepareCall statement methods so add a little\n+    // complexity to reduce what would otherwise be lots of copy and paste\n+    private static abstract class PrepareCallCallback {\n+        protected Connection conn;\n+        void setConnection(final Connection conn) {\n+            this.conn = conn;\n+        }\n+        abstract CallableStatement getCallableStatement() throws SQLException;\n+    }\n+\n+    private static class CscbString extends PrepareCallCallback {\n+        @Override\n+        CallableStatement getCallableStatement() throws SQLException {\n+            return conn.prepareCall(""{call home()}"");\n+        }\n+    }\n+\n+    private static class CscbStringIntInt extends PrepareCallCallback {\n+        @Override\n+        CallableStatement getCallableStatement() throws SQLException {\n+            return conn.prepareCall(""{call home()}"", 0, 0);\n+        }\n+    }\n+\n+    private static class CscbStringIntIntInt extends PrepareCallCallback {\n+        @Override\n+        CallableStatement getCallableStatement() throws SQLException {\n+            return conn.prepareCall(""{call home()}"", 0, 0, 0);\n+        }\n+    }\n+\n     // There are 6 different prepareStatement statement methods so add a little\n     // complexity to reduce what would otherwise be lots of copy and paste\n     private static abstract class PrepareStatementCallback {\n@@ -421,49 +469,127 @@ public class TestSharedPoolDataSource extends TestConnectionPool {\n         }\n         abstract PreparedStatement getPreparedStatement() throws SQLException;\n     }\n-    \n+\n     private static class PscbString extends PrepareStatementCallback {\n         @Override\n         PreparedStatement getPreparedStatement() throws SQLException {\n             return conn.prepareStatement(""select * from dual"");\n         }\n     }\n-    \n+\n     private static class PscbStringIntInt extends PrepareStatementCallback {\n         @Override\n         PreparedStatement getPreparedStatement() throws SQLException {\n             return conn.prepareStatement(""select * from dual"", 0, 0);\n         }\n     }\n-    \n+\n     private static class PscbStringInt extends PrepareStatementCallback {\n         @Override\n         PreparedStatement getPreparedStatement() throws SQLException {\n             return conn.prepareStatement(""select * from dual"", 0);\n         }\n     }\n-    \n+\n     private static class PscbStringIntArray extends PrepareStatementCallback {\n         @Override\n         PreparedStatement getPreparedStatement() throws SQLException {\n             return conn.prepareStatement(""select * from dual"", new int[0]);\n         }\n     }\n-    \n+\n     private static class PscbStringStringArray extends PrepareStatementCallback {\n         @Override\n         PreparedStatement getPreparedStatement() throws SQLException {\n             return conn.prepareStatement(""select * from dual"", new String[0]);\n         }\n     }\n-    \n+\n     private static class PscbStringIntIntInt extends PrepareStatementCallback {\n         @Override\n         PreparedStatement getPreparedStatement() throws SQLException {\n             return conn.prepareStatement(""select * from dual"", 0, 0, 0);\n         }\n     }\n-    \n+\n+    private void doTestPoolCallableStatements(final PrepareCallCallback callBack)\n+    throws Exception {\n+        final DriverAdapterCPDS myPcds = new DriverAdapterCPDS();\n+        DataSource myDs = null;\n+        myPcds.setDriver(""org.apache.commons.dbcp2.TesterDriver"");\n+        myPcds.setUrl(""jdbc:apache:commons:testdriver"");\n+        myPcds.setUser(""foo"");\n+        myPcds.setPassword(""bar"");\n+        myPcds.setPoolPreparedStatements(true);\n+        myPcds.setMaxPreparedStatements(10);\n+\n+        final SharedPoolDataSource spDs = new SharedPoolDataSource();\n+        spDs.setConnectionPoolDataSource(myPcds);\n+        spDs.setMaxTotal(getMaxTotal());\n+        spDs.setDefaultMaxWaitMillis((int) getMaxWaitMillis());\n+        spDs.setDefaultTransactionIsolation(\n+            Connection.TRANSACTION_READ_COMMITTED);\n+\n+        myDs = spDs;\n+\n+        Connection conn = ds.getConnection();\n+        callBack.setConnection(conn);\n+        CallableStatement stmt = null;\n+        ResultSet rset = null;\n+\n+        assertNotNull(conn);\n+\n+        stmt = callBack.getCallableStatement();\n+        assertNotNull(stmt);\n+        final long l1HashCode = ((DelegatingStatement) stmt).getDelegate().hashCode();\n+        rset = stmt.executeQuery();\n+        assertNotNull(rset);\n+        assertTrue(rset.next());\n+        rset.close();\n+        stmt.close();\n+\n+        stmt = callBack.getCallableStatement();\n+        assertNotNull(stmt);\n+        final long l2HashCode = ((DelegatingStatement) stmt).getDelegate().hashCode();\n+        rset = stmt.executeQuery();\n+        assertNotNull(rset);\n+        assertTrue(rset.next());\n+        rset.close();\n+        stmt.close();\n+\n+        // statement pooling is not enabled, we should get different statements\n+        assertTrue(l1HashCode != l2HashCode);\n+        conn.close();\n+        conn = null;\n+\n+        conn = myDs.getConnection();\n+        callBack.setConnection(conn);\n+\n+        stmt = callBack.getCallableStatement();\n+        assertNotNull(stmt);\n+        final long l3HashCode = ((DelegatingStatement) stmt).getDelegate().hashCode();\n+        rset = stmt.executeQuery();\n+        assertNotNull(rset);\n+        assertTrue(rset.next());\n+        rset.close();\n+        stmt.close();\n+\n+        stmt = callBack.getCallableStatement();\n+        assertNotNull(stmt);\n+        final long l4HashCode = ((DelegatingStatement) stmt).getDelegate().hashCode();\n+        rset = stmt.executeQuery();\n+        assertNotNull(rset);\n+        assertTrue(rset.next());\n+        rset.close();\n+        stmt.close();\n+\n+        // prepared statement pooling is working\n+        assertTrue(l3HashCode == l4HashCode);\n+        conn.close();\n+        conn = null;\n+        spDs.close();\n+    }\n+\n     private void doTestPoolPreparedStatements(final PrepareStatementCallback callBack)\n     throws Exception {\n         final DriverAdapterCPDS mypcds = new DriverAdapterCPDS();\n@@ -542,6 +668,13 @@ public class TestSharedPoolDataSource extends TestConnectionPool {\n         tds.close();\n     }\n \n+    @Test\n+    public void testPoolPreparedCalls() throws Exception {\n+        doTestPoolCallableStatements(new CscbString());\n+        doTestPoolCallableStatements(new CscbStringIntInt());\n+        doTestPoolCallableStatements(new CscbStringIntIntInt());\n+    }\n+\n     @Test\n     public void testPoolPreparedStatements() throws Exception {\n         doTestPoolPreparedStatements(new PscbString());'"
True,Delta,496,commons-dbcp,735d9a839110590ff1c82ff619cbd7facb34d078,b3654dbd3f21b6d7863eb491faf33a02bbcc9100,org.apache.commons.dbcp2.datasources.TestSharedPoolDataSource.testPoolPreparedCalls,False,[],,,,org.apache.commons.dbcp2.cpdsadapter.pooledconnectionimpl.setstatementpool(keyedobjectpool)@org.apache.commons.dbcp2.cpdsadapter.pooledconnectionimpl.finalize()@org.apache.commons.dbcp2.cpdsadapter.pooledconnectionimpl.createkey(string)@org.apache.commons.dbcp2.cpdsadapter.pooledconnectionimpl.makeobject(pstmtkeycpds)@org.apache.commons.dbcp2.poolingconnection.poolingconnection(connection),"u'diff --git a/src/test/java/org/apache/commons/dbcp2/datasources/TestSharedPoolDataSource.java b/src/test/java/org/apache/commons/dbcp2/datasources/TestSharedPoolDataSource.java\nindex e41fdcdd..f436b6c8 100644\n--- a/src/test/java/org/apache/commons/dbcp2/datasources/TestSharedPoolDataSource.java\n+++ b/src/test/java/org/apache/commons/dbcp2/datasources/TestSharedPoolDataSource.java\n@@ -22,6 +22,7 @@ import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n+import java.sql.CallableStatement;\n import java.sql.Connection;\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n@@ -396,6 +397,22 @@ public class TestSharedPoolDataSource extends TestConnectionPool {\n \n     // Bugzilla Bug 24136 ClassCastException in DriverAdapterCPDS\n     // when setPoolPreparedStatements(true)\n+    @Test\n+    public void testPoolPrepareCall() throws Exception {\n+        pcds.setPoolPreparedStatements(true);\n+\n+        final Connection conn = ds.getConnection();\n+        assertNotNull(conn);\n+        final PreparedStatement stmt = conn.prepareCall(""{call home()}"");\n+        assertNotNull(stmt);\n+        final ResultSet rset = stmt.executeQuery();\n+        assertNotNull(rset);\n+        assertTrue(rset.next());\n+        rset.close();\n+        stmt.close();\n+        conn.close();\n+    }\n+\n     @Test\n     public void testPoolPrepareStatement() throws Exception {\n         pcds.setPoolPreparedStatements(true);\n@@ -412,6 +429,37 @@ public class TestSharedPoolDataSource extends TestConnectionPool {\n         conn.close();\n     }\n \n+    // There are 3 different prepareCall statement methods so add a little\n+    // complexity to reduce what would otherwise be lots of copy and paste\n+    private static abstract class PrepareCallCallback {\n+        protected Connection conn;\n+        void setConnection(final Connection conn) {\n+            this.conn = conn;\n+        }\n+        abstract CallableStatement getCallableStatement() throws SQLException;\n+    }\n+\n+    private static class CscbString extends PrepareCallCallback {\n+        @Override\n+        CallableStatement getCallableStatement() throws SQLException {\n+            return conn.prepareCall(""{call home()}"");\n+        }\n+    }\n+\n+    private static class CscbStringIntInt extends PrepareCallCallback {\n+        @Override\n+        CallableStatement getCallableStatement() throws SQLException {\n+            return conn.prepareCall(""{call home()}"", 0, 0);\n+        }\n+    }\n+\n+    private static class CscbStringIntIntInt extends PrepareCallCallback {\n+        @Override\n+        CallableStatement getCallableStatement() throws SQLException {\n+            return conn.prepareCall(""{call home()}"", 0, 0, 0);\n+        }\n+    }\n+\n     // There are 6 different prepareStatement statement methods so add a little\n     // complexity to reduce what would otherwise be lots of copy and paste\n     private static abstract class PrepareStatementCallback {\n@@ -421,49 +469,127 @@ public class TestSharedPoolDataSource extends TestConnectionPool {\n         }\n         abstract PreparedStatement getPreparedStatement() throws SQLException;\n     }\n-    \n+\n     private static class PscbString extends PrepareStatementCallback {\n         @Override\n         PreparedStatement getPreparedStatement() throws SQLException {\n             return conn.prepareStatement(""select * from dual"");\n         }\n     }\n-    \n+\n     private static class PscbStringIntInt extends PrepareStatementCallback {\n         @Override\n         PreparedStatement getPreparedStatement() throws SQLException {\n             return conn.prepareStatement(""select * from dual"", 0, 0);\n         }\n     }\n-    \n+\n     private static class PscbStringInt extends PrepareStatementCallback {\n         @Override\n         PreparedStatement getPreparedStatement() throws SQLException {\n             return conn.prepareStatement(""select * from dual"", 0);\n         }\n     }\n-    \n+\n     private static class PscbStringIntArray extends PrepareStatementCallback {\n         @Override\n         PreparedStatement getPreparedStatement() throws SQLException {\n             return conn.prepareStatement(""select * from dual"", new int[0]);\n         }\n     }\n-    \n+\n     private static class PscbStringStringArray extends PrepareStatementCallback {\n         @Override\n         PreparedStatement getPreparedStatement() throws SQLException {\n             return conn.prepareStatement(""select * from dual"", new String[0]);\n         }\n     }\n-    \n+\n     private static class PscbStringIntIntInt extends PrepareStatementCallback {\n         @Override\n         PreparedStatement getPreparedStatement() throws SQLException {\n             return conn.prepareStatement(""select * from dual"", 0, 0, 0);\n         }\n     }\n-    \n+\n+    private void doTestPoolCallableStatements(final PrepareCallCallback callBack)\n+    throws Exception {\n+        final DriverAdapterCPDS myPcds = new DriverAdapterCPDS();\n+        DataSource myDs = null;\n+        myPcds.setDriver(""org.apache.commons.dbcp2.TesterDriver"");\n+        myPcds.setUrl(""jdbc:apache:commons:testdriver"");\n+        myPcds.setUser(""foo"");\n+        myPcds.setPassword(""bar"");\n+        myPcds.setPoolPreparedStatements(true);\n+        myPcds.setMaxPreparedStatements(10);\n+\n+        final SharedPoolDataSource spDs = new SharedPoolDataSource();\n+        spDs.setConnectionPoolDataSource(myPcds);\n+        spDs.setMaxTotal(getMaxTotal());\n+        spDs.setDefaultMaxWaitMillis((int) getMaxWaitMillis());\n+        spDs.setDefaultTransactionIsolation(\n+            Connection.TRANSACTION_READ_COMMITTED);\n+\n+        myDs = spDs;\n+\n+        Connection conn = ds.getConnection();\n+        callBack.setConnection(conn);\n+        CallableStatement stmt = null;\n+        ResultSet rset = null;\n+\n+        assertNotNull(conn);\n+\n+        stmt = callBack.getCallableStatement();\n+        assertNotNull(stmt);\n+        final long l1HashCode = ((DelegatingStatement) stmt).getDelegate().hashCode();\n+        rset = stmt.executeQuery();\n+        assertNotNull(rset);\n+        assertTrue(rset.next());\n+        rset.close();\n+        stmt.close();\n+\n+        stmt = callBack.getCallableStatement();\n+        assertNotNull(stmt);\n+        final long l2HashCode = ((DelegatingStatement) stmt).getDelegate().hashCode();\n+        rset = stmt.executeQuery();\n+        assertNotNull(rset);\n+        assertTrue(rset.next());\n+        rset.close();\n+        stmt.close();\n+\n+        // statement pooling is not enabled, we should get different statements\n+        assertTrue(l1HashCode != l2HashCode);\n+        conn.close();\n+        conn = null;\n+\n+        conn = myDs.getConnection();\n+        callBack.setConnection(conn);\n+\n+        stmt = callBack.getCallableStatement();\n+        assertNotNull(stmt);\n+        final long l3HashCode = ((DelegatingStatement) stmt).getDelegate().hashCode();\n+        rset = stmt.executeQuery();\n+        assertNotNull(rset);\n+        assertTrue(rset.next());\n+        rset.close();\n+        stmt.close();\n+\n+        stmt = callBack.getCallableStatement();\n+        assertNotNull(stmt);\n+        final long l4HashCode = ((DelegatingStatement) stmt).getDelegate().hashCode();\n+        rset = stmt.executeQuery();\n+        assertNotNull(rset);\n+        assertTrue(rset.next());\n+        rset.close();\n+        stmt.close();\n+\n+        // prepared statement pooling is working\n+        assertTrue(l3HashCode == l4HashCode);\n+        conn.close();\n+        conn = null;\n+        spDs.close();\n+    }\n+\n     private void doTestPoolPreparedStatements(final PrepareStatementCallback callBack)\n     throws Exception {\n         final DriverAdapterCPDS mypcds = new DriverAdapterCPDS();\n@@ -542,6 +668,13 @@ public class TestSharedPoolDataSource extends TestConnectionPool {\n         tds.close();\n     }\n \n+    @Test\n+    public void testPoolPreparedCalls() throws Exception {\n+        doTestPoolCallableStatements(new CscbString());\n+        doTestPoolCallableStatements(new CscbStringIntInt());\n+        doTestPoolCallableStatements(new CscbStringIntIntInt());\n+    }\n+\n     @Test\n     public void testPoolPreparedStatements() throws Exception {\n         doTestPoolPreparedStatements(new PscbString());'"
True,Delta,457,commons-dbcp,8408716a7f2909eab4618ac2ab6e9a1565a993d0,6641cc08d9568fcd6a291cab8cb0a7c4860e43b6,org.apache.commons.dbcp2.TestBasicDataSource.testMutateAbandonedConfig,False,[],,,,org.apache.commons.dbcp2.basicdatasource.setremoveabandonedonmaintenance(boolean)@org.apache.commons.dbcp2.basicdatasource.setabandonedlogwriter(printwriter)@org.apache.commons.dbcp2.basicdatasource.setabandonedusagetracking(boolean)@org.apache.commons.dbcp2.basicdatasource.setlogabandoned(boolean)@org.apache.commons.dbcp2.basicdatasource.setremoveabandonedtimeout(int)@org.apache.commons.dbcp2.basicdatasource.setremoveabandonedonborrow(boolean),"u'diff --git a/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java b/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java\nindex 3f1667db..db990490 100644\n--- a/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java\n+++ b/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java\n@@ -35,6 +35,7 @@ import javax.sql.DataSource;\n \n import org.apache.commons.logging.LogFactory;\n import org.junit.After;\n+import org.junit.Assert;\n import org.junit.Before;\n import org.junit.BeforeClass;\n import org.junit.Test;\n@@ -795,6 +796,26 @@ public class TestBasicDataSource extends TestConnectionPool {\n         assertTrue(pcf.getDisconnectionSqlCodes().contains(""XXX""));\n         assertEquals(1, pcf.getDisconnectionSqlCodes().size());\n     }\n+\n+    /**\n+     * JIRA: DBCP-457\n+     * Verify that changes made to abandoned config are passed to the underlying\n+     * pool.\n+     */\n+    @Test\n+    public void testMutateAbandonedConfig() throws Exception {\n+        final Properties properties = new Properties();\n+        properties.put(""initialSize"", ""1"");\n+        properties.put(""driverClassName"", ""org.apache.commons.dbcp2.TesterDriver"");\n+        properties.put(""url"", ""jdbc:apache:commons:testdriver"");\n+        properties.put(""username"", ""foo"");\n+        properties.put(""password"", ""bar"");\n+        final BasicDataSource ds = BasicDataSourceFactory.createDataSource(properties);\n+        boolean original = ds.getConnectionPool().getLogAbandoned();\n+        ds.setLogAbandoned(!original);\n+        Assert.assertNotEquals(Boolean.valueOf(original),\n+                Boolean.valueOf(ds.getConnectionPool().getLogAbandoned()));\n+    }\n }\n \n /**'"
True,Delta,457,commons-dbcp,8408716a7f2909eab4618ac2ab6e9a1565a993d0,6641cc08d9568fcd6a291cab8cb0a7c4860e43b6,org.apache.commons.dbcp2.TestBasicDataSource.testMutateAbandonedConfig,False,[],,,,org.apache.commons.dbcp2.basicdatasource.setremoveabandonedonmaintenance(boolean)@org.apache.commons.dbcp2.basicdatasource.setabandonedlogwriter(printwriter)@org.apache.commons.dbcp2.basicdatasource.setabandonedusagetracking(boolean)@org.apache.commons.dbcp2.basicdatasource.setlogabandoned(boolean)@org.apache.commons.dbcp2.basicdatasource.setremoveabandonedtimeout(int)@org.apache.commons.dbcp2.basicdatasource.setremoveabandonedonborrow(boolean),"u'diff --git a/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java b/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java\nindex 3f1667db..db990490 100644\n--- a/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java\n+++ b/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java\n@@ -35,6 +35,7 @@ import javax.sql.DataSource;\n \n import org.apache.commons.logging.LogFactory;\n import org.junit.After;\n+import org.junit.Assert;\n import org.junit.Before;\n import org.junit.BeforeClass;\n import org.junit.Test;\n@@ -795,6 +796,26 @@ public class TestBasicDataSource extends TestConnectionPool {\n         assertTrue(pcf.getDisconnectionSqlCodes().contains(""XXX""));\n         assertEquals(1, pcf.getDisconnectionSqlCodes().size());\n     }\n+\n+    /**\n+     * JIRA: DBCP-457\n+     * Verify that changes made to abandoned config are passed to the underlying\n+     * pool.\n+     */\n+    @Test\n+    public void testMutateAbandonedConfig() throws Exception {\n+        final Properties properties = new Properties();\n+        properties.put(""initialSize"", ""1"");\n+        properties.put(""driverClassName"", ""org.apache.commons.dbcp2.TesterDriver"");\n+        properties.put(""url"", ""jdbc:apache:commons:testdriver"");\n+        properties.put(""username"", ""foo"");\n+        properties.put(""password"", ""bar"");\n+        final BasicDataSource ds = BasicDataSourceFactory.createDataSource(properties);\n+        boolean original = ds.getConnectionPool().getLogAbandoned();\n+        ds.setLogAbandoned(!original);\n+        Assert.assertNotEquals(Boolean.valueOf(original),\n+                Boolean.valueOf(ds.getConnectionPool().getLogAbandoned()));\n+    }\n }\n \n /**'"
True,Regression,453,commons-dbcp,4475a0022d22d7a0433983546f89e7f58c713382,43a6189c381c64f6c4308b4b19f5f05ab42c257d,org.apache.commons.dbcp2.TestBasicDataSourceFactory.testAllProperties,False,[],,,,org.apache.commons.dbcp2.basicdatasource.createconnectionpool(poolableconnectionfactory)@org.apache.commons.dbcp2.basicdatasource.createdatasource(),"u'diff --git a/src/test/java/org/apache/commons/dbcp2/TestBasicDataSourceFactory.java b/src/test/java/org/apache/commons/dbcp2/TestBasicDataSourceFactory.java\nindex b43fe2f9..fea4dcfc 100644\n--- a/src/test/java/org/apache/commons/dbcp2/TestBasicDataSourceFactory.java\n+++ b/src/test/java/org/apache/commons/dbcp2/TestBasicDataSourceFactory.java\n@@ -32,6 +32,7 @@ import javax.management.MBeanServer;\n import javax.naming.Reference;\n import javax.naming.StringRefAddr;\n \n+import org.apache.commons.pool2.impl.GenericObjectPool;\n import org.junit.Test;\n \n /**\n@@ -98,6 +99,7 @@ public class TestBasicDataSourceFactory {\n             final BasicDataSourceFactory basicDataSourceFactory = new BasicDataSourceFactory();\n             final BasicDataSource ds = (BasicDataSource) basicDataSourceFactory.getObjectInstance(ref, null, null, null);\n             checkDataSourceProperties(ds);\n+            checkConnectionPoolProperties(ds.getConnectionPool());\n             final List<String> messages = StackMessageLog.getAll();\n             assertEquals(0,messages.size());\n         } finally {\n@@ -191,4 +193,24 @@ public class TestBasicDataSourceFactory {\n         final MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n         mbs.unregisterMBean(ds.getRegisteredJmxName());\n     }\n+\n+    private void checkConnectionPoolProperties(final GenericObjectPool<PoolableConnection> cp) {\n+        assertEquals(10, cp.getMaxTotal());\n+        assertEquals(8, cp.getMaxIdle());\n+        assertEquals(0, cp.getMinIdle());\n+        assertEquals(500, cp.getMaxWaitMillis());\n+        assertEquals(5, cp.getNumIdle());\n+        assertTrue(cp.getTestOnBorrow());\n+        assertFalse(cp.getTestOnReturn());\n+        assertEquals(1000, cp.getTimeBetweenEvictionRunsMillis());\n+        assertEquals(2000, cp.getMinEvictableIdleTimeMillis());\n+        assertEquals(3000, cp.getSoftMinEvictableIdleTimeMillis());\n+        assertEquals(2, cp.getNumTestsPerEvictionRun());\n+        assertTrue(cp.getTestWhileIdle());\n+        assertTrue(cp.getRemoveAbandonedOnBorrow());\n+        assertTrue(cp.getRemoveAbandonedOnMaintenance());\n+        assertEquals(3000, cp.getRemoveAbandonedTimeout());\n+        assertTrue(cp.getLogAbandoned());\n+        assertTrue(cp.getLifo());\n+    }\n }'"
True,Regression,453,commons-dbcp,4475a0022d22d7a0433983546f89e7f58c713382,43a6189c381c64f6c4308b4b19f5f05ab42c257d,org.apache.commons.dbcp2.TestBasicDataSourceFactory.testAllProperties,False,[],,,,org.apache.commons.dbcp2.basicdatasource.createconnectionpool(poolableconnectionfactory)@org.apache.commons.dbcp2.basicdatasource.createdatasource(),"u'diff --git a/src/test/java/org/apache/commons/dbcp2/TestBasicDataSourceFactory.java b/src/test/java/org/apache/commons/dbcp2/TestBasicDataSourceFactory.java\nindex b43fe2f9..fea4dcfc 100644\n--- a/src/test/java/org/apache/commons/dbcp2/TestBasicDataSourceFactory.java\n+++ b/src/test/java/org/apache/commons/dbcp2/TestBasicDataSourceFactory.java\n@@ -32,6 +32,7 @@ import javax.management.MBeanServer;\n import javax.naming.Reference;\n import javax.naming.StringRefAddr;\n \n+import org.apache.commons.pool2.impl.GenericObjectPool;\n import org.junit.Test;\n \n /**\n@@ -98,6 +99,7 @@ public class TestBasicDataSourceFactory {\n             final BasicDataSourceFactory basicDataSourceFactory = new BasicDataSourceFactory();\n             final BasicDataSource ds = (BasicDataSource) basicDataSourceFactory.getObjectInstance(ref, null, null, null);\n             checkDataSourceProperties(ds);\n+            checkConnectionPoolProperties(ds.getConnectionPool());\n             final List<String> messages = StackMessageLog.getAll();\n             assertEquals(0,messages.size());\n         } finally {\n@@ -191,4 +193,24 @@ public class TestBasicDataSourceFactory {\n         final MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n         mbs.unregisterMBean(ds.getRegisteredJmxName());\n     }\n+\n+    private void checkConnectionPoolProperties(final GenericObjectPool<PoolableConnection> cp) {\n+        assertEquals(10, cp.getMaxTotal());\n+        assertEquals(8, cp.getMaxIdle());\n+        assertEquals(0, cp.getMinIdle());\n+        assertEquals(500, cp.getMaxWaitMillis());\n+        assertEquals(5, cp.getNumIdle());\n+        assertTrue(cp.getTestOnBorrow());\n+        assertFalse(cp.getTestOnReturn());\n+        assertEquals(1000, cp.getTimeBetweenEvictionRunsMillis());\n+        assertEquals(2000, cp.getMinEvictableIdleTimeMillis());\n+        assertEquals(3000, cp.getSoftMinEvictableIdleTimeMillis());\n+        assertEquals(2, cp.getNumTestsPerEvictionRun());\n+        assertTrue(cp.getTestWhileIdle());\n+        assertTrue(cp.getRemoveAbandonedOnBorrow());\n+        assertTrue(cp.getRemoveAbandonedOnMaintenance());\n+        assertEquals(3000, cp.getRemoveAbandonedTimeout());\n+        assertTrue(cp.getLogAbandoned());\n+        assertTrue(cp.getLifo());\n+    }\n }'"
